Перем БазоваяФорма;

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Истина
		И ОбработкаОбъект.НастройкиИнструментов <> Неопределено
		И ОбработкаОбъект.НастройкиИнструментов.Свойство("РасположениеПанелиЗапуска") 
	Тогда
		Попытка
			РасположениеПанелиЗапуска = Число(ОбработкаОбъект.НастройкиИнструментов.РасположениеПанелиЗапуска);
		Исключение	
			РасположениеПанелиЗапуска = 1;
		КонецПопытки;
		Если РасположениеПанелиЗапуска <= 0 ИЛИ РасположениеПанелиЗапуска > 4 Тогда
			РасположениеПанелиЗапуска = 1;
		КонецЕсли;
	Иначе
		РасположениеПанелиЗапуска = 1;
	КонецЕсли; 
	
	Если Истина
		И ОбработкаОбъект.НастройкиИнструментов <> Неопределено
		И ОбработкаОбъект.НастройкиИнструментов.Свойство("ОпределениеСерверногоВремени") 
	Тогда
		Попытка   			
			ОпределениеСерверногоВремени = Число(ОбработкаОбъект.НастройкиИнструментов.ОпределениеСерверногоВремени);
		Исключение
			ОпределениеСерверногоВремени = 1
		КонецПопытки;			
		Если ОпределениеСерверногоВремени <= 0 ИЛИ ОпределениеСерверногоВремени > 3 Тогда
			ОпределениеСерверногоВремени = 1;
		КонецЕсли;
	Иначе
		ОпределениеСерверногоВремени = 1;
	КонецЕсли;  	
	ЗапускатьПриСтарте = ОпределитьФлагЗапускаПриСтарте();
	ЭтаФорма.ИмяФайлаНастроек = БазоваяФорма.ПолучитьПолноеИмяФайлаНастроек();
	ЭтаФорма.КонтекстДляОтладчика = БазоваяФорма.ПолучитьВычисляемыйКонтекстОтладчика();
	
КонецПроцедуры

Процедура ОбновитьТекстОпределениеСерверногоВремени()
	
	Если ОпределениеСерверногоВремени = 1 Тогда 		
		ОпределениеСерверногоВремениСтрокой = "(Время клиента)"; 		
	ИначеЕсли ОпределениеСерверногоВремени = 2 Тогда    		
		ОпределениеСерверногоВремениСтрокой = "(Оперативная отметка времени)";  		
	ИначеЕсли ОпределениеСерверногоВремени = 3 Тогда    		
		ОпределениеСерверногоВремениСтрокой = "(Время сервера строки подключения с помощью скрипта)";  		
	КонецЕсли; 
	
КонецПроцедуры 

Процедура ОбновлениеОтображения()
	ОбновитьТекстОпределениеСерверногоВремени();
КонецПроцедуры
      
Процедура ОсновныеДействияФормыСохранитьНастройки(Кнопка)
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("РасположениеПанелиЗапуска", РасположениеПанелиЗапуска);	
	СтруктураНастроек.Вставить("ОпределениеСерверногоВремени", ОпределениеСерверногоВремени);
	СтруктураНастроек.Вставить("СписокИнструментов", СписокИнструментов.Выгрузить());
	БазоваяФорма.ЗаписатьНастройки(СтруктураНастроек);
	// запишем путь к обработке для автозапуска в файл *.v8i
	СохранитьПараметрыАвтозапуска(ЗапускатьПриСтарте);
	Закрыть(Истина);
	
КонецПроцедуры
  
Процедура ОпределениеСерверногоВремениОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// запишем путь к обработке для автозапуска в файл *.v8i
Процедура СохранитьПараметрыАвтозапуска(ЗапускатьПриСтарте)
	
	// имя этого файла
	Попытка
		ИмяФайлаОбработки = ЭтотОбъект.ИспользуемоеИмяФайла;
	Исключение
		ИмяФайлаОбработки = "";
	КонецПопытки; 
	
	// получим структуру списка баз
	ДеревоСписка = ПолучитьДеревоINIFile();
	
	Если ДеревоСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// определим, какая база в этом списке наша
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Отбор = Новый Структура("ЗначениеПараметра",СтрокаСоединения);
	СтрокиДерева = ДеревоСписка.Строки.НайтиСтроки(Отбор);
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// изменим значение
	ПараметрНайден = Ложь;
	СтрокаДерева = СтрокиДерева[0];
	Для Каждого Параметр Из СтрокаДерева.Строки Цикл
		ИмяПараметра = Параметр.ИмяПараметра;
		Если ИмяПараметра <> "AdditionalParameters" Тогда
			Продолжить;
		КонецЕсли;
		Если ЗапускатьПриСтарте Тогда
			Параметр.ЗначениеПараметра = "/EXECUTE """+ИмяФайлаОбработки+"""";
		Иначе	
			Параметр.ЗначениеПараметра = "";
		КонецЕсли;
		ПараметрНайден = Истина;
	КонецЦикла;
	
	// если параметра не было - надо добавить
	Если НЕ ПараметрНайден И ЗапускатьПриСтарте Тогда
		Параметр = СтрокаДерева.Строки.Добавить();
		Параметр.ИмяПараметра 		= "AdditionalParameters";
		Параметр.ЗначениеПараметра 	= "/EXECUTE """+ИмяФайлаОбработки+"""";
	КонецЕсли;
	// сохраним дерево назад в файлик
	СохранитьДеревоINIFile(ДеревоСписка);
	
КонецПроцедуры	

// определение значения флага запуска при старте
Функция ОпределитьФлагЗапускаПриСтарте() 
	
	ЗначениеФлага = Ложь;
	
	// имя этого файла
	Попытка
		ИмяФайлаОбработки = ЭтотОбъект.ИспользуемоеИмяФайла;
	Исключение
		ИмяФайлаОбработки = "";
	КонецПопытки; 
	
	// получим структуру списка баз
	ДеревоСписка = ПолучитьДеревоINIFile();
	Если ДеревоСписка = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// определим, какая база в этом списке наша
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Отбор = Новый Структура("ЗначениеПараметра",СтрокаСоединения);
	СтрокиДерева = ДеревоСписка.Строки.НайтиСтроки(Отбор);
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// изменим значение
	СтрокаДерева = СтрокиДерева[0];
	Для Каждого Параметр Из СтрокаДерева.Строки Цикл
		ИмяПараметра 		= Параметр.ИмяПараметра;
		Если ИмяПараметра <> "AdditionalParameters" Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(Параметр.ЗначениеПараметра, ИмяФайлаОбработки) > 0 Тогда
			ЗначениеФлага = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначениеФлага;
	
КонецФункции

// получение дерева из INI-файла
Функция ПолучитьДеревоINIFile()
	
	App 	= Новый COMОбъект("Shell.Application");
	AppData = App.Namespace(26).Self.Path;
	мИмяФайлаСписка = AppData+"\1C\1CEStart\ibases.v8i";
	// открываем файл в кодировке UTF8
	мФайлСписка = Новый ЧтениеТекста;
	Попытка
		мФайлСписка.Открыть(мИмяФайлаСписка, КодировкаТекста.UTF8);
	Исключение
		Сообщить("Не удалось открыть файл "+мИмяФайлаСписка);
		Возврат Неопределено;
	КонецПопытки;
	
	// подготовим результирующее дерево
	ДеревоСписка = Новый ДеревоЗначений;
	ДеревоСписка.Колонки.Добавить("ИмяПараметра");
	ДеревоСписка.Колонки.Добавить("ЗначениеПараметра");
	Разделитель 		= "=";
	СтрокаДерева		= Неопределено;
	// читаем файл
	ТекущаяСтрока = мФайлСписка.ПрочитатьСтроку();
	Пока НЕ ТекущаяСтрока = Неопределено Цикл
		
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока);
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			ТекущаяСтрока = мФайлСписка.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;
		ПервыйСимвол = Лев(ТекущаяСтрока,1);
		// начало раздела
		Если ПервыйСимвол = "[" Тогда
			СтрокаДерева = ДеревоСписка.Строки.Добавить();
			ИмяБазы = СтрЗаменить(ТекущаяСтрока,"[","");
			ИмяБазы = СтрЗаменить(ИмяБазы,"]","");
			СтрокаДерева.ИмяПараметра = ИмяБазы;
			ТекущаяСтрока = мФайлСписка.ПрочитатьСтроку();
			Продолжить;
		Иначе
			ПозицияРазделителя 	= Найти(ТекущаяСтрока,Разделитель);
			ИмяПараметра 		= Лев(ТекущаяСтрока,ПозицияРазделителя-1);
			ЗначениеПараметра 	= Сред(ТекущаяСтрока,ПозицияРазделителя+1);
			СтрокаПараметра		= СтрокаДерева.Строки.Добавить();
			СтрокаПараметра.ИмяПараметра 		= ИмяПараметра;
			СтрокаПараметра.ЗначениеПараметра 	= ЗначениеПараметра;
			
			// пропишем отдельно в таблице строку соединения базы
			Если ИмяПараметра = "Connect" Тогда
				СтрокаДерева.ЗначениеПараметра = ЗначениеПараметра;
			КонецЕсли;
			ТекущаяСтрока = мФайлСписка.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	App = Неопределено;
	Возврат ДеревоСписка;
	
КонецФункции	

// сохранение дерева в INI-файл
Процедура СохранитьДеревоINIFile(ДеревоСписка)
	
	App 	= Новый COMОбъект("Shell.Application");
	AppData = App.Namespace(26).Self.Path;
	мИмяФайлаСписка = AppData+"\1C\1CEStart\ibases.v8i";
	// открываем файл в кодировке UTF8
	мФайлСписка = Новый ЗаписьТекста;
	Попытка
		мФайлСписка.Открыть(мИмяФайлаСписка, КодировкаТекста.UTF8);
	Исключение
		Сообщить("Не удалось открыть файл "+мИмяФайлаСписка);
		Возврат;
	КонецПопытки;
	Для Каждого СтрокаДерева Из ДеревоСписка.Строки Цикл
		СтрокаФайла = "["+СтрокаДерева.ИмяПараметра+"]";
		мФайлСписка.ЗаписатьСтроку(СтрокаФайла);
		Для Каждого Параметр Из СтрокаДерева.Строки Цикл
			СтрокаФайла = ""+Параметр.ИмяПараметра+"="+Параметр.ЗначениеПараметра;
			мФайлСписка.ЗаписатьСтроку(СтрокаФайла);
		КонецЦикла;
	КонецЦикла;
	мФайлСписка.Закрыть();
	App = Неопределено;
	
КонецПроцедуры	

// выбор како-либо обработки для открытия
Процедура ТаблицаОбъектовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ПолноеИмя = ЭлементыФормы.СписокИнструментов.ТекущиеДанные.ПолноеИмя;
	Если ПолноеИмя <> "Разделитель" Тогда
		БазоваяФорма.ОткрытьИнструмент(ЭлементыФормы.СписокИнструментов.ТекущиеДанные);
	КонецЕсли; 
	
КонецПроцедуры

// установить флажки
Процедура КоманднаяПанельСписокОбработокУстановитьФлажки(Кнопка)
	Для Каждого Строка Из СписокИнструментов Цикл
		Строка.Видимость = Истина;
	КонецЦикла;
КонецПроцедуры

// снять флажки
Процедура КоманднаяПанельСписокОбработокСнятьФлажки(Кнопка)
	Для Каждого Строка Из СписокИнструментов Цикл
		Строка.Видимость = Ложь;
	КонецЦикла;
КонецПроцедуры

// восстановление стандартных настроек для списка обработок
Процедура КоманднаяПанельСписокОбработокВосстановитьСтандартныеНастройки(Кнопка)
	
	БазоваяФорма.ЗаполнитьСписокИнструментовСтандартныеНастройки();
	
КонецПроцедуры

Процедура СписокИнструментовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ПолноеИмя = "Разделитель" Тогда
		ОформлениеСтроки.Ячейки.Видимость.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Автозапуск.ТолькоПросмотр = Истина;
	Иначе
		ОформлениеСтроки.Ячейки.Синоним.УстановитьКартинку(ирОбщий.ПолучитьОбщуюКартинкуЛкс(ДанныеСтроки.ИмяКартинки));
	КонецЕсли; 
	
КонецПроцедуры

ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирПортативный.Форма.ФормаНастроек");
БазоваяФорма = ирОбщий.ПолучитьФормуЛкс("Обработка.ирПортативный.Форма.Форма");
