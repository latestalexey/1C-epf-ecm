////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мРезультатыПоиска Экспорт;
Перем мМетаданныеОбъекта Экспорт;
Перем мКорневойТипОбъекта Экспорт;
Перем мПутьКДаннымПоляНечеткогоСравнения;
Перем мСтруктураКлючаПоиска;
Перем мПредставления;
Перем мТекущаяГруппа;
Перем мСписокРеквизитов;
Перем мЗависимыеМетаданные;
Перем мПостроительЗапросаОтбора;
Перем мМассивОтложеннойЗагрузкиРеквизитов;
Перем мОтборТекущемуПоПравилу;
Перем мНастройкиВосстановлены;
Перем мИмяСтарогоОбъектаМД;
Перем мПрефиксКолонокРеквизитов;
Перем мТекущаяСтрокаУровняЦенности;
Перем мСхемаКомпоновки;
Перем мПсевдонимТаблицы;
Перем мПоляСравнения;
Перем мИмяПоляЦенность;
Перем мИмяПоляКоличествоЭлементов;
Перем мИмяПоляКоличествоСсылок;
Перем мИмяПоляНомерГруппы;
Перем мИмяПоляНеправильныеСсылки;
Перем мИмяПоляПравильныйЭлемент;
Перем мИмяПоляПравильныеДанные;
Перем мИмяФлагаПравильныйЭлемент;
Перем мИмяФлагаПравильныеДанные;
Перем мИмяПоляИдентификатор;
Перем мОбработкаПоискаСсылок;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ОбновитьТекущуюГруппуРезультатовПоиска()
	
	Если мТекущаяГруппа <> Неопределено Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить(мИмяПоляНомерГруппы, мТекущаяГруппа[мИмяПоляНомерГруппы]);
		МассивСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			мРезультатыПоиска.Удалить(СтрокаТаблицы);
		КонецЦикла;
		ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(ЭлементыТекущейГруппы, мРезультатыПоиска);
		мТекущаяГруппа[мИмяПоляКоличествоЭлементов] = ЭлементыТекущейГруппы.Количество();
		СтрокаПравильногоЭлемента = ЭлементыТекущейГруппы.Найти(Истина, мИмяФлагаПравильныйЭлемент);
		Если СтрокаПравильногоЭлемента <> Неопределено Тогда
			ПравильныйЭлемент = СтрокаПравильногоЭлемента.Ссылка;
		Иначе
			ПравильныйЭлемент = Неопределено;
		КонецЕсли; 
		мТекущаяГруппа[мИмяПоляПравильныйЭлемент] = ПравильныйЭлемент;
		СтрокаПравильныхДанных = ЭлементыТекущейГруппы.Найти(Истина, мИмяФлагаПравильныеДанные);
		Если СтрокаПравильныхДанных <> Неопределено Тогда
			ПравильныеДанные = СтрокаПравильныхДанных.Ссылка;
		Иначе
			ПравильныеДанные = Неопределено;
		КонецЕсли; 
		мТекущаяГруппа[мИмяПоляПравильныеДанные] = ПравильныеДанные;
		ОбновитьКоличествоСсылокНайденныхГрупп();
	КонецЕсли;
	
КонецПроцедуры // () 

Функция ПолучитьТаблицуРеквизитовПоМассивуСсылок(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка";
	Для каждого Реквизит Из мСписокРеквизитов Цикл
		Запрос.Текст = Запрос.Текст + ",
		|ПРЕДСТАВЛЕНИЕ(_Таблица." + Реквизит.Значение + ") КАК " + мПрефиксКолонокРеквизитов + Реквизит.Значение;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	" + ПолноеИмяОбъекта + " КАК _Таблица
	|ГДЕ
	|	_Таблица.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТаблицаРезультата.Индексы.Добавить("Ссылка");
	ЗаполнитьЗначенияСвойств(ТаблицаРезультата.Добавить(), ирОбщий.ПолучитьМенеджерЛкс(мМетаданныеОбъекта).ПустаяСсылка());
	Возврат ТаблицаРезультата;
	
КонецФункции // ()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>;
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>.
//
// Возвращаемое значение:
//               – <Тип.Вид> – <описание значения>
//                 <продолжение описания значения>;
//  <Значение2>  – <Тип.Вид> – <описание значения>
//                 <продолжение описания значения>.
//
Функция ЗагрузитьРеквизитыЭлементовТекущейГруппы(ВыборочныйМассив = Неопределено)

	Если ВыборочныйМассив = Неопределено Тогда
		ВыборочныйМассив = ЭлементыТекущейГруппы.ВыгрузитьКолонку("Ссылка");
	КонецЕсли; 
	МаксимальныйРазмерГруппы = 1000;
	Если ВыборочныйМассив.Количество() > МаксимальныйРазмерГруппы Тогда
		Сообщить("Реквизиты элементов группы не были загружены, т.к. ее размер превышает " + МаксимальныйРазмерГруппы);
		Результат = Ложь;
	Иначе
		РезультатПоиска = ПолучитьТаблицуРеквизитовПоМассивуСсылок(ВыборочныйМассив);
		Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ЭлементыТекущейГруппы.Количество(), "Загрузка реквизитов");
		Для Каждого СтрокаСоставаГруппы Из ЭлементыТекущейГруппы Цикл
			ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
			СтрокаРезультатовПоиска = РезультатПоиска.Найти(СтрокаСоставаГруппы.Ссылка, "Ссылка");
			Если СтрокаРезультатовПоиска <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаСоставаГруппы, СтрокаРезультатовПоиска, , "Ссылка");
			КонецЕсли; 
			СтрокаСоставаГруппы[мИмяПоляИдентификатор] = СтрокаСоставаГруппы.Ссылка.УникальныйИдентификатор();
		КонецЦикла;
		ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
		ПриИзмененииАвтовидимостьКолонокСоставаГруппы();
		Результат = Истина;
	КонецЕсли; 
	Возврат Результат;

КонецФункции // ЗагрузитьРеквизитыЭлементовТекущейГруппы()

Процедура ВывестиГруппу(НоваяТекущаяГруппа = Неопределено)
	
	Если НоваяТекущаяГруппа <> Неопределено Тогда
		мТекущаяГруппа = НоваяТекущаяГруппа;
	КонецЕсли;
	ЭлементыТекущейГруппы.Очистить();
	ЭлементыФормы.ЭлементыТекущейГруппы.ТолькоПросмотр = (мТекущаяГруппа = Неопределено);
	Если мТекущаяГруппа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СоставТекущейГруппы = мРезультатыПоиска.Скопировать(Новый Структура(мИмяПоляНомерГруппы, мТекущаяГруппа[мИмяПоляНомерГруппы]));
	ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СоставТекущейГруппы, ЭлементыТекущейГруппы);
	ЗагрузитьРеквизитыЭлементовТекущейГруппы();
	СброситьДоступность();
	//ЭлементыФормы.НайденныеГруппы.ТекущаяСтрока = мТекущаяГруппа;
	
КонецПроцедуры

Функция ПолучитьЗначениеНастройки(ИмяНастройки) 
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСтрокуУпорядочиванияГруппДублей(БезПоляКоличестваЭлементов = Истина)
	
	Если БезПоляКоличестваЭлементов Тогда
		ИсключаемоеПоле = мИмяПоляКоличествоЭлементов;
	Иначе
		ИсключаемоеПоле = "";
	КонецЕсли; 
	СтрокаПорядка = ирОбщий.ПолучитьСтрокуПорядкаКомпоновкиЛкс(КомпоновщикДублей.Настройки.Порядок, ИсключаемоеПоле);
	Если ЗначениеЗаполнено(СтрокаПорядка) Тогда
		СтрокаПорядка = " УПОРЯДОЧИТЬ ПО " + СтрокаПорядка;
	КонецЕсли; 
	Возврат СтрокаПорядка;
	
КонецФункции

Процедура НайтиПоРавенствуРеквизитов(ЗапросСОтбором)
	
	ПостроительОтчетаПоиска = Новый ПостроительОтчета;
	
	//ИмяТаблицы = мПлатформа.ПолучитьНовоеУникальноеИмя();
	ИмяТаблицы = "Т";
	ТекстГДЕ = "";
	ТекстВЫБРАТЬ = "";
	ТекстКлюча = "";
	// Нужен для обхода проблемы с отсечением правых пробелов строк при группировке (сравнении)
	ТекстИдексов = "";
	ТекстУсловия = "";
	ТекстСоединения = "ИСТИНА";
	Для Каждого ПолеСравнения Из мПоляСравнения Цикл
		ПолноеИмяПоля = "" + ПолеСравнения.Поле;
		Если ПолноеИмяПоля = мИмяПоляКоличествоЭлементов Тогда
			Продолжить;
		КонецЕсли;
		ИмяПоля = мПлатформа.ПолучитьИдентификаторИзПредставления(ПолноеИмяПоля);
		ДоступноеПоле = КомпоновщикДублей.Настройки.ДоступныеПоляПорядка.НайтиПоле(ПолеСравнения.Поле);
		мПредставления.Вставить(ИмяПоля, ДоступноеПоле.Заголовок);
		Если ДоступноеПоле.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
			ВыражениеПоля = "ПОДСТРОКА(ВЫРАЗИТЬ(" + мПсевдонимТаблицы + "." + ПолеСравнения.Поле + " КАК СТРОКА(300)), 1, 300) + ""_""";
		Иначе
			ВыражениеПоля = мПсевдонимТаблицы + "." + ПолеСравнения.Поле;
		КонецЕсли;
		//ТекстСоединения    = ТекстСоединения    + Символы.ПС + "И " + мПсевдонимТаблицы + "." + ИмяПоля + " = НайденныеГруппы." + ИмяПоля;
		ТекстСоединения    = ТекстСоединения    + Символы.ПС + "И " + ВыражениеПоля + " = НайденныеГруппы." + ИмяПоля;
		ТекстИдексов       = ТекстИдексов       + ", " + ИмяПоля;
		ТекстВЫБРАТЬ       = ТекстВЫБРАТЬ       + ", " + ВыражениеПоля + " КАК " + ИмяПоля; // запрещенные имена например "Соединение" так вызывают ошибку?
		ТекстКлюча         = ТекстКлюча         + ", " + ВыражениеПоля;
		ТекстУсловия       = ТекстУсловия       + "И " + ВыражениеПоля + " ЕСТЬ НЕ NULL ";
	КонецЦикла;
	мСтруктураКлючаПоиска = Новый Структура(Сред(ТекстИдексов, 2));
	ТекстОтбораДублей = ирОбщий.ПолучитьТекстОтбораЗапросаКомпоновкиЛкс(ЗапросСОтбором, мПсевдонимТаблицы);
	
	ТекстЗапросаПоиска = "
	|ВЫБРАТЬ 0 КАК Пустышка,
	|	КОЛИЧЕСТВО(Ссылка) КАК " + мИмяПоляКоличествоЭлементов + ТекстВЫБРАТЬ + "
	|ПОМЕСТИТЬ НайденныеГруппы
	|ИЗ " + ПолноеИмяОбъекта + " КАК " + мПсевдонимТаблицы + "
	|ГДЕ ИСТИНА " + ТекстУсловия + " И (" + ТекстОтбораДублей + ")
	|СГРУППИРОВАТЬ ПО 0" + ТекстКлюча + "
	|ИМЕЮЩИЕ КОЛИЧЕСТВО(Ссылка) > 1
	|;
	|ВЫБРАТЬ * ИЗ НайденныеГруппы
	|";
	ТекстУпорядочить = ирОбщий.ПолучитьСтрокуПорядкаКомпоновкиЛкс(КомпоновщикДублей.Настройки.Порядок, , "_");
	Если ЗначениеЗаполнено(ТекстУпорядочить) Тогда
		ТекстЗапросаПоиска = ТекстЗапросаПоиска + " УПОРЯДОЧИТЬ ПО " + ТекстУпорядочить;
	КонецЕсли; 
	ЗапросПоиска = Новый Запрос;
	ЗапросПоиска.Текст = ТекстЗапросаПоиска;
	ЗапросПоиска.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ирОбщий.СкопироватьУниверсальнуюКоллекциюЛкс(ЗапросСОтбором.Параметры, ЗапросПоиска.Параметры);
	НайденныеГруппы = ЗапросПоиска.Выполнить().Выгрузить();
	НайденныеГруппы.Колонки.Вставить(0, мИмяПоляНомерГруппы);
	НайденныеГруппы.Индексы.Добавить(Сред(ТекстИдексов, 2));
	НайденныеГруппы.Индексы.Добавить(мИмяПоляНомерГруппы);
	МассивСтроковыхПолейСравнения = Новый Массив;
	Для Каждого ЭлементСравнения Из мСтруктураКлючаПоиска Цикл
		Если НайденныеГруппы.Колонки[ЭлементСравнения.Ключ].ТипЗначения.СодержитТип(Тип("Строка")) Тогда
			МассивСтроковыхПолейСравнения.Добавить(ЭлементСравнения.Ключ);
		КонецЕсли;
	КонецЦикла;
	НомерГруппы = 1;
	
	Для Каждого СтрокаГруппы Из НайденныеГруппы Цикл
		Для Каждого СтроковоеПоле Из МассивСтроковыхПолейСравнения Цикл
			ЗначениеПоля = СтрокаГруппы[СтроковоеПоле];
			// Заменим неразрывный пробел на нормальный
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, Символ(10 * 16), " ");
			// Удалим служебный символ "_" в конце строки
			СтрокаГруппы[СтроковоеПоле] = Сред(Нрег(ЗначениеПоля), 1, СтрДлина(ЗначениеПоля) - 1);
		КонецЦикла;
		СтрокаГруппы[мИмяПоляНомерГруппы] = НомерГруппы;
		НомерГруппы = НомерГруппы + 1;
	КонецЦикла;
	
	ВыражениеПоляЦенность = ДобавитьВыражениеЦенности(ЗапросПоиска);
	ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + ", " + ВыражениеПоляЦенность + " КАК " + мИмяПоляЦенность;
	ТекстУпорядочить = ПолучитьСтрокуПорядкаЦенности();
	ТекстЗапросаЭлементы = "
	|ВЫБРАТЬ " + мПсевдонимТаблицы + ".Ссылка КАК Ссылка" + ТекстВЫБРАТЬ + "
	|ИЗ " + ПолноеИмяОбъекта  + " КАК " + мПсевдонимТаблицы + " ВНУТРЕННЕЕ СОЕДИНЕНИЕ НайденныеГруппы КАК НайденныеГруппы
	|ПО " + ТекстСоединения + "
	|ГДЕ" + ТекстОтбораДублей + " 
	|УПОРЯДОЧИТЬ ПО " + ТекстУпорядочить + "
	|";
	ирОбщий.СкопироватьУниверсальнуюКоллекциюЛкс(ЗапросСОтбором.Параметры, ЗапросПоиска.Параметры);
	ЗапросПоиска.Текст = ТекстЗапросаЭлементы;
	мРезультатыПоиска = ЗапросПоиска.Выполнить().Выгрузить();
	ДобавитьОбщиеКолонкиВРезультатыПоиска();
	
	Счетчик = 1;
	СтрокаПорядкаЦенности = ирОбщий.ПолучитьСтрокуПорядкаКомпоновкиЛкс(КомпоновщикЦенности.Настройки.Порядок);
	Для Каждого СтрокаПоиска ИЗ мРезультатыПоиска Цикл
		ЗаполнитьЗначенияСвойств(мСтруктураКлючаПоиска, СтрокаПоиска);
		Если СтрокаПорядкаЦенности <> "" Тогда
			СтрокаПоиска[мИмяПоляЦенность] = Счетчик;
		КонецЕсли; 
		Для Каждого СтроковоеПоле Из МассивСтроковыхПолейСравнения Цикл
			ЗначениеПоля = мСтруктураКлючаПоиска[СтроковоеПоле];
			// Заменим неразрывный пробел на нормальный
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, Символ(10 * 16), " ");
			// Удалим служебный символ "_" в конце строки
			мСтруктураКлючаПоиска[СтроковоеПоле] = Сред(Нрег(ЗначениеПоля), 1, СтрДлина(ЗначениеПоля) - 1);
		КонецЦикла;
		СтрокаПоиска[мИмяПоляНомерГруппы] = НайденныеГруппы.НайтиСтроки(мСтруктураКлючаПоиска)[0][мИмяПоляНомерГруппы];
		ЗаполнитьЗначенияСвойств(СтрокаПоиска, мСтруктураКлючаПоиска);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	НайденныеГруппы.Колонки.Удалить("Пустышка");
	//Если мРезультатыПоиска.Количество() > 0 Тогда
	//	ВывестиГруппу(НайденныеГруппы[0]);
	//КонецЕсли;
	НастроитьСлужубныеКолонкиРезультатовПоиска();
		
КонецПроцедуры

Функция ДобавитьВыражениеЦенности(ЗапросПоиска)

	Если ШкалаЦенности.Количество() > 0 Тогда
		ВыражениеПоляЦенность = "ВЫБОР" + Символы.ПС;
		Уровень = 1;
		Для Каждого УровеньЦенности Из ШкалаЦенности Цикл
			НастройкаКомпоновкиВарианта = ирОбщий.ВосстановитьНастройкуКомпоновкиИзСтрокиXMLЛкс(УровеньЦенности.НастройкаКомпоновкиXML);
			ЗапросВарианта = ирОбщий.ПолучитьЗапросИзКомпоновкиЛкс(мСхемаКомпоновки, НастройкаКомпоновкиВарианта, , "В" + Уровень, "Ссылка");
			ТекстОтбораВарианта = ирОбщий.ПолучитьТекстОтбораЗапросаКомпоновкиЛкс(ЗапросВарианта, мПсевдонимТаблицы);
			ВыражениеПоляЦенность = ВыражениеПоляЦенность + "
			|	КОГДА " + ТекстОтбораВарианта + "
			|		ТОГДА " + XMLСтрока(Уровень);
			ирОбщий.СкопироватьУниверсальнуюКоллекциюЛкс(ЗапросВарианта.Параметры, ЗапросПоиска.Параметры);
			Уровень = Уровень + 1;
		КонецЦикла;
		ВыражениеПоляЦенность = ВыражениеПоляЦенность + "
		|		ИНАЧЕ " + XMLСтрока(Уровень);
		ВыражениеПоляЦенность = ВыражениеПоляЦенность + Символы.ПС + "КОНЕЦ";
	Иначе
		ВыражениеПоляЦенность = "0";
	КонецЕсли; 
	Возврат ВыражениеПоляЦенность;

КонецФункции

Функция ПолучитьСтрокуПорядкаЦенности()

	ТекстУпорядочить = мИмяПоляЦенность;
	ТекстПорядкаЦенности = ирОбщий.ПолучитьСтрокуПорядкаКомпоновкиЛкс(КомпоновщикЦенности.Настройки.Порядок);
	Если ТекстПорядкаЦенности <> "" Тогда
		ТекстУпорядочить = ТекстУпорядочить + ", " + ТекстПорядкаЦенности;
	КонецЕсли; 

	Возврат ТекстУпорядочить;

КонецФункции

Функция ДобавитьОбщиеКолонкиВРезультатыПоиска()

	мРезультатыПоиска.Колонки.Добавить(мИмяПоляНомерГруппы, , мПредставления[мИмяПоляНомерГруппы]);
	мРезультатыПоиска.Колонки.Добавить(мИмяФлагаПравильныйЭлемент, Новый ОписаниеТипов("Булево"), мПредставления[мИмяФлагаПравильныйЭлемент]);
	мРезультатыПоиска.Колонки.Добавить(мИмяФлагаПравильныеДанные, Новый ОписаниеТипов("Булево"), мПредставления[мИмяФлагаПравильныеДанные]);
	мРезультатыПоиска.Колонки.Добавить(мИмяПоляКоличествоСсылок, , мПредставления[мИмяПоляКоличествоСсылок]);
	мРезультатыПоиска.Колонки.Добавить(мИмяПоляИдентификатор, , мПредставления[мИмяПоляИдентификатор]);
	Возврат Неопределено;

КонецФункции

Процедура НайтиПоПохожимСловам(ЗапросСОтбором)
	
	ТекстВЫБРАТЬ = "";
	ТекстИдексов = "";
	ТаблицаСлов = Новый ТаблицаЗначений;
	мРезультатыПоиска = Новый ТаблицаЗначений;
	мСтруктураКлючаПоиска = Новый Структура;
	мРезультатыПоиска.Колонки.Добавить(мИмяПоляЦенность);
	//НайденныеГруппы.Колонки.Добавить(мИмяПоляНомерГруппы);
	//НайденныеГруппы.Колонки.Добавить(мИмяПоляКоличествоЭлементов);
	Для Каждого ПолеСравнения Из мПоляСравнения Цикл
		ПолноеИмяПоля = "" + ПолеСравнения.Поле;
		Если ПолноеИмяПоля = мИмяПоляКоличествоЭлементов Тогда
			Продолжить;
		КонецЕсли;
		ИмяПоля = мПлатформа.ПолучитьИдентификаторИзПредставления(ПолноеИмяПоля);
		Если "" + ПолеСравнения.Поле = мПутьКДаннымПоляНечеткогоСравнения Тогда
			ИмяПоляНечеткогоСравнения = ИмяПоля;
		Иначе
			мСтруктураКлючаПоиска.Вставить(ИмяПоля);
			ТекстИдексов = ТекстИдексов + ", " + ИмяПоля;
		КонецЕсли;
		ДоступноеПоле = КомпоновщикДублей.Настройки.ДоступныеПоляПорядка.НайтиПоле(ПолеСравнения.Поле);
		мПредставления.Вставить(ИмяПоля, ДоступноеПоле.Заголовок);
		ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + ", " + мПсевдонимТаблицы + "." + ПолеСравнения.Поле + " КАК " + ИмяПоля; // запрещенные имена например "Соединение" так вызывают ошибку?
		ТаблицаСлов.Колонки.Добавить(ИмяПоля);
		мРезультатыПоиска.Колонки.Добавить(ИмяПоля);
		НайденныеГруппы.Колонки.Добавить(ИмяПоля);
	КонецЦикла;
	ТекстИдексов = Сред(ТекстИдексов, 2);
	
	ТекстОтбораДублей = ирОбщий.ПолучитьТекстОтбораЗапросаКомпоновкиЛкс(ЗапросСОтбором, мПсевдонимТаблицы);
	ЗапросПоиска = Новый Запрос;
	ВыражениеПоляЦенность = ДобавитьВыражениеЦенности(ЗапросПоиска);
	ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + ", " + ВыражениеПоляЦенность + " КАК " + мИмяПоляЦенность;
	ТекстУпорядочить = ПолучитьСтрокуПорядкаЦенности();
	ТекстЗапроса = "
	|ВЫБРАТЬ " + мПсевдонимТаблицы + ".Ссылка" + ТекстВЫБРАТЬ + ", NULL КАК " + мИмяПоляКоличествоЭлементов + "
	|ИЗ " + ПолноеИмяОбъекта + " КАК " + мПсевдонимТаблицы + "
	|ГДЕ" + ТекстОтбораДублей + " 
	//|" + ПолучитьСтрокуУпорядочиванияГруппДублей() + "
	|УПОРЯДОЧИТЬ ПО " + ТекстУпорядочить + " // Может быть здесь сортировка не имеет смысла 
	|";
		
	ЗапросПоиска.Текст = ТекстЗапроса;
	ирОбщий.СкопироватьУниверсальнуюКоллекциюЛкс(ЗапросСОтбором.Параметры, ЗапросПоиска.Параметры);
	РезультатЗапроса = ЗапросПоиска.Выполнить();
	ТаблицаОбъекта = РезультатЗапроса.Выгрузить();
	ТаблицаОбъекта.Индексы.Добавить(ТекстИдексов);
	
	ТаблицаСлов.Колонки.Добавить("Ссылка");
	ТаблицаСлов.Колонки.Добавить("СписокСлов");
	
	СписокСлов = Новый СписокЗначений;
	СтрокаПорядкаЦенности = ирОбщий.ПолучитьСтрокуПорядкаКомпоновкиЛкс(КомпоновщикЦенности.Настройки.Порядок);
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ТаблицаОбъекта.Количество(), "Разбивка строк на слова");
	Счетчик = 1;
	Для Каждого СтрокаСсылки ИЗ ТаблицаОбъекта Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		Если СтрокаПорядкаЦенности <> "" Тогда
			СтрокаСсылки[мИмяПоляЦенность] = Счетчик;
		КонецЕсли; 
		ЗначениеРеквизита = СтрокаСсылки[ИмяПоляНечеткогоСравнения];
		СписокСлов = ПолучитьСписокСлов(ЗначениеРеквизита);
		НовСтр = ТаблицаСлов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрокаСсылки);
		НовСтр.СписокСлов = СписокСлов.Скопировать();
		Счетчик = Счетчик + 1;
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	
	ТаблицаОбъекта = 0;
	мРезультатыПоиска.Колонки.Добавить("Ссылка");
	ДобавитьОбщиеКолонкиВРезультатыПоиска();
	НомерГруппы = 1;
		
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ТаблицаСлов.Количество(), "Анализ значений реквизита");
	Пока ТаблицаСлов.Количество() > 0 Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		ОбрабатываемаяСтрока = ТаблицаСлов[0];
		ФильтрГруппыРавенства = Новый Структура(ТекстИдексов);
		ЗаполнитьЗначенияСвойств(ФильтрГруппыРавенства, ОбрабатываемаяСтрока); 
		Если ФильтрГруппыРавенства.Количество() > 0 Тогда
			СтрокиГруппыРавенства = ТаблицаСлов.НайтиСтроки(ФильтрГруппыРавенства);
		Иначе
			СтрокиГруппыРавенства = ТаблицаСлов;
		КонецЕсли; 
		КоличествоСтрок = СтрокиГруппыРавенства.Количество();
		СписокСтрок = Новый СписокЗначений;
		СписокСтрок.Добавить(ОбрабатываемаяСтрока);
		ТекущийСписокСлов = ОбрабатываемаяСтрока.СписокСлов.Скопировать();
		
		Для индекс = 1 по КоличествоСтрок - 1 Цикл
			СтрокаСравнения = СтрокиГруппыРавенства[индекс];
			Если СтрокаСравнения = ОбрабатываемаяСтрока Тогда
				Продолжить;
			КонецЕсли; 
			//ЭтоНоваяГруппа = Ложь;
			//Для Каждого ПолеСравнения Из мСтруктураКлючаПоиска Цикл
			//	ИмяПоляСравнения = ПолеСравнения.Ключ;
			//	Если СтрокаСравнения[ИмяПоляСравнения] = ОбрабатываемаяСтрока[ИмяПоляСравнения] Тогда 
			//		ЭтоНоваяГруппа = Истина;
			//		Прервать;
			//	КонецЕсли;
			//КонецЦикла;
			//Если Не ЭтоНоваяГруппа Тогда 
			//	Продолжить;
			//КонецЕсли;
			СписокСловСравнения = СтрокаСравнения.СписокСлов.Скопировать();
			СписокНеНайденных = Новый СписокЗначений;
			
			ОдинаковыхСлов = 0;
			Для Каждого Слово Из ТекущийСписокСлов Цикл
				ЭлементСпискаСравнения = СписокСловСравнения.НайтиПоЗначению(Слово.Значение);
				Если ЭлементСпискаСравнения = Неопределено Тогда
					СписокНеНайденных.Добавить(Слово.Значение);
				Иначе
					СписокСловСравнения.Удалить(ЭлементСпискаСравнения);
					ОдинаковыхСлов = ОдинаковыхСлов + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если СписокНеНайденных.Количество()=0 И СписокСловСравнения.Количество()=0 Тогда
				ЕстьОтличия = Ложь;
			Иначе
				ЕСли ОдинаковыхСлов > 0 Тогда
					ЕстьОтличия = АнализРазличийВСловах(СписокНеНайденных, СписокСловСравнения, ТекущийСписокСлов, ОдинаковыхСлов, ДопустимоеРазличиеСлов);
				Иначе
					ЕстьОтличия = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЕстьОтличия Тогда
				СписокСтрок.Добавить(СтрокаСравнения);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаИзСписка ИЗ СписокСтрок Цикл
			Если СписокСтрок.Количество() > 1 Тогда
				СтрокаРезультата = мРезультатыПоиска.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаИзСписка.Значение);
				СтрокаРезультата[мИмяПоляНомерГруппы] = НомерГруппы;
			Иначе
				НомерГруппы = НомерГруппы - 1;
			КонецЕсли;
			ТаблицаСлов.Удалить(СтрокаИзСписка.Значение);
		КонецЦикла;
		НомерГруппы = НомерГруппы + 1;
		
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	
	Если мРезультатыПоиска.Количество() > 0 Тогда
		мРезультатыПоиска.Сортировать(мИмяПоляНомерГруппы + " УБЫВ");
		СтруктураПоиска = Новый Структура;
		ВсегоГрупп = мРезультатыПоиска[0][мИмяПоляНомерГруппы];
		Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ВсегоГрупп, "Обработка результатов");
		Для Индекс = 1 по ВсегоГрупп Цикл
			ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
			СтруктураПоиска.Вставить(мИмяПоляНомерГруппы,  ВсегоГрупп - Индекс + 1);
			МассивСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
			СтрокаГруппы = НайденныеГруппы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаГруппы, МассивСтрок[0],, мИмяПоляПравильныеДанные + "," + мИмяПоляПравильныйЭлемент);
			СтрокаГруппы[мИмяПоляКоличествоЭлементов] = МассивСтрок.Количество();
		КонецЦикла;
		ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
		ТекстУпорядочить = ирОбщий.ПолучитьСтрокуПорядкаКомпоновкиЛкс(КомпоновщикДублей.Настройки.Порядок, , "_");
		НайденныеГруппы.Сортировать(ТекстУпорядочить);
	КонецЕсли;
			
КонецПроцедуры

Функция ЗаполнитьПравилаЗаменыСсылокПоТекущейГруппе()
	
	ВремТаблица = ЭлементыТекущейГруппы.Скопировать();
	СтрокаПравильного = ВремТаблица.Найти(Истина, мИмяФлагаПравильныйЭлемент);
	Если СтрокаПравильного = Неопределено Тогда
		Предупреждение("Не определен правильный элемент");
		Возврат ложь;
	КонецЕсли;
	ПравилаЗаменыСсылок.Очистить();
	СтрокаПравильныхДанных = ВремТаблица.Найти(Истина, мИмяФлагаПравильныеДанные);
	Для Каждого СтрокаНеправильного Из ВремТаблица Цикл
		Если СтрокаНеправильного[мИмяФлагаПравильныйЭлемент] Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаЗамены = ПравилаЗаменыСсылок.Добавить();
		СтрокаЗамены.ЧтоЗаменять = СтрокаНеправильного.Ссылка;
		СтрокаЗамены.НаЧтоЗаменять = СтрокаПравильного.Ссылка;
		СтрокаЗамены.Пометка = Истина;
		СтрокаЗамены.ЗаменитьДанныеОбъекта = СтрокаПравильныхДанных = СтрокаНеправильного;
	КонецЦикла;
	ВыполнитьПоискЗаменяемыхСсылок();
	Возврат Истина;
	
КонецФункции

Функция ОбработатьЗаписьРегистра(НаборЗаписейИлиМенеджерЗаписи, Заменяемые)
	
	ОбъектМД = ирОбщий.ПолучитьМетаданныеЛкс(НаборЗаписейИлиМенеджерЗаписи);
	НаборЗаписейИлиМенеджерЗаписи.Прочитать();
	Если Не НаборЗаписейИлиМенеджерЗаписи.Выбран() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ирОбщий.ЛиМенеджерЗаписиРегистраЛкс(НаборЗаписейИлиМенеджерЗаписи) Тогда
		НаборЗаписей = ирОбщий.ПолучитьНаборЗаписейПоКлючуЛкс(ОбъектМД.ПолноеИмя(), НаборЗаписейИлиМенеджерЗаписи, Истина);
	Иначе
		НаборЗаписей = НаборЗаписейИлиМенеджерЗаписи;
	КонецЕсли;
	
	// Старый пустой набор нужен для очистки строк по старому отбору в случае изменения отбора набора
	ПолноеИмяРегистра = ОбъектМД.ПолноеИмя();
	СтарыйНабор = Новый (СтрЗаменить(ПолноеИмяРегистра, ".", "НаборЗаписей."));
	ирОбщий.СкопироватьОтборЛкс(СтарыйНабор.Отбор, НаборЗаписей.Отбор);
	ОтборИзменен = Ложь;
	Для Каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
		ЗначениеПоля = ЭлементОтбора.Значение;
		НаЧтоЗаменять = Заменяемые[ЗначениеПоля];
		Если НаЧтоЗаменять = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОтборИзменен = ирОбщий.БезопасноПрисвоитьПроизвольнуюСсылкуЛкс(ЭлементОтбора.Значение, НаЧтоЗаменять) Или ОтборИзменен;
	КонецЦикла;
	
	КомпоновщикТаблицы = ирКэш.ПолучитьКомпоновщикТаблицыМетаданныхЛкс(ОбъектМД.ПолноеИмя());
	#Если _ Тогда
	    КомпоновщикТаблицы = Новый КомпоновщикНастроекКомпоновкиДанных
	#КонецЕсли
	ДоступныеПоляВыбора = КомпоновщикТаблицы.Настройки.ДоступныеПоляВыбора.Элементы;
	ОбъектИзменен = ОтборИзменен; // Антибаг платформы 8.2. При изменении реквизитов строк набора записей для регистра бухгалтерии не взводится модифицированность
	ЭтоРегистрБухгалтерии = ирОбщий.ПолучитьПервыйФрагментЛкс(ПолноеИмяРегистра) = "РегистрБухгалтерии";
	Если ЭтоРегистрБухгалтерии Тогда
		ТаблицаНабора = НаборЗаписей.Выгрузить();
	Иначе
		ТаблицаНабора = НаборЗаписей;
	КонецЕсли; 
	Для Каждого Запись Из ТаблицаНабора Цикл
		Для каждого Поле Из ДоступныеПоляВыбора Цикл
			//Если Не Поле.Поле Тогда // было для полей построителя запроса
			//	// Антибаг платформы. Зачем то добавляются лишние поля в доступные поля, не свойственные по признаку наличия корресподнеции
			//	// у бухгалтерских таблиц.
			//	Продолжить;
			//КонецЕсли;
			//ИмяПоля = Поле.Имя;
			Если Поле.Папка Тогда
				Продолжить;
			КонецЕсли; 
			ИмяПоля = "" + Поле.Поле;
			ЗначениеПоля = Запись[ИмяПоля];
			НаЧтоЗаменять = Заменяемые[ЗначениеПоля];
			Если НаЧтоЗаменять = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОбъектИзменен = ирОбщий.БезопасноПрисвоитьПроизвольнуюСсылкуЛкс(Запись[ИмяПоля], НаЧтоЗаменять) Или ОбъектИзменен;
		КонецЦикла; 
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	Если ЭтоРегистрБухгалтерии Тогда
		НаборЗаписей.Загрузить(ТаблицаНабора);
	КонецЕсли; 
	Если ОбъектИзменен Тогда
		Если ОтключатьКонтрольЗаписи Тогда
			СтарыйНабор.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		НачатьТранзакцию();
		Попытка
			Если ОтборИзменен Тогда
				ирОбщий.ЗаписатьОбъектЛкс(СтарыйНабор, ЗаписьНаСервере);
			КонецЕсли; 
			ирОбщий.ЗаписатьОбъектЛкс(НаборЗаписей, ЗаписьНаСервере);
		Исключение
			ОтменитьТранзакцию();
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
			Возврат Ложь;
		КонецПопытки;
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	Возврат Истина;

КонецФункции // ОбработатьЗаписьРегистра()

// ВыбранныеОбъектыДляЗамены - ТаблицаЗначений, Массив строк таблицы
Функция ВыполнитьЗаменуЭлементов(Заменяемые, ТаблицаСсылающихсяОбъектов, Знач ЗаголовокИндикации = "", ЗамещениеВсегда = 0)
	
	БылиИсключения = Ложь;
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	//ОбрабатываемаяСсылка = Неопределено;
		
	Параметры = Новый Структура;
		
	Параметры.Вставить("Объект", Неопределено);
	СтруктураКоллизий = Новый Структура;
	ИзмененныеПроведенныеДокументы.Очистить();
	
	Если Не ЗначениеЗаполнено(ЗаголовокИндикации) Тогда
		ЗаголовокИндикации = "Замена ссылок";
	КонецЕсли; 
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ТаблицаСсылающихсяОбъектов.Количество(), ЗаголовокИндикации);
	Для Каждого СтрокаТаблицы Из ТаблицаСсылающихсяОбъектов Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		Ссылка = СтрокаТаблицы.Ссылка;
		ПравильныйЭлемент = Заменяемые[Ссылка];
		Если ПравильныйЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ОбъектИзменен = Ложь;
		
		Если ТипЗнч(СтрокаТаблицы.Данные) = Тип("Строка") Тогда
			ОбъектСодержащийСсылку = ЗначениеИзСтрокиВнутр(СтрокаТаблицы.Данные);
		Иначе
			ОбъектСодержащийСсылку = СтрокаТаблицы.Данные;
		КонецЕсли; 
		Параметры.Объект = Неопределено;
		Если ТипЗнч(СтрокаТаблицы.Метаданные) = Тип("Строка") Тогда
			//ОбъектМД = Метаданные.НайтиПоПолномуИмени(СтрокаТаблицы.Метаданные);
			ОбъектМД = мПлатформа.ПолучитьОбъектМДПоПолномуИмени(СтрокаТаблицы.Метаданные);
		Иначе
			ОбъектМД = СтрокаТаблицы.Метаданные;
		КонецЕсли; 
		ТипТаблицы = ирОбщий.ПолучитьТипТаблицыБДЛкс(ОбъектМД.ПолноеИмя());
		Если ирОбщий.ЛиКорневойТипОбъектаБДЛкс(ТипТаблицы) Тогда
			Параметры.Объект = ОбъектСодержащийСсылку.ПолучитьОбъект();
			Если Параметры.Объект <> Неопределено Тогда
				ПредставлениеОбъекта = "" + Параметры.Объект;
				ОбъектИзменен = ирОбщий.ЗаменитьЗначениеВОбъектеБДЛкс(Параметры.Объект, Ссылка, ПравильныйЭлемент) Или ОбъектИзменен;
			Иначе
				ПредставлениеОбъекта = "" + ОбъектСодержащийСсылку;
			КонецЕсли;
		Иначе
			ПредставлениеОбъекта = "" + ОбъектСодержащийСсылку;
		КонецЕсли;
		Сообщить("Обрабатывается " + ПредставлениеОбъекта);
		Если Метаданные.Документы.Содержит(ОбъектМД) Тогда
			
			Для Каждого Движение ИЗ ОбъектМД.Движения Цикл
				//НаборЗаписей = Параметры.Объект.Движения[Движение.Имя];
				НаборЗаписей = Новый (СтрЗаменить(Движение.ПолноеИмя(), ".", "НаборЗаписей."));
				НаборЗаписей.Отбор.Регистратор.Установить(ОбъектСодержащийСсылку);
				БылиИсключения = Не ОбработатьЗаписьРегистра(НаборЗаписей, Заменяемые);
				Если Истина
					И БылиИсключения 
					И ВыполнятьВТранзакции
				Тогда
					Перейти ~ОТКАТ;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
				Если Последовательность.Документы.Содержит(ОбъектМД) Тогда
					НадоЗаписывать = Ложь;
					НаборЗаписей = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(ОбъектСодержащийСсылку);
					НаборЗаписей.Прочитать();
					Если НаборЗаписей.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
						Если Истина
							И Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) 
							И НаборЗаписей[0][Измерение.Имя] = Ссылка
						Тогда
							НадоЗаписывать = ирОбщий.БезопасноПрисвоитьПроизвольнуюСсылкуЛкс(НаборЗаписей[0][Измерение.Имя], ПравильныйЭлемент) Или НадоЗаписывать;
						КонецЕсли;
					КонецЦикла;
					Если НадоЗаписывать Тогда
						Если ОтключатьКонтрольЗаписи Тогда
							НаборЗаписей.ОбменДанными.Загрузка = Истина;
						КонецЕсли;
						Попытка
							ирОбщий.ЗаписатьОбъектЛкс(НаборЗаписей, ЗаписьНаСервере);
						Исключение
							Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
							БылиИсключения = Истина;
							Если ВыполнятьВТранзакции Тогда
								Перейти ~ОТКАТ;
							КонецЕсли;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
						
		ИначеЕсли Метаданные.Константы.Содержит(ОбъектМД) Тогда
			
			Если ОбъектМД.Тип.СодержитТип(ТипЗнч(ПравильныйЭлемент)) Тогда
				Константы[ОбъектМД.Имя].Установить(ПравильныйЭлемент);
				ОбъектИзменен = Истина;
			КонецЕсли; 
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМД) Тогда
			
			МенеджерЗаписи            = РегистрыСведений[ОбъектМД.Имя].СоздатьМенеджерЗаписи();
			КоллизийныйМенеджерЗаписи = РегистрыСведений[ОбъектМД.Имя].СоздатьМенеджерЗаписи();
			Периодический = (ОбъектМД.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
			МассивИзмененныхИзмерений = Новый Массив;
			Если Периодический Тогда
				МенеджерЗаписи.Период            = ОбъектСодержащийСсылку.Период;
				КоллизийныйМенеджерЗаписи.Период = ОбъектСодержащийСсылку.Период;
			КонецЕсли;
			Для каждого Рекв Из ОбъектМД.Измерения Цикл
				ЗначениеИзмерения = ОбъектСодержащийСсылку[Рекв.Имя];
				МенеджерЗаписи[Рекв.Имя] = ЗначениеИзмерения;
				Если ЗначениеИзмерения = Ссылка Тогда
					Если ирОбщий.БезопасноПрисвоитьПроизвольнуюСсылкуЛкс(КоллизийныйМенеджерЗаписи[Рекв.Имя], ПравильныйЭлемент) Тогда 
						МассивИзмененныхИзмерений.Добавить(Рекв.Имя);
						ОбъектИзменен = Истина;
					КонецЕсли; 
				Иначе
					КоллизийныйМенеджерЗаписи[Рекв.Имя] = ЗначениеИзмерения;
				КонецЕсли;
			КонецЦикла;
			
			БылаКоллизия = Ложь;
			Если МассивИзмененныхИзмерений.Количество() > 0 Тогда
				КоллизийныйМенеджерЗаписи.Прочитать();
				Если КоллизийныйМенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Прочитать();
					МассивКоллекцийРеквизитов = Новый Массив;
					МассивКоллекцийРеквизитов.Добавить(ОбъектМД.Ресурсы);
					МассивКоллекцийРеквизитов.Добавить(ОбъектМД.Реквизиты);
					Если Не СтруктураКоллизий.Свойство(ОбъектМД.Имя) Тогда 
						ТаблицаЗаписей = РегистрыСведений[ОбъектМД.Имя].СоздатьНаборЗаписей().Выгрузить();
						ТаблицаЗаписей.Колонки.Добавить("МенеджерЗамены");
						ТаблицаЗаписей.Колонки.Добавить("МенеджерОригинала");
						Для Каждого КоллекцияРеквизитов Из МассивКоллекцийРеквизитов Цикл
							Для Каждого МетаРеквизит Из КоллекцияРеквизитов Цикл
								ИмяКолонки = МетаРеквизит.Имя;
								ПредставлениеКолонки = МетаРеквизит.Представление();
								КолонкаОригинала = ТаблицаЗаписей.Колонки[ИмяКолонки];
								КолонкаОригинала.Имя       = "Оригинал"   + ИмяКолонки;
								КолонкаОригинала.Заголовок = "Оригинал: " + ПредставлениеКолонки;
								КолонкаЗамены = ТаблицаЗаписей.Колонки.Вставить(ТаблицаЗаписей.Колонки.Индекс(КолонкаОригинала),
									"Замена" + ИмяКолонки, , "Замена: " + ПредставлениеКолонки);
								ЗаполнитьЗначенияСвойств(КолонкаЗамены, КолонкаОригинала, , "Имя, Заголовок");
							КонецЦикла;
						КонецЦикла;
						ТаблицаЗаписей.Колонки.Вставить(0, "Заменить", Новый ОписаниеТипов("Булево"), "Заменить");
						СтруктураКоллизий.Вставить(ОбъектМД.Имя, ТаблицаЗаписей);
					КонецЕсли;
					НоваяКоллизийнаяЗапись = СтруктураКоллизий[ОбъектМД.Имя].Добавить();
					Для Каждого КоллекцияРеквизитов Из МассивКоллекцийРеквизитов Цикл
						Для Каждого МетаРеквизит Из КоллекцияРеквизитов Цикл
							ИмяКолонки = МетаРеквизит.Имя;
							ЗначениеРеквизита = МенеджерЗаписи[ИмяКолонки];
							НоваяКоллизийнаяЗапись["Оригинал" + ИмяКолонки] = КоллизийныйМенеджерЗаписи[ИмяКолонки];
							Если ЗначениеРеквизита = Ссылка Тогда
								НоваяКоллизийнаяЗапись["Замена" + ИмяКолонки] = ПравильныйЭлемент;
							Иначе
								НоваяКоллизийнаяЗапись["Замена" + ИмяКолонки] = ЗначениеРеквизита;
							КонецЕсли;
							КоллизийныйМенеджерЗаписи[ИмяКолонки] = НоваяКоллизийнаяЗапись["Замена" + ИмяКолонки];
							Если НоваяКоллизийнаяЗапись["Оригинал" + ИмяКолонки] <> НоваяКоллизийнаяЗапись["Замена" + ИмяКолонки] Тогда
								БылаКоллизия = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					Если БылаКоллизия Тогда
						ЗаполнитьЗначенияСвойств(НоваяКоллизийнаяЗапись, КоллизийныйМенеджерЗаписи);
						Для Каждого ИмяКолонки Из МассивИзмененныхИзмерений Цикл
							НоваяКоллизийнаяЗапись[ИмяКолонки] = МенеджерЗаписи[ИмяКолонки];
						КонецЦикла;
						НоваяКоллизийнаяЗапись.МенеджерЗамены    = КоллизийныйМенеджерЗаписи;
						НоваяКоллизийнаяЗапись.МенеджерОригинала = МенеджерЗаписи;
					Иначе
						СтруктураКоллизий[ОбъектМД.Имя].Удалить(НоваяКоллизийнаяЗапись);
						МенеджерЗаписи.Удалить();
						БылаКоллизия = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если БылаКоллизия Тогда
				БылиИсключения = Ложь;
			Иначе
				БылиИсключения = Не ОбработатьЗаписьРегистра(МенеджерЗаписи, Заменяемые);
			КонецЕсли;
			
			Если Истина
				И БылиИсключения 
				И ВыполнятьВТранзакции
			Тогда
				Перейти ~ОТКАТ;
			КонецЕсли;

		//Иначе
		//	Сообщить("Ссылки типа в объектах типа " + ОбъектМД.ПолноеИмя() + " не заменяются!!");
		КонецЕсли;
		Если Параметры.Объект <> Неопределено Тогда
			//Если Параметры.Объект.Модифицированность() Тогда
			Если ОбъектИзменен Тогда
				Если ОтключатьКонтрольЗаписи Тогда
					Попытка
						Параметры.Объект.ОбменДанными.Загрузка = Истина;
					Исключение
						// Для планов обмена такой прием не проходит
					КонецПопытки; 
				КонецЕсли;
				Попытка
					ирОбщий.ЗаписатьОбъектЛкс(Параметры.Объект, ЗаписьНаСервере);
					Если ОтключатьКонтрольЗаписи Тогда
						ЗаписьЖурналаРегистрации("Запись с флагом Загрузка", УровеньЖурналаРегистрации.Информация, ОбъектМД,
							ОбъектСодержащийСсылку, "");
					КонецЕсли;
				Исключение
					Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
					БылиИсключения = Истина;
					ОбъектИзменен = Ложь;
					Если ВыполнятьВТранзакции Тогда
						Перейти ~ОТКАТ;
					КонецЕсли;
				КонецПопытки;
				Если Истина
					И ОбъектИзменен
					И Метаданные.Документы.Содержит(ОбъектМД)
					И ОбъектМД.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить 
					И Параметры.Объект.Проведен
				Тогда
					СтрокаДляДокумента = ИзмененныеПроведенныеДокументы.Добавить();
					СтрокаДляДокумента.ДатаДокумента = Параметры.Объект.Дата;
					СтрокаДляДокумента.ТипДокумента = ОбъектМД.Имя;
					СтрокаДляДокумента.Документ = Параметры.Объект.Ссылка;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс(Индикатор, Истина);

	МассивЭлементовКУдалению = Новый Массив; 
	Для Каждого ЭлементТаблицыРегистра Из СтруктураКоллизий Цикл
		Если ЭлементТаблицыРегистра.Значение.Количество() = 0 Тогда
			МассивЭлементовКУдалению.Добавить(ЭлементТаблицыРегистра.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементКУдалению Из МассивЭлементовКУдалению Цикл
		СтруктураКоллизий.Удалить(ЭлементКУдалению);
	КонецЦикла;
	Если СтруктураКоллизий.Количество() > 0 Тогда
		ФормаЗамещенияВНезависимыхРегистрахСведений = ПолучитьФорму("ФормаЗамещенияВНезависимыхРегистрахСведений");
		ФормаЗамещенияВНезависимыхРегистрахСведений.КодВсегда = ЗамещениеВсегда;
		ФормаЗамещенияВНезависимыхРегистрахСведений.СтруктураКоллизий = СтруктураКоллизий;
		ФормаЗамещенияВНезависимыхРегистрахСведений.ОткрытьМодально();
		ЗамещениеВсегда = ФормаЗамещенияВНезависимыхРегистрахСведений.КодВсегда;
	КонецЕсли;
~ОТКАТ:
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
			ИзмененныеПроведенныеДокументы.Очистить();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
	КонецЕсли;
	Возврат Не БылиИсключения;
	
КонецФункции // ВыполнитьЗаменуЭлементов()

Процедура СброситьДоступность()
	
	ЭлементыФормы.Панель.Страницы.ЗависимыеЭлементы.Доступность = Ложь;
	//ЭлементыФормы.Панель.Страницы.ПравилаЗаменыСсылок.Доступность = Ложь;
	ЗависимыеОбъекты.Строки.Очистить();
	ЭлементыФормы.КоманднаяПанельЗависимыеОбъекты.Кнопки.ВыполнитьЗамену.Доступность = Ложь;
	
КонецПроцедуры // () 

Процедура АвтозаменаЭлементов(ОбработатьНеправильные, НепосредственноеУдаление = Истина) Экспорт
	
	Если мРезультатыПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтруктураПоискаПравильных = Новый Структура(мИмяФлагаПравильныйЭлемент,Истина);
	ПравильныеСтроки = мРезультатыПоиска.НайтиСтроки(СтруктураПоискаПравильных);
	
	Если АвтоматическийВыборПриЗамещенииВРегистреСведений Тогда
		ЗамещениеВсегда = 1; // ОК
	Иначе
		ЗамещениеВсегда = 0;
	КонецЕсли; 
	ИндикаторОбщий = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ПравильныеСтроки.Количество(), "Группы дублей");
	Для Каждого СтрокаПравильного Из ПравильныеСтроки Цикл
		ирОбщий.ОбработатьИндикаторЛкс(ИндикаторОбщий);
		СтруктураПоиска = Новый Структура(мИмяПоляНомерГруппы + ", " + мИмяФлагаПравильныйЭлемент, СтрокаПравильного[мИмяПоляНомерГруппы], Ложь);
		МассивСсылок = Новый Массив;
		МассивНеправильныхСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
		СоответствиеЗамен = Новый Соответствие;
		Для каждого СтрокаНеправильного Из МассивНеправильныхСтрок Цикл
			МассивСсылок.Добавить(СтрокаНеправильного.Ссылка);
			СоответствиеЗамен.Вставить(СтрокаНеправильного.Ссылка, СтрокаПравильного.Ссылка);
		КонецЦикла;
		НайденныеСсылкиТекущейГруппы = НайтиПоСсылкам(МассивСсылок);
		ЗаменаВыполнена = ВыполнитьЗаменуЭлементов(СоответствиеЗамен, НайденныеСсылкиТекущейГруппы, "" + СтрокаПравильного.Ссылка, ЗамещениеВсегда);
		Если Истина
			И ОбработатьНеправильные 
			И (Ложь
				Или ЗаменаВыполнена
				Или Не ВыполнятьВТранзакции)
		Тогда
			ТаблицаОставшихсяСсылок = НайтиПоСсылкам(МассивСсылок);
			ТаблицаОставшихсяСсылок.Свернуть("Ссылка");
			ИндикаторУдаления = ирОбщий.ПолучитьИндикаторПроцессаЛкс(МассивНеправильныхСтрок.Количество(), "Удаление неправильных");
			СтрокаГруппы = НайденныеГруппы.Найти(СтрокаПравильного[мИмяПоляНомерГруппы], мИмяПоляНомерГруппы);
			Для каждого СтрокаНеправильного Из МассивНеправильныхСтрок Цикл
				ирОбщий.ОбработатьИндикаторЛкс(ИндикаторУдаления);
				Если ТаблицаОставшихсяСсылок.Найти(СтрокаНеправильного.Ссылка, "Ссылка") = Неопределено Тогда
					УдалитьНеправильнуюСсылку(СтрокаНеправильного.Ссылка, НепосредственноеУдаление, СтрокаНеправильного, СтрокаГруппы);
				КонецЕсли;
			КонецЦикла;
			ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
		КонецЕсли;
		Если ПерезаписыватьПравильныеЭлементыПослеЗамены Тогда
			ПравильныйОбъект = СтрокаПравильного.Ссылка.ПолучитьОбъект();
			Если ОтключатьКонтрольЗаписи Тогда
				ПравильныйОбъект.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			Попытка
				ирОбщий.ЗаписатьОбъектЛкс(ПравильныйОбъект, ЗаписьНаСервере);
			Исключение
				Сообщить("Ошибка перезаписи правильного объекта """ + СтрокаПравильного.Ссылка + """: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
			КонецПопытки;
		КонецЕсли; 
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	
КонецПроцедуры

Процедура ПоискЗависимыхСсылок()
	
	МассивСсылок = Новый Массив;
	Для каждого Строка0 Из ЗависимыеОбъекты.Строки Цикл
		Для каждого Строка1 Из Строка0.Строки Цикл
			Для каждого Строка2 Из Строка1.Строки Цикл
				Если Строка2.ВключатьВПоиск Тогда
					МассивСсылок.Добавить(Строка2.НеПравильный);
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	НайденныеЗависимыеСсылки.Колонки.Очистить();
	НайденныеЗависимыеСсылки.Колонки.Добавить("Ссылка");
	НайденныеЗависимыеСсылки.Колонки.Добавить("Данные");
	НайденныеЗависимыеСсылки.Колонки.Добавить("Метаданные");
	
	ВсеНайденныеЗависимыеСсылки = НайтиПоСсылкам(МассивСсылок);
	Для каждого СтрокаВсеСсылки Из ВсеНайденныеЗависимыеСсылки Цикл
		Если СтрокаВсеСсылки.ссылка.Владелец <> СтрокаВсеСсылки.Данные Тогда
			СтрокаСсылки = НайденныеЗависимыеСсылки.Добавить();
			Для каждого Колонка Из НайденныеЗависимыеСсылки.Колонки Цикл
				СтрокаСсылки[Колонка.Имя]=СтрокаВсеСсылки[Колонка.Имя];
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	ЭлементыФормы.НайденныеЗависимыеСсылки.СоздатьКолонки();
	
КонецПроцедуры // ПоисЗависимыхссылок()

Процедура ОчиститьРезультатыПоиска()
	
	мПоляСравнения = Новый Массив();
	мРезультатыПоиска = Новый ТаблицаЗначений;
	мРезультатыПоиска.Колонки.Добавить("Ссылка");
	мРезультатыПоиска.Колонки.Добавить(мИмяПоляЦенность, , мПредставления[мИмяПоляЦенность]);
	ДобавитьОбщиеКолонкиВРезультатыПоиска();
	
	ЭтаФорма.ЭлементыТекущейГруппы = Новый ТаблицаЗначений;
	ЭтаФорма.НайденныеГруппы = Новый ТаблицаЗначений;
	мТекущаяГруппа = Неопределено;
	
	НайденныеГруппы.Колонки.Добавить(мИмяПоляНомерГруппы, , мПредставления[мИмяПоляНомерГруппы]);
	НайденныеГруппы.Колонки.Добавить(мИмяПоляКоличествоЭлементов, , мПредставления[мИмяПоляКоличествоЭлементов]);
	НайденныеГруппы.Индексы.Добавить(мИмяПоляНомерГруппы);
	
	ЭлементыТекущейГруппы.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(мКорневойТипОбъекта + "Ссылка." + мМетаданныеОбъекта.Имя), "Объект");
	ЭлементыТекущейГруппы.Колонки.Добавить(мИмяПоляКоличествоСсылок, , мПредставления[мИмяПоляКоличествоСсылок]);
	ЭлементыТекущейГруппы.Колонки.Добавить(мИмяПоляНомерГруппы, , мПредставления[мИмяПоляНомерГруппы]);
	ЭлементыТекущейГруппы.Колонки.Добавить(мИмяПоляЦенность, , мПредставления[мИмяПоляЦенность]);
	ЭлементыТекущейГруппы.Колонки.Добавить(мИмяФлагаПравильныйЭлемент, Новый ОписаниеТипов("Булево"), мПредставления[мИмяФлагаПравильныйЭлемент]);
	ЭлементыТекущейГруппы.Колонки.Добавить(мИмяФлагаПравильныеДанные, Новый ОписаниеТипов("Булево"), мПредставления[мИмяФлагаПравильныеДанные]);
	ЭлементыТекущейГруппы.Колонки.Добавить(мИмяПоляИдентификатор, , мПредставления[мИмяПоляИдентификатор]);
	ЭлементыТекущейГруппы.Индексы.Добавить("Ссылка");
	
	Для Каждого Реквизит Из мСписокРеквизитов Цикл
		ЭлементыТекущейГруппы.Колонки.Добавить(мПрефиксКолонокРеквизитов + Реквизит.Значение, Новый ОписаниеТипов("Строка"), Реквизит.Представление);
	КонецЦикла;
	НастроитьСлужубныеКолонкиРезультатовПоиска();
	
КонецПроцедуры

Процедура НастроитьСлужубныеКолонкиРезультатовПоиска()
	
	НайденныеГруппы.Колонки.Добавить(мИмяПоляНеправильныеСсылки, , мПредставления[мИмяПоляНеправильныеСсылки]);
	НайденныеГруппы.Колонки.Добавить(мИмяПоляПравильныйЭлемент, , мПредставления[мИмяПоляПравильныйЭлемент]);
	НайденныеГруппы.Колонки.Добавить(мИмяПоляПравильныеДанные, , мПредставления[мИмяПоляПравильныеДанные]);
	НайденныеГруппы.Колонки[мИмяПоляКоличествоЭлементов].Заголовок = мПредставления[мИмяПоляПравильныеДанные];
	НайденныеГруппы.Колонки[мИмяПоляНомерГруппы].Заголовок = мПредставления[мИмяПоляНомерГруппы];
	//мРезультатыПоиска.Колонки[мИмяПоляКоличествоЭлементов].Заголовок = мПредставления[мИмяПоляПравильныеДанные];
	мРезультатыПоиска.Колонки[мИмяПоляЦенность].Заголовок = мПредставления[мИмяПоляЦенность];
	мРезультатыПоиска.Колонки[мИмяПоляНомерГруппы].Заголовок = мПредставления[мИмяПоляНомерГруппы];
	
КонецПроцедуры

Процедура НастроитьЭлементыФормыПоРезультатуПоиска()
	
	ЭлементыФормы.НайденныеГруппы.СоздатьКолонки();
	ЭлементыФормы.ЭлементыТекущейГруппы.СоздатьКолонки();
	
	ирОбщий.УстановитьСвойствоВКоллекцииЛкс(ЭлементыФормы.НайденныеГруппы.Колонки, , "-Ширина", 30);
	ирОбщий.УстановитьСвойствоВКоллекцииЛкс(ЭлементыФормы.НайденныеГруппы.Колонки, , "-ТолькоПросмотр", Истина);
	ЭлементыФормы.НайденныеГруппы.Колонки[мИмяПоляНомерГруппы].Ширина = 5;
	ЭлементыФормы.НайденныеГруппы.Колонки[мИмяПоляКоличествоЭлементов].Формат = "ЧН=";
	ЭлементыФормы.НайденныеГруппы.Колонки[мИмяПоляКоличествоЭлементов].Ширина = 5;
		
	ирОбщий.УстановитьСвойствоВКоллекцииЛкс(ЭлементыФормы.ЭлементыТекущейГруппы.Колонки, , "-ТолькоПросмотр", Истина);
	Колонка = ЭлементыФормы.ЭлементыТекущейГруппы.Колонки[мИмяПоляКоличествоСсылок];
	Колонка.Ширина = 5;
	
	Колонка = ЭлементыФормы.ЭлементыТекущейГруппы.Колонки[мИмяПоляНомерГруппы];
	Колонка.ИзменятьВидимость = Ложь;
	Колонка.Видимость = Ложь;
	
	Колонка = ЭлементыФормы.ЭлементыТекущейГруппы.Колонки[мИмяФлагаПравильныйЭлемент];
	Колонка.Данные = "";
	Колонка.ДанныеФлажка = мИмяФлагаПравильныйЭлемент;
	Колонка.УстановитьЭлементУправления(Тип("Флажок"));
	
	Колонка = ЭлементыФормы.ЭлементыТекущейГруппы.Колонки[мИмяФлагаПравильныеДанные];
	Колонка.Данные = "";
	Колонка.ДанныеФлажка = мИмяФлагаПравильныеДанные;
	Колонка.УстановитьЭлементУправления(Тип("Флажок"));
		
	Для Каждого Реквизит Из мСписокРеквизитов Цикл
		Колонка = ЭлементыФормы.ЭлементыТекущейГруппы.Колонки.Найти(мПрефиксКолонокРеквизитов + Реквизит.Значение);
		Колонка.Видимость = Ложь;
	КонецЦикла;
	Для Каждого КолонкаТП Из ЭлементыФормы.НайденныеГруппы.Колонки Цикл
		КолонкаТП.ТекстШапки = мПредставления[КолонкаТП.Имя];
	КонецЦикла;
	
	ОбновитьРамкуГруппыНайденныеГруппы();
	ВывестиГруппу();

КонецПроцедуры

Процедура ОбновитьДоступностьКнопокВпередНазадНайденныхГрупп()
	
	ЭлементыФормы.КоманднаяПанельНайденныеГруппы.Кнопки.СледующаяГруппа.Доступность = НайденныеГруппы.Количество() > 1;
	ЭлементыФормы.КоманднаяПанельНайденныеГруппы.Кнопки.ПредыдущаяГруппа.Доступность = НайденныеГруппы.Количество() > 1;

КонецПроцедуры

Процедура ОбновитьСтрокуРезультатовПоиска(СтрокаРезультатовПоиска)
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СтрокаРезультатовПоиска.Ссылка);
	РезультатПоиска = ПолучитьТаблицуРеквизитовПоМассивуСсылок(МассивСсылок);
	Если РезультатПоиска.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтрокаРезультатовПоиска,РезультатПоиска[0],,"Ссылка");
	Иначе
		Для каждого Колонка Из ЭлементыТекущейГруппы.Колонки Цикл
			Если Истина
				И Колонка.Имя <> "Ссылка" 
				И Колонка.Имя <> мИмяФлагаПравильныйЭлемент 
				И Колонка.Имя <> мИмяФлагаПравильныеДанные 
			Тогда
				СтрокаРезультатовПоиска[Колонка.Имя] = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ДопустимоеРазличиеСлов = 30;
	ПриУстановкеПолногоИмениОбъекта();
		
КонецПроцедуры

Процедура ПриУстановкеПолногоИмениОбъекта()

	мМетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	Если мМетаданныеОбъекта <> Неопределено Тогда
		Если Не ПравоДоступа("Чтение", мМетаданныеОбъекта) Тогда 
			Сообщить("Отсутствуют права на чтение таблицы """ + ПолноеИмяОбъекта + """", СтатусСообщения.Внимание);
			мМетаданныеОбъекта = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	ЭтаФорма.ШкалаЦенности.Очистить();
	Если мМетаданныеОбъекта <> Неопределено Тогда
		СохранитьНастройкиПоискаПоТаблице();
		мКорневойТипОбъекта = ирОбщий.ПолучитьПервыйФрагментЛкс(ПолноеИмяОбъекта);
		мСписокРеквизитов.Очистить();
		
		мСхемаКомпоновки = ирОбщий.ПолучитьСхемуКомпоновкиПоОбъектуМетаданныхЛкс(ПолноеИмяОбъекта,, Ложь, мПсевдонимТаблицы);
		#Если _ Тогда
		    мСхемаКомпоновки = Новый СхемаКомпоновкиДанных;
		#КонецЕсли
		ВычисляемоеПоле = мСхемаКомпоновки.ВычисляемыеПоля.Добавить();
		ВычисляемоеПоле.ПутьКДанным = мИмяПоляКоличествоЭлементов;
		ВычисляемоеПоле.Выражение = "0"; // Если этого не сделать будет ошибка 
		ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Число");
		ВычисляемоеПоле.Заголовок = мПредставления[мИмяПоляКоличествоЭлементов];
		ВычисляемоеПоле.ОграничениеИспользования.Условие = Истина;
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(мСхемаКомпоновки);
		КомпоновщикЦенности = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикЦенности.Инициализировать(ИсточникДоступныхНастроек);
		//КомпоновщикДублей = ирКэш.ПолучитьКомпоновщикТаблицыМетаданныхЛкс(ПолноеИмяОбъекта);
		КомпоновщикДублей = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикДублей.Инициализировать(ИсточникДоступныхНастроек);
		Для Каждого ДоступноеПоле Из КомпоновщикДублей.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если ДоступноеПоле.Папка Тогда
				Продолжить;
			КонецЕсли;
			Если ДоступноеПоле.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
				Продолжить;
			КонецЕсли; 
			Если ирОбщий.СтрокиРавныЛкс("" + ДоступноеПоле.Поле, "Ссылка") Тогда
				Продолжить;
			КонецЕсли; 
			Если "" + ДоступноеПоле.Поле = мИмяПоляКоличествоЭлементов Тогда
				Продолжить;
			КонецЕсли; 
			мРеквизит = мСписокРеквизитов.Добавить();
			мРеквизит.Представление = ДоступноеПоле.Заголовок;
			мРеквизит.Значение = "" + ДоступноеПоле.Поле;
		КонецЦикла; 
		
		ОчиститьРезультатыПоиска();
		НастроитьЭлементыФормыПоРезультатуПоиска();
		
		//Если ирОбщий.ЛиМетаданныеОбъектаСГруппамиЛкс(мМетаданныеОбъекта) Тогда
		//	Если ирОбщий.НайтиЭлементКоллекцииПоПутиКДаннымЛкс(ПостроительОтчетаОтбора.Отбор, "ЭтоГруппа") = Неопределено Тогда
		//		
		//		// Антибаг платформы 8.1.8.76
		//		ПостроительОтчетаОтбора.ДоступныеПоля.ЭтоГруппа.Порядок = Ложь;
		//		
		//		ПостроительОтчетаОтбора.Отбор.Добавить("ЭтоГруппа");
		//		ПостроительОтчетаОтбора.Отбор.ЭтоГруппа.Установить(Ложь);
		//	КонецЕсли;
		//КонецЕсли;

		// Для подчиненных справочников ищем дубли только внутри одинаковых владельцев
		Если Истина
			И мКорневойТипОбъекта = "Справочник"
			И мМетаданныеОбъекта.Владельцы.Количество() > 0 
		Тогда
			ирОбщий.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(КомпоновщикДублей.Настройки.Порядок.Элементы, "Владелец");
		КонецЕсли;
		
		ЭлементыФормы.Панель.Страницы.НайденныеГруппы.Доступность = Истина;
		ЭлементыФормы.НайденныеГруппы.ТекущаяСтрока = НайденныеГруппы.Добавить();
		ПриДобавленииНовойГруппы();
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.ПоискДублей;
		
		СтруктураНастроекПоискаДублей = НастройкиПоискаДублей[ПолноеИмяОбъекта];
		Если СтруктураНастроекПоискаДублей <> Неопределено Тогда
			ЗагрузитьНастройкиПоискаДублей(СтруктураНастроекПоискаДублей);
		Иначе
			КомпоновщикДублей.ЗагрузитьНастройки(Новый НастройкиКомпоновкиДанных);
		КонецЕсли; 
	Иначе
		ЭлементыФормы.Панель.Страницы.НайденныеГруппы.Доступность = Ложь;
		ЭлементыФормы.Панель.Страницы.ЗависимыеЭлементы.Доступность = Ложь;
		КомпоновщикДублей.ЗагрузитьНастройки(Новый НастройкиКомпоновкиДанных);
	КонецЕсли;
	
	мИмяСтарогоОбъектаМД = ПолноеИмяОбъекта;
	МетаданныеУстановлены = (мМетаданныеОбъекта <> Неопределено);
	ЭлементыФормы.ВыполнитьПоиск.Доступность = МетаданныеУстановлены;
	ЭлементыФормы.ПанельНастроек.Доступность = МетаданныеУстановлены;

КонецПроцедуры // ПриУстановкеПолногоИмениОбъекта()

Процедура ЗагрузитьНастройкиПоискаДублей(СтруктураНастроекПоискаДублей)
	
	Если СтруктураНастроекПоискаДублей.Свойство("ШкалаЦенности") Тогда
		ЭтаФорма.ШкалаЦенности = СтруктураНастроекПоискаДублей.ШкалаЦенности.Скопировать();
	КонецЕсли; 
	Если СтруктураНастроекПоискаДублей.Свойство("НастройкиКомпоновки") Тогда
		НастройкиКомпоновкиДублей = ирОбщий.ВосстановитьНастройкуКомпоновкиИзСтрокиXMLЛкс(СтруктураНастроекПоискаДублей.НастройкиКомпоновки);
		КомпоновщикДублей.ЗагрузитьНастройки(НастройкиКомпоновкиДублей);
	КонецЕсли;
	мПутьКДаннымПоляНечеткогоСравнения = СтруктураНастроекПоискаДублей.ПутьКДаннымПоляНечеткогоСравнения;
	
КонецПроцедуры

Функция ПолучитьСтруктуруНастроекПоискаДублей()
	
	НастройкиДляСохранения = Новый Структура;
	НастройкиДляСохранения.Вставить("НастройкиКомпоновки", ирОбщий.СохранитьОбъектВВидеСтрокиXMLЛкс(КомпоновщикДублей.Настройки));
	НастройкиДляСохранения.Вставить("ПутьКДаннымПоляНечеткогоСравнения", мПутьКДаннымПоляНечеткогоСравнения);
	НастройкиДляСохранения.Вставить("ШкалаЦенности", ШкалаЦенности);
	Возврат НастройкиДляСохранения;
	
КонецФункции

Процедура СохранитьНастройкиПоискаПоТаблице()

	Если ЗначениеЗаполнено(мИмяСтарогоОбъектаМД) Тогда
		НастройкиДляСохранения = ПолучитьСтруктуруНастроекПоискаДублей();
		НастройкиПоискаДублей.Вставить(мИмяСтарогоОбъектаМД, НастройкиДляСохранения);
	КонецЕсли; 

КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
	ПриУстановкеПолногоИмениОбъекта();
	//НастройкиОтбора = ВосстановитьЗначение(Метаданные().ПолноеИмя() + ".ПостроительОтчетаОтбора.Настройки");
	//Если НастройкиОтбора <> Неопределено Тогда
	//	ПостроительОтчетаОтбора.УстановитьНастройки(НастройкиОтбора);
	//КонецЕсли;
	ПриИзмененииАвтовидимостьКолонокСоставаГруппы();
	Для Каждого СтрокаПравилаЗамены Из ПравилаЗаменыСсылок Цикл
		СтрокаПравилаЗамены.ПомеченоОбъектов = 0;
		СтрокаПравилаЗамены.НайденоОбъектов = 0;
	КонецЦикла;
	Если ТипЗнч(КомпоновкаСсылающихсяОбъектов) = Тип("НастройкиКомпоновкиДанных") Тогда
		КомпоновщикДопПолей.ЗагрузитьНастройки(КомпоновкаСсылающихсяОбъектов);
	КонецЕсли; 
	мНастройкиВосстановлены = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкиОтчетаНастройка(Кнопка)
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройки");
	ЗаполнитьЗначенияСвойств(ФормаНастройки, ЭтотОбъект); 
	Если ФормаНастройки.ОткрытьМодально() = Истина Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ФормаНастройки); // Опасно
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "НастройкиОтчета"

Процедура КоманднаяПанельНастройкиОтчетаПоиск(Кнопка)
	
	Если ПустаяСтрока(ПолноеИмяОбъекта) Тогда
		Предупреждение("Не указаны все необходимые Параметры поиска");
		Возврат;
	КонецЕсли;
	
	мПредставления.Очистить();
	УстановитьПредставленияСлужебныхПолей();
	ОчиститьРезультатыПоиска();
	НастройкиДляОтбора = КомпоновщикДублей.ПолучитьНастройки();
	ЗапросСОтбором = ирОбщий.ПолучитьЗапросИзКомпоновкиЛкс(мСхемаКомпоновки, НастройкиДляОтбора,,, "Ссылка");
	ПоискПоПохожимСловам = Ложь;
	мПоляСравнения = Новый Массив();
	Для Каждого ЭлементПорядка Из КомпоновщикДублей.Настройки.Порядок.Элементы Цикл
		Если "" + ЭлементПорядка.Поле = мПутьКДаннымПоляНечеткогоСравнения Тогда
			ПоискПоПохожимСловам = ЭлементПорядка.Использование;
		КонецЕсли;
		Если ЭлементПорядка.Использование Тогда
			мПоляСравнения.Добавить(ЭлементПорядка);
		КонецЕсли; 
	КонецЦикла;
	Если ПоискПоПохожимСловам Тогда
		НайтиПоПохожимСловам(ЗапросСОтбором);
	Иначе
		НайтиПоРавенствуРеквизитов(ЗапросСОтбором);
	КонецЕсли;
	
	НастроитьЭлементыФормыПоРезультатуПоиска();
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.НайденныеГруппы;
		
КонецПроцедуры

Функция УстановитьПредставленияСлужебныхПолей()

	мПредставления.Вставить(мИмяПоляИдентификатор, "<Идентификатор>");
	мПредставления.Вставить(мИмяПоляКоличествоЭлементов, "<Элементы>");
	мПредставления.Вставить(мИмяПоляКоличествоСсылок, "<Ссылки>");
	мПредставления.Вставить(мИмяПоляНеправильныеСсылки, "<Неправильные ссылки>");
	мПредставления.Вставить(мИмяПоляНомерГруппы, "<Номер группы>");
	мПредставления.Вставить(мИмяПоляЦенность, "<Ценность данных>");
	мПредставления.Вставить(мИмяПоляПравильныйЭлемент, "<Правильный элемент>");
	мПредставления.Вставить(мИмяПоляПравильныеДанные, "<Правильные данные>");
	мПредставления.Вставить(мИмяФлагаПравильныйЭлемент, "<Правильный элемент>");
	мПредставления.Вставить(мИмяФлагаПравильныеДанные, "<Правильные данные>");
	Возврат Неопределено;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "ЭлементыТекущейГруппы"

Процедура КоманднаяПанельЭлементыТекущейГруппыВыборПравильного(Кнопка)
	
	Если ЭлементыФормы.ЭлементыТекущейГруппы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = ЭлементыТекущейГруппы.Найти(Истина, мИмяФлагаПравильныйЭлемент);
	Если СтрокаТаблицы <> Неопределено Тогда
		СтрокаТаблицы[мИмяФлагаПравильныйЭлемент] = Ложь;
	КонецЕсли;
	ЭлементыФормы.ЭлементыТекущейГруппы.ТекущаяСтрока[мИмяФлагаПравильныйЭлемент] = Истина;
	//ЭлементыФормы.ЭлементыТекущейГруппы.ТекущаяСтрока[мИмяФлагаПравильныеДанные] = Истина;
	СброситьДоступность();
	ОбновитьТекущуюГруппуРезультатовПоиска();
	
КонецПроцедуры

Процедура КоманднаяПанельЭлементыТекущейГруппыПоискСсылок(Кнопка)
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	РезультатПоиска = ЗаполнитьПравилаЗаменыСсылокПоТекущейГруппе();
	//ЭлементыФормы.Панель.Страницы.ПравилаЗаменыСсылок.Доступность = РезультатПоиска;
	Если РезультатПоиска Тогда
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.ПравилаЗаменыСсылок;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельЭлементыТекущейГруппыПоискЗависимых(Кнопка)
	
	ВремТаблица = ЭлементыТекущейГруппы.Скопировать();
	СтрокаПравильного = ВремТаблица.Найти(Истина, мИмяФлагаПравильныйЭлемент);
	Если СтрокаПравильного = Неопределено Тогда
		Предупреждение("Не определен правильный элемент");
		Возврат;
	КонецЕсли;
	
	НайденныеЗависимыеСсылки.Очистить();
	мЗависимыеМетаданные = Новый массив;
	ИмяОбъекта = ПолноеИмяОбъекта;
	Для каждого МетаданныеЗависимого Из Метаданные.Справочники Цикл
		СтрокаМетаданные = Неопределено;
		Если МетаданныеЗависимого.Владельцы.Содержит(мМетаданныеОбъекта) Тогда
			мЗависимыеМетаданные.Добавить(МетаданныеЗависимого);
		КонецЕсли; 
	КонецЦикла; 
	
	Правильный = СтрокаПравильного.Ссылка;
	ВремТаблица.Удалить(СтрокаПравильного);
	ЗависимыеОбъекты.Строки.Очистить();
	
	Для каждого МетаданныеЗависимого Из мЗависимыеМетаданные Цикл
		СтрокаМетаданные = Неопределено;
		Для каждого СтрокаНеПравильного Из ВремТаблица Цикл
			СтрокаОбъекта = Неопределено;
			НеПравильный = СтрокаНеПравильного.ссылка;
			МенеджерЗависимого = ирОбщий.ПолучитьМенеджерЛкс(МетаданныеЗависимого);
			Выборка = МенеджерЗависимого.Выбрать(,НеПравильный);
			Пока Выборка.Следующий() Цикл
				Если СтрокаМетаданные = Неопределено Тогда
					СтрокаМетаданные = ЗависимыеОбъекты.Строки.Добавить();
					СтрокаМетаданные.НеПравильный = МетаданныеЗависимого.Представление();
					СтрокаМетаданные.Правильный = МетаданныеЗависимого.Представление();
				КонецЕсли; 
				
				Если СтрокаОбъекта = Неопределено Тогда
					СтрокаОбъекта = СтрокаМетаданные.Строки.Добавить();
					СтрокаОбъекта.НеПравильный = НеПравильный;
					СтрокаОбъекта.Правильный = Правильный;
				КонецЕсли; 
				СтрокаЗависимого = СтрокаОбъекта.Строки.Добавить();
				СтрокаЗависимого.НеПравильный = Выборка.Ссылка;
				Пустой = МенеджерЗависимого.ПустаяСсылка();
				Похожий = МенеджерЗависимого.НайтиПоНаименованию(Выборка.Наименование, Ложь, , Правильный);
				Если Похожий <> Пустой Тогда
					СтрокаЗависимого.ВключатьВПоиск = Истина;
				КонецЕсли; 
				СтрокаЗависимого.Правильный = Похожий;
			КонецЦикла;
		КонецЦикла; 
		Если СтрокаМетаданные <> Неопределено Тогда
			ЭлементыФормы.ЗависимыеОбъекты.Развернуть(СтрокаМетаданные,Истина);
		КонецЕсли; 
	КонецЦикла; 
	ЭлементыФормы.Панель.Страницы.ЗависимыеЭлементы.Доступность = Истина;
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.ЗависимыеЭлементы;
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеГруппыАвтозамена(Кнопка)
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	
	Если Ложь
		Или мРезультатыПоиска = Неопределено 
		или мРезультатыПоиска.НайтиСтроки(Новый Структура(мИмяФлагаПравильныйЭлемент,Истина)).Количество() = 0
	Тогда
		Предупреждение("Не определен правильный элемент ни в одной из групп.");
		Возврат;
	КонецЕсли;
	
	РезультатВопроса = Вопрос("При автоматической замене будет произведен поиск и замена
	|неправильных элементов, в группах, где определен правильный элемент.
	|
	|Обработать неправильные объекты, на которые не останется ссылок, после замены?", РежимДиалогаВопрос.ДаНетОтмена);
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьНеправильные = РезультатВопроса = КодВозвратаДиалога.Да;
	Если ОбработатьНеправильные Тогда
		Ответ = Вопрос("Удалить неправильные элементы, на которые не останется ссылок, непосредственно (иначе пометить на удаление)?", РежимДиалогаВопрос.ДаНет);
		НепосредственноеУдаление = Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;
	АвтозаменаЭлементов(ОбработатьНеправильные, НепосредственноеУдаление);

	ВывестиГруппу();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ЭлементыТекущейГруппы"

Процедура ЭлементыТекущейГруппыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	ЕСли ПолноеИмяОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаВыбора = ирОбщий.ПолучитьМенеджерЛкс(мМетаданныеОбъекта).ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ЭлементыТекущейГруппыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Ссылка.Пустая() Тогда
		ОформлениеСтроки.Ячейки.Ссылка.УстановитьТекст("<Пустая ссылка>");
	КонецЕсли;
	
	Если ДанныеСтроки[мИмяПоляКоличествоСсылок] = Неопределено Тогда
		ОформлениеСтроки.Ячейки[мИмяПоляКоличествоСсылок].Текст = "?";
	КонецЕсли;
	
	//Если ДанныеСтроки[мИмяФлагаПравильныйЭлемент] <> Неопределено И ДанныеСтроки[мИмяФлагаПравильныйЭлемент] Тогда
	Если ДанныеСтроки[мИмяФлагаПравильныйЭлемент] = Истина Тогда
		ОформлениеСтроки.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.Ячейки.Ссылка.Шрифт = Новый Шрифт(,,Истина);
		
		//ИмяКолонки = ПолучитьЗначениеНастройки("Имя реквизита");
		//Если Не ИмяКолонки = Неопределено Тогда
		//	ЯчейкаРеквизита = ОформлениеСтроки.Ячейки.Найти(мПрефиксКолонокРеквизитов + ИмяКолонки);
		//	Если Не ЯчейкаРеквизита = Неопределено Тогда
		//		ЯчейкаРеквизита.Шрифт = Новый Шрифт(,,Истина);
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;
	Если ДанныеСтроки[мИмяФлагаПравильныеДанные] Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
	КонецЕсли; 
	Если ЭлементыФормы.КоманднаяПанельЭлементыТекущейГруппы.Кнопки.Пустые.Пометка Тогда
		ирОбщий.ОтобразитьПустыеЗначенияВЯчейкахТабличногоПоля(ОформлениеСтроки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтложенноЗагрузитьРеквизиты() Экспорт
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	ПоследняяСтрока = ЭлементыФормы.ЭлементыТекущейГруппы.Значение[ЭлементыФормы.ЭлементыТекущейГруппы.Значение.Количество() - 1];
	ЭлементыФормы.ЭлементыТекущейГруппы.ТекущаяСтрока = ПоследняяСтрока;
	КопияМассива = ирОбщий.СкопироватьУниверсальнуюКоллекциюЛкс(мМассивОтложеннойЗагрузкиРеквизитов);
	мМассивОтложеннойЗагрузкиРеквизитов.Очистить();
	ЗагрузитьРеквизитыЭлементовТекущейГруппы(КопияМассива);
	
КонецПроцедуры

Процедура ЭлементыТекущейГруппыПослеУдаления(Элемент)
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	
КонецПроцедуры

Процедура ЭлементыТекущейГруппыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип(мКорневойТипОбъекта + "Ссылка." + мМетаданныеОбъекта.Имя) Тогда
		НоваяСтрокаНайденных = ЭлементыТекущейГруппы.Найти(ВыбранноеЗначение, "Ссылка");
		Если НоваяСтрокаНайденных = Неопределено Тогда
			Если Не ПроверитьНаличиеЭлементаПередДобавлением(ВыбранноеЗначение) Тогда
				Возврат;
			КонецЕсли; 
			НоваяСтрокаНайденных = ЭлементыТекущейГруппы.Добавить();
			НоваяСтрокаНайденных.Ссылка = ВыбранноеЗначение;
			НоваяСтрокаНайденных[мИмяФлагаПравильныйЭлемент] = Ложь;
			НоваяСтрокаНайденных[мИмяПоляНомерГруппы] = мТекущаяГруппа[мИмяПоляНомерГруппы];
			Если мМассивОтложеннойЗагрузкиРеквизитов = Неопределено Тогда
				мМассивОтложеннойЗагрузкиРеквизитов = Новый Массив;
			КонецЕсли; 
			Если мМассивОтложеннойЗагрузкиРеквизитов.Количество() = 0 Тогда
				ЭтаФорма.ПодключитьОбработчикОжидания("ОтложенноЗагрузитьРеквизиты", 0.1, Истина);
			КонецЕсли; 
			мМассивОтложеннойЗагрузкиРеквизитов.Добавить(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьНаличиеЭлементаПередДобавлением(ВыбранноеЗначение)
	
	Результат = Истина;
	НоваяСтрокаНайденных = мРезультатыПоиска.Найти(ВыбранноеЗначение, "Ссылка");
	Если НоваяСтрокаНайденных <> Неопределено Тогда
		Сообщить("Элемент """ + ВыбранноеЗначение + """ нельзя добавить в группу " + мТекущаяГруппа[мИмяПоляНомерГруппы] 
			+ ", т.к. он уже существует в группе " + НоваяСтрокаНайденных[мИмяПоляНомерГруппы]);
		Результат = Ложь;
	КонецЕсли; 
	Возврат Результат;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "НайденныеСсылки"

Процедура КоманднаяПанельНайденныеСсылкиВыполнитьЗамену(Кнопка)
	
	СоответствиеЗамен = Новый Соответствие;
	Для каждого СтрокаЗамены Из ПравилаЗаменыСсылок Цикл
		Если СтрокаЗамены.Пометка Тогда
			СоответствиеЗамен.Вставить(СтрокаЗамены.ЧтоЗаменять, СтрокаЗамены.НаЧтоЗаменять);
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьЗаменуЭлементов(СоответствиеЗамен, ЭтотОбъект.НайденныеСсылки.НайтиСтроки(Новый Структура("Пометка", Истина)));
	Если ИзмененныеПроведенныеДокументы.Количество() > 0 Тогда
		Ответ = Вопрос("В процессе замены были модифицированы проведенные документы. В большинстве случаев их перепроведение не требуется.
		|Хотите открыть форму просмотра их списка с возможностью перепроведения?",
			РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ФормаПерепроведения = ПолучитьФорму("ФормаПерепроведенияДокументов", , Новый УникальныйИдентификатор);
			ТаблицаДокументов = ИзмененныеПроведенныеДокументы.Выгрузить();
			ТаблицаДокументов.Сортировать("ДатаДокумента");
			ФормаПерепроведения.ТаблицаДокументов = ТаблицаДокументов;
			ФормаПерепроведения.Открыть();
		КонецЕсли;
	КонецЕсли; 
	//ЗаполнитьПравилаЗаменыСсылокПоТекущейГруппе();
	ВыполнитьПоискЗаменяемыхСсылок();
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеСсылкиУдалитьЭлементы(Кнопка)
	
	Ответ = Вопрос("Удалить неправильные элементы непосредственно (иначе пометить на удаление)?", РежимДиалогаВопрос.ДаНетОтмена);
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	НепосредственноеУдаление = Ответ = КодВозвратаДиалога.Да;
	Если НепосредственноеУдаление Тогда
		Если РазрешитьУдалениеСНарушениемСсылочнойЦелостности Тогда
			Ответ = Вопрос("Перед непосредственным удалением рекомендуется поиск ссылок на удаляемые объекты. Выполнить?", РежимДиалогаВопрос.ДаНет);
		Иначе
			Ответ = КодВозвратаДиалога.Да;
		КонецЕсли; 
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыполнитьПоискЗаменяемыхСсылок();
		КонецЕсли;
		Если ЭтотОбъект.НайденныеСсылки.Количество() > 0 Тогда
			Если РазрешитьУдалениеСНарушениемСсылочнойЦелостности Тогда
				Ответ = Вопрос("На неправильные элементы есть ссылки! Непосредственное удаление приведет к нарушению логической целостности. Продолжить?",
					РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.Отмена);
				Если Ответ <> КодВозвратаДиалога.ОК Тогда
					Возврат;
				КонецЕсли;
			Иначе
				Предупреждение("На неправильные элементы есть ссылки! Непосредственное удаление недопустимо.", 20); 
				Возврат;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
		
	Для каждого СтрокаЗамены из ПравилаЗаменыСсылок Цикл
		Если Не СтрокаЗамены.Пометка Тогда
			Продолжить;
		КонецЕсли; 
	    УдаляемаяСсылка = СтрокаЗамены.ЧтоЗаменять;
		Если ЗначениеЗаполнено(УдаляемаяСсылка) Тогда
			СсылкаДляЗаменыДанных = Неопределено;
			Если СтрокаЗамены.ЗаменитьДанныеОбъекта Тогда
				СсылкаДляЗаменыДанных = СтрокаЗамены.НаЧтоЗаменять;
			КонецЕсли; 
			УдалитьНеправильнуюСсылку(УдаляемаяСсылка, НепосредственноеУдаление,,, СсылкаДляЗаменыДанных);
		КонецЕсли;
		Если НепосредственноеУдаление Тогда
			СтрокаЗамены.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление зависимых
	//Если Не БылиИсключения Тогда
	//	Для каждого Строка0 Из ЗависимыеОбъекты.Строки Цикл
	//		Для каждого Строка1 Из Строка0.Строки Цикл
	//			Для каждого Строка2 Из Строка1.Строки Цикл
	//				Если Строка2.ВключатьВПоиск Тогда
	//					Объект = Строка2.НеПравильный.ПолучитьОбъект();
	//					Если ОтключатьКонтрольЗаписи Тогда
	//						Объект.ОбменДанными.Загрузка = Истина;
	//					КонецЕсли;
	//					Попытка
	//						Если НепосредственноеУдаление Тогда
	//							Объект.Удалить();
	//						Иначе
	//							Объект.УстановитьПометкуУдаления(Истина);
	//						КонецЕсли; 
	//					Исключение
	//						Если ВыполнятьВТранзакции Тогда
	//							БылиИсключения = Истина;
	//							Прервать;
	//						КонецЕсли;
	//					КонецПопытки;
	//				КонецЕсли; 
	//			КонецЦикла; 
	//			Если БылиИсключения Тогда
	//				Прервать;
	//			КонецЕсли; 
	//		КонецЦикла; 
	//		Если БылиИсключения Тогда
	//			Прервать;
	//		КонецЕсли; 
	//	КонецЦикла; 
	//КонецЕсли; 
	
	//Если НепосредственноеУдаление Тогда
	//	Если НЕ БылиИсключения Тогда
	//		ЗависимыеОбъекты.Строки.Очистить();
	//	КонецЕсли;
	//КонецЕсли; 
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	
КонецПроцедуры

Функция УдалитьНеправильнуюСсылку(УдаляемаяСсылка, НепосредственноеУдаление, СтрокаНеправильного = Неопределено, СтрокаГруппы = Неопределено,
	Знач СсылкаДляЗаменыДанных = Неопределено)

	Если СтрокаНеправильного = Неопределено Тогда
		СтрокаНеправильного = мРезультатыПоиска.Найти(УдаляемаяСсылка, "Ссылка");
	КонецЕсли; 
	Если СтрокаГруппы = Неопределено Тогда 
		Если СтрокаНеправильного <> Неопределено Тогда
			СтрокаГруппы = НайденныеГруппы.Найти(СтрокаНеправильного[мИмяПоляНомерГруппы], мИмяПоляНомерГруппы);
		КонецЕсли; 
	КонецЕсли; 
	СтрокаВнутриТекущейГруппы = ЭлементыТекущейГруппы.Найти(УдаляемаяСсылка, "Ссылка");
	Объект = УдаляемаяСсылка.ПолучитьОбъект();
	Если Объект <> Неопределено Тогда
		НачатьТранзакцию();
		Если СсылкаДляЗаменыДанных = Неопределено Тогда
			Если СтрокаНеправильного <> Неопределено Тогда
				Если СтрокаНеправильного[мИмяФлагаПравильныеДанные] Тогда
					СсылкаДляЗаменыДанных = СтрокаГруппы[мИмяПоляПравильныйЭлемент];
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		Если СсылкаДляЗаменыДанных <> Неопределено Тогда
			ОбъектДляЗаменыДанных = СсылкаДляЗаменыДанных.ПолучитьОбъект();
			НеправильныйОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(ОбъектДляЗаменыДанных);
			НеправильныйОбъектXDTO.Ref = УдаляемаяСсылка;
			ПравильныйОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(Объект);
			ПравильныйОбъектXDTO.Ref = СсылкаДляЗаменыДанных;
			ПравильныйОбъект = СериализаторXDTO.ПрочитатьXDTO(ПравильныйОбъектXDTO);
			ПравильныйОбъект.ОбменДанными.Загрузка = Истина;
			ирОбщий.ЗаписатьОбъектЛкс(ПравильныйОбъект, ЗаписьНаСервере);
			Объект = СериализаторXDTO.ПрочитатьXDTO(НеправильныйОбъектXDTO);
			Объект.Прочитать();
		КонецЕсли; 
		Если ОтключатьКонтрольЗаписи Тогда
			Объект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		ПредставлениеОбъекта = "" + Объект;
		Попытка
			Если НепосредственноеУдаление Тогда
				ирОбщий.УдалитьОбъектЛкс(Объект, ЗаписьНаСервере);
				Если СтрокаНеправильного <> Неопределено Тогда
					мРезультатыПоиска.Удалить(СтрокаНеправильного);
				КонецЕсли;
				Если СтрокаВнутриТекущейГруппы <> Неопределено Тогда
					ЭлементыТекущейГруппы.Удалить(СтрокаВнутриТекущейГруппы);
				КонецЕсли; 
				Если СтрокаГруппы <> Неопределено Тогда
					СтрокаГруппы[мИмяПоляКоличествоЭлементов] = СтрокаГруппы[мИмяПоляКоличествоЭлементов]- 1;
				КонецЕсли; 
				Сообщить("Удалили """ + ПредставлениеОбъекта + """");
			Иначе
				ирОбщий.УстановитьПометкуУдаленияОбъектаЛкс(Объект, ЗаписьНаСервере, Истина);
				Сообщить("Установили пометку удаления """ + ПредставлениеОбъекта + """");
			КонецЕсли; 
			ЗафиксироватьТранзакцию();
		Исключение
			Сообщить("Обработка """ + ПредставлениеОбъекта + """: " + ОписаниеОшибки());
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЕсли; 

	Возврат Неопределено;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "НайденныеСсылки"

Процедура НайденныеСсылкиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если Элемент.ТекущаяКолонка <> Элемент.Колонки.Пометка Тогда
		Отказ = Истина;
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "ЗависимыеОбъекты"

Процедура КоманднаяПанельЗависимыеОбъектыПоискСсылок(Кнопка)
	ПоискЗависимыхСсылок();
	ЭлементыФормы.КоманднаяПанельЗависимыеОбъекты.Кнопки.ВыполнитьЗамену.Доступность = Истина;
КонецПроцедуры

Процедура КоманднаяПанельЗависимыеОбъектыВыполнитьЗамену(Кнопка)
	
	СтруктураОтбора = Новый Структура;
	МассивСтрокВключенныхВПоиск = ЗависимыеОбъекты.Строки.НайтиСтроки(Новый Структура("ВключатьВПоиск", Истина), Истина);
	
	НомерСтроки = 0;
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(МассивСтрокВключенныхВПоиск.Количество(), "Правила замены");
	Для каждого Строка Из МассивСтрокВключенныхВПоиск Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		СтруктураОтбора.Вставить("Ссылка", Строка.НеПравильный);
		МассивСтрок = НайденныеЗависимыеСсылки.НайтиСтроки(СтруктураОтбора);
		СоответствиеЗамен = Новый Соответствие;
		СоответствиеЗамен.Вставить(Строка.НеПравильный, Строка.Правильный);
		ВыполнитьЗаменуЭлементов(СоответствиеЗамен, МассивСтрок);
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	ПоискЗависимыхСсылок();
	
КонецПроцедуры

Процедура КоманднаяПанельЗависимыеОбъектыУдалитьЭлементы(Кнопка)
	
	Если НайденныеЗависимыеСсылки.Количество() > 0 Тогда
		Предупреждение("На элементы есть ссылки");
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Удалить неправильные элементы непосредственно (иначе пометить на удаление)?", РежимДиалогаВопрос.ДаНетОтмена);
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	НепосредственноеУдаление = Ответ = КодВозвратаДиалога.Да;
	
	БылиИсключения = Ложь;
	ЕСли ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	СтрокиКУдалению = Новый ТаблицаЗначений;
	СтрокиКУдалению.Колонки.Добавить("СтрокаТаблицы");
	СтрокиКУдалению.Колонки.Добавить("ТаблицаЗначений");
	
	Для каждого Строка0 Из ЗависимыеОбъекты.Строки Цикл
		Для каждого Строка1 Из Строка0.Строки Цикл
			Для каждого Строка2 Из Строка1.Строки Цикл
				Если Строка2.ВключатьВПоиск Тогда
					Объект = Строка2.НеПравильный.ПолучитьОбъект();
					Если ОтключатьКонтрольЗаписи Тогда
						Объект.ОбменДанными.Загрузка = Истина;
					КонецЕсли;
					Попытка
						Если НепосредственноеУдаление Тогда
							ирОбщий.УдалитьОбъектЛкс(Объект, ЗаписьНаСервере);
						Иначе
							ирОбщий.УстановитьПометкуУдаленияОбъектаЛкс(Объект, ЗаписьНаСервере, Истина);
						КонецЕсли; 
					Исключение
						Сообщить("Обработка """ + Объект + """: " + ОписаниеОшибки());
						Если ВыполнятьВТранзакции Тогда
							БылиИсключения = Истина;
							Прервать;
						КонецЕсли;
					КонецПопытки;
					Если НепосредственноеУдаление Тогда
						НовСтр = СтрокиКУдалению.Добавить();
						НовСтр.СтрокаТаблицы = Строка2;
						//НовСтр.ТаблицаЗначений = ЗависимыеОбъекты;
						НовСтр.ТаблицаЗначений = Строка1;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЕсли;	
	Если НепосредственноеУдаление Тогда
		Если НЕ БылиИсключения Тогда
			Для Каждого СтрокаКУдалению ИЗ СтрокиКУдалению Цикл
				СтрокаКУдалению.ТаблицаЗначений.Строки.Удалить(СтрокаКУдалению.СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "НайденныеЗависимыеСсылки"

Процедура НайденныеЗависимыеСсылкиПередНачаломИзменения(Элемент, Отказ)
	
	Данные = Элемент.ТекущиеДанные.Данные;
	ирОбщий.ОткрытьСсылкуИзРезультатаПоискаСсылокЛкс(Данные, Элемент.ТекущиеДанные.Метаданные.ПолноеИмя());
	Отказ = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ЗависимыеОбъекты"

Процедура ЗависимыеОбъектыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьТекст = Ложь;
	Если ДанныеСтроки.Уровень() = 1  Тогда
		ОформлениеСтроки.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьФлажок = Ложь;
	ИначеЕсли ДанныеСтроки.Уровень() = 0  Тогда
		ОформлениеСтроки.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
		ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьФлажок = Ложь;
	Иначе
//		ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьФлажок = Истина;
	КонецЕсли; 
КонецПроцедуры

Процедура ЗависимыеОбъектыПравильныйНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = ЭлементыФормы.ЗависимыеОбъекты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Уровень() = 2 Тогда
			Элемент.ВыборПоВладельцу = ТекущиеДанные.Родитель.Правильный;
		Иначе
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура ОпределитьПравильныеЭлементы() Экспорт
	
	Если мРезультатыПоиска.НайтиСтроки(Новый Структура(мИмяПоляКоличествоСсылок, Неопределено)).Количество() > 0 Тогда
		Если Не ОпределитьКоличествоСсылок() Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	мРезультатыПоиска.ЗаполнитьЗначения(Ложь, мИмяФлагаПравильныйЭлемент);
	СтрокиПравильных = Новый Соответствие;
	МенеджерТаблицы = Новый (СтрЗаменить(мМетаданныеОбъекта.ПолноеИмя(), ".", "Менеджер."));
	Для каждого Строка Из мРезультатыПоиска Цикл
		КоличествоСсылок = Строка[мИмяПоляКоличествоСсылок];
		НомерГруппы = Строка[мИмяПоляНомерГруппы];
		СтрокаПравильного = СтрокиПравильных[НомерГруппы];
		Попытка
			Пустышка = мМетаданныеОбъекта.Предопределенные;
			ДопускаютсяПредопределенные = Истина;
		Исключение
			ДопускаютсяПредопределенные = Ложь;
		КонецПопытки;  
		Если Ложь
			Или СтрокаПравильного = Неопределено 
			Или Не ДопускаютсяПредопределенные
			Или (Истина 
				И Не ЗначениеЗаполнено(МенеджерТаблицы.ПолучитьИмяПредопределенного(СтрокаПравильного.Ссылка))
				И ЗначениеЗаполнено(МенеджерТаблицы.ПолучитьИмяПредопределенного(Строка.Ссылка))) 
			Или (Истина 
				И ЗначениеЗаполнено(МенеджерТаблицы.ПолучитьИмяПредопределенного(СтрокаПравильного.Ссылка))
				И ЗначениеЗаполнено(МенеджерТаблицы.ПолучитьИмяПредопределенного(Строка.Ссылка))
				И СтрокаПравильного[мИмяПоляКоличествоСсылок] < КоличествоСсылок) 
			Или (Истина 
				И Не ЗначениеЗаполнено(МенеджерТаблицы.ПолучитьИмяПредопределенного(СтрокаПравильного.Ссылка))
				И Не ЗначениеЗаполнено(МенеджерТаблицы.ПолучитьИмяПредопределенного(Строка.Ссылка))
				И СтрокаПравильного[мИмяПоляКоличествоСсылок] < КоличествоСсылок) 
		Тогда
			СтрокиПравильных.Вставить(НомерГруппы, Строка);
		КонецЕсли; 
	КонецЦикла;
	Для каждого КлючИЗначение Из СтрокиПравильных Цикл
		СтрокаПравильного = КлючИЗначение.Значение;
		СтрокаПравильного[мИмяФлагаПравильныйЭлемент] = Истина;
		СтрокаГруппы = НайденныеГруппы.Найти(СтрокаПравильного[мИмяПоляНомерГруппы], мИмяПоляНомерГруппы);
		СтрокаГруппы[мИмяПоляПравильныйЭлемент] = СтрокаПравильного.Ссылка;
	КонецЦикла;
	ОбновитьКоличествоСсылокНайденныхГрупп();
	
КонецПроцедуры // () 

Процедура КоманднаяПанельНайденныеГруппыАвтоопределениеПравильныхДанных(Кнопка)
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	мРезультатыПоиска.ЗаполнитьЗначения(Ложь, мИмяФлагаПравильныеДанные);
	мРезультатыПоиска.Сортировать(мИмяПоляНомерГруппы + "," + мИмяПоляЦенность + "," + мИмяФлагаПравильныйЭлемент + " Убыв");
	Для каждого СтрокЭлемента Из мРезультатыПоиска Цикл
		СтрокаГруппы = НайденныеГруппы.Найти(СтрокЭлемента[мИмяПоляНомерГруппы], мИмяПоляНомерГруппы);
		Если ЗначениеЗаполнено(СтрокаГруппы[мИмяПоляПравильныеДанные]) Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаГруппы[мИмяПоляПравильныеДанные] = СтрокЭлемента.Ссылка;
		СтрокЭлемента[мИмяФлагаПравильныеДанные] = Истина;
	КонецЦикла;
	ВывестиГруппу();
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеГруппыПредыдущаяГруппа(Кнопка)
	
	Если мТекущаяГруппа = НайденныеГруппы[0] Тогда
		Возврат;
	КонецЕсли;
	ОбновитьТекущуюГруппуРезультатовПоиска();
	
	мТекущаяГруппа = НайденныеГруппы[НайденныеГруппы.Индекс(мТекущаяГруппа) - 1];
	ВывестиГруппу();
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеГруппыСледующаяГруппа(Кнопка)
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	Если мТекущаяГруппа = НайденныеГруппы[НайденныеГруппы.Количество() - 1] Тогда
		Возврат;
	КонецЕсли;
	мТекущаяГруппа = НайденныеГруппы[НайденныеГруппы.Индекс(мТекущаяГруппа) + 1];
	ВывестиГруппу();
	
КонецПроцедуры

Процедура ПередСохранениемЗначений(Отказ)
	
	СохранитьНастройкиПоискаПоТаблице();
	ЭтотОбъект.КомпоновкаСсылающихсяОбъектов = КомпоновщикДопПолей.Настройки;
	//СохранитьЗначение(Метаданные().ПолноеИмя() + ".ПостроительОтчетаОтбора.Настройки", ПостроительОтчетаОтбора.ПолучитьНастройки());
	
КонецПроцедуры

Процедура ПолноеИмяОбъектаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Форма = мПлатформа.ПолучитьФорму("ВыборОбъектаМетаданных", Элемент, ЭтаФорма);

	лСтруктураПараметров = Новый Структура;
	лСтруктураПараметров.Вставить("НачальноеЗначениеВыбора", ПолноеИмяОбъекта);
	//лСтруктураПараметров.Вставить("ОтображатьТабличныеЧасти", Истина);
	лСтруктураПараметров.Вставить("ОтображатьСсылочныеОбъекты", Истина);
	Форма.НачальноеЗначениеВыбора = лСтруктураПараметров;
	//ЗначениеВыбора = Форма.ОткрытьМодально();
	//Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
	//	лПолноеИмяОбъекта = Неопределено;
	//	Если ЗначениеВыбора.Свойство("ПолноеИмяОбъекта", лПолноеИмяОбъекта) Тогда
	//		ПолноеИмяОбъекта = лПолноеИмяОбъекта;
	//		ПриУстановкеПолногоИмениОбъекта();
	//	КонецЕсли;
	//КонецЕсли;
	Форма.ОткрытьМодально();
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

// Открывает форму и создает группу дублей по списку ссылок. Список преобразуется к массиву. У таблицы значений по умолчанию используется первая колонка.
// Первый элемент списка считается правильным элементом. Тип ссылок используется от первого элемента массива.
//
// Параметры:
//  СписокСсылок - Массив, ТаблицаЗначений;
//  ИмяКолонки - Строка - имя колонки в случае таблицы значений
//
Процедура ОткрытьДляЗаменыПоСпискуСсылок(Знач СписокСсылок, Знач ИмяКолонки = "") Экспорт
	
	Если ТипЗнч(СписокСсылок) = Тип("ТаблицаЗначений") Тогда
		Если СписокСсылок.Колонки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(ИмяКолонки) Тогда
			ИмяКолонки = СписокСсылок.Колонки[0].Имя;
		КонецЕсли; 
		СписокСсылок = СписокСсылок.ВыгрузитьКолонку(ИмяКолонки);
	КонецЕсли; 
	Если СписокСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(СписокСсылок[0]));
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Открыть();
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПриУстановкеПолногоИмениОбъекта();
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.НайденныеГруппы;
	//ЭлементыФормы.НайденныеГруппы.ДобавитьСтроку();
	//ЭлементыФормы.НайденныеГруппы.ЗакончитьРедактированиеСтроки(ЛОжь);
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(СписокСсылок.Количество(), "Заполнение группы");
	Для Каждого лСсылка Из СписокСсылок Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		ЭлементыТекущейГруппыОбработкаВыбора(ЭлементыФормы.ЭлементыТекущейГруппы, лСсылка, Истина);
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	ЭлементыФормы.ЭлементыТекущейГруппы.Значение[0][мИмяФлагаПравильныйЭлемент] = Истина;
	Ответ = Вопрос("Хотите сразу автоопределить правильные элементы (может выполняться долго)?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		КоманднаяПанельНайденныеГруппыАвтоопределениеПравильныхЭлементов(0);
	КонецЕсли;

КонецПроцедуры // ОткрытьДляЗаменыПоСпискуСсылок()

// Открывает форму и заполняет группы дублей по дереву значений.
// По умолчанию используется первая колонка дерева. Группы формируются по второму уровню дерева. Первый в каждой группе элемент считается правильным.
// Тип ссылок используется первый в описании типов первой колонки.
//
// Параметры:
//  ДеревоЗначений - ДеревоЗначений
//
Процедура ОткрытьДляЗаменыПоДеревуСсылок(Знач ДеревоЗначений, Знач ИмяКолонкиСсылка = "") Экспорт
	
	#Если _ Тогда
		ДеревоЗначений = Новый ДеревоЗначений;
	#КонецЕсли 
	Если Ложь
		Или ДеревоЗначений.Колонки.Количество() = 0 
		Или ДеревоЗначений.Строки.Количество() = 0 
	Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИмяКолонкиСсылка) Тогда
		ИмяКолонкиСсылка = ДеревоЗначений.Колонки[0].Имя;
	КонецЕсли; 
	СтрокаПервойГруппы = ДеревоЗначений.Строки[0];
	Если СтрокаПервойГруппы.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	//Если Не ЗначениеЗаполнено(ИмяКолонкиЦенности) Тогда
	//	Если ДеревоЗначений.Колонки.Количество() > 1 Тогда
	//		ИмяКолонкиЦенности = ДеревоЗначений.Колонки[1].Имя;
	//	КонецЕсли;
	//КонецЕсли; 
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаПервойГруппы.Строки[0][ИмяКолонкиСсылка]));
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Открыть();
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПриУстановкеПолногоИмениОбъекта();
	мТекущаяГруппа = Неопределено;
	НайденныеГруппы.Очистить();
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ДеревоЗначений.Строки.Количество(), "Заполнение группы");
	Для Каждого СтрокаГруппыДерева Из ДеревоЗначений.Строки Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		Если СтрокаГруппыДерева.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		ЭлементыФормы.НайденныеГруппы.ДобавитьСтроку();
		//ЭлементыФормы.НайденныеГруппы.ЗакончитьРедактированиеСтроки(ЛОжь);
		Для Каждого СтрокаДубля Из СтрокаГруппыДерева.Строки Цикл
			ЭлементыТекущейГруппыОбработкаВыбора(ЭлементыФормы.ЭлементыТекущейГруппы, СтрокаДубля[ИмяКолонкиСсылка], Истина);
		КонецЦикла;
		Если ЭлементыФормы.ЭлементыТекущейГруппы.Значение.Количество() > 0 Тогда
			ЭлементыФормы.ЭлементыТекущейГруппы.Значение[0][мИмяФлагаПравильныйЭлемент] = Истина;
			ЭлементыФормы.ЭлементыТекущейГруппы.Значение[0][мИмяФлагаПравильныеДанные] = Истина;
		КонецЕсли; 
		ОбновитьТекущуюГруппуРезультатовПоиска();
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	ТекущийЭлемент = ЭлементыФормы.ЭлементыТекущейГруппы;
	Ответ = Вопрос("Хотите сразу автоопределить правильные элементы (может выполняться долго)?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		КоманднаяПанельНайденныеГруппыАвтоопределениеПравильныхЭлементов(0);
	КонецЕсли;

КонецПроцедуры // ОткрытьДляЗаменыПоСпискуСсылок()

Процедура НастройкаСравненияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ИмяПоля = "" + ДанныеСтроки.Поле;
	Если ИмяПоля = мПутьКДаннымПоляНечеткогоСравнения Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.Аквамарин;
		ОформлениеСтроки.Ячейки.ТипСравнения.УстановитьТекст("По похожим словам");
	Иначе
		Если Не ИмяПоля = мИмяПоляКоличествоЭлементов Тогда
			ОформлениеСтроки.Ячейки.ТипСравнения.УстановитьТекст("По равному значению реквизита");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкиОтчетаСравниватьПоПохожимСловам(Кнопка)
	
	ДанныеНастройки = ЭлементыФормы.НастройкаСравнения.ТекущиеДанные;
	Если ДанныеНастройки <> Неопределено Тогда
		Если мПутьКДаннымПоляНечеткогоСравнения = "" + ДанныеНастройки.Поле Тогда
			мПутьКДаннымПоляНечеткогоСравнения = "";
		Иначе
			ДоступноеПоле = КомпоновщикДублей.Настройки.ДоступныеПоляПорядка.НайтиПоле(ДанныеНастройки.Поле);
			ЛиСтроковыйТип = ДоступноеПоле.ТипЗначения.СодержитТип(Тип("Строка"));
			Если ЛиСтроковыйТип Тогда
				мПутьКДаннымПоляНечеткогоСравнения = "" + ДанныеНастройки.Поле;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЭлементыФормы.НастройкаСравнения.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ПолноеИмяОбъектаОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.Значение = "";
	ПриУстановкеПолногоИмениОбъекта();
	
КонецПроцедуры

Процедура НастройкаСравненияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		Если "" + Элемент.ТекущаяСтрока.Поле = "" Тогда
			Элемент.Значение.Элементы.Удалить(Элемент.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура НайденныеГруппыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	//Если ВыбраннаяСтрока <> Неопределено Тогда
		ЗначениеЯчейки = ВыбраннаяСтрока[Колонка.Имя];
		КорневойТипЗначения = ирОбщий.ПолучитьКорневойТипКонфигурацииЛкс(ЗначениеЯчейки);
		Если КорневойТипЗначения <> Неопределено Тогда
			ОткрытьЗначение(ЗначениеЯчейки);
		КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

Процедура НайденныеГруппыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = мТекущаяГруппа Тогда
		ОформлениеСтроки.ЦветФона = Новый Цвет(255, 200, 200);
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьКоличествоСсылок() Экспорт
	
	Ответ = Вопрос("Вычисление количества ссылок может занять продолжительное время. Продолжить?",
		РежимДиалогаВопрос.ОКОтмена);
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат Ложь;
	КонецЕсли;
	//Если мРезультатыПоиска.Колонки.Найти(мИмяПоляКоличествоСсылок) = Неопределено Тогда
	//	мРезультатыПоиска.Колонки.Добавить(мИмяПоляКоличествоСсылок, , мПредставления[мИмяПоляКоличествоСсылок]);
	//КонецЕсли;
	Состояние("Поиск ссылок...");
	ТаблицаСсылок = НайтиПоСсылкам(мРезультатыПоиска.ВыгрузитьКолонку("Ссылка"));
	Состояние("");
	ТаблицаСсылок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаСсылок.ЗаполнитьЗначения(1, "Количество");
	ТаблицаСсылок.Свернуть("Ссылка", "Количество");
	СоответствиеСсылок = Новый Соответствие;
	Для каждого Строка Из ТаблицаСсылок Цикл
		СоответствиеСсылок.Вставить(Строка.Ссылка, Строка.Количество);
	КонецЦикла;
	Для каждого СтрокаЭлемента Из мРезультатыПоиска Цикл
		КоличествоСсылокНаЭлемент = СоответствиеСсылок[СтрокаЭлемента.Ссылка];
		КоличествоСсылокНаЭлемент = ?(КоличествоСсылокНаЭлемент = Неопределено, 0, КоличествоСсылокНаЭлемент);
		СтрокаЭлемента[мИмяПоляКоличествоСсылок] = ?(КоличествоСсылокНаЭлемент = Неопределено, 0, КоличествоСсылокНаЭлемент);
	КонецЦикла;
	ОбновитьКоличествоСсылокНайденныхГрупп();
	Возврат Истина;
	
КонецФункции

Процедура ОбновитьКоличествоСсылокНайденныхГрупп()
	
	НайденныеГруппы.ЗаполнитьЗначения(Неопределено, мИмяПоляНеправильныеСсылки);
	Для каждого СтрокаЭлемента Из мРезультатыПоиска Цикл
		КоличествоСсылокНаЭлемент = СтрокаЭлемента[мИмяПоляКоличествоСсылок];
		Если Ложь
			Или КоличествоСсылокНаЭлемент = Неопределено
			Или СтрокаЭлемента[мИмяПоляПравильныйЭлемент] 
		Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаГруппы = НайденныеГруппы.Найти(СтрокаЭлемента[мИмяПоляНомерГруппы], мИмяПоляНомерГруппы);
		СтрокаГруппы[мИмяПоляНеправильныеСсылки] = ?(СтрокаГруппы[мИмяПоляНеправильныеСсылки] = Неопределено, 0, СтрокаГруппы[мИмяПоляНеправильныеСсылки]) + КоличествоСсылокНаЭлемент;
	КонецЦикла;

КонецПроцедуры

Процедура КоманднаяПанельНайденныеГруппыАвтоопределениеПравильныхЭлементов(Кнопка)

	ОбновитьТекущуюГруппуРезультатовПоиска();
	ОпределитьПравильныеЭлементы();
	ВывестиГруппу();

КонецПроцедуры

Процедура КоманднаяПанельЭлементыТекущейГруппыАвтоопределениеПравильных(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура НайденныеГруппыПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СоставТекущейГруппы = мРезультатыПоиска.НайтиСтроки(Новый Структура(мИмяПоляНомерГруппы, Элемент.ТекущаяСтрока[мИмяПоляНомерГруппы]));
	Для Каждого СтрокаВнутриТекущейГруппы Из СоставТекущейГруппы Цикл
		мРезультатыПоиска.Удалить(СтрокаВнутриТекущейГруппы);
	КонецЦикла;
	Если Элемент.ТекущаяСтрока = мТекущаяГруппа Тогда
		мТекущаяГруппа = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура НайденныеГруппыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРамкуГруппыНайденныеГруппы()

	ирОбщий.ОбновитьТекстПослеМаркераВСтрокеЛкс(ЭлементыФормы.РамкаГруппыНайденныеГруппы.Заголовок, ,
		Строка(НайденныеГруппы.Количество()) + ")", "(");

КонецПроцедуры // ОбновитьРамкуГруппыНайденныеГруппы()

Процедура ПриДобавленииНовойГруппы()
	
	КопияТаблицы = НайденныеГруппы.Скопировать(, мИмяПоляНомерГруппы);
	КопияТаблицы.Сортировать(мИмяПоляНомерГруппы + " Убыв");
	Если КопияТаблицы.Количество() > 1 Тогда
		ПоследнийНомер = КопияТаблицы[0][мИмяПоляНомерГруппы];
	Иначе
		ПоследнийНомер = 0;
	КонецЕсли;
	ЭлементыФормы.НайденныеГруппы.ТекущаяСтрока[мИмяПоляНомерГруппы] = ПоследнийНомер + 1;
	ОбновитьРамкуГруппыНайденныеГруппы();
	
КонецПроцедуры

Процедура НайденныеГруппыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		Если НоваяСтрока Тогда
			ПриДобавленииНовойГруппы();
		КонецЕсли; 
		ВывестиГруппу(Элемент.ТекущаяСтрока);
	КонецЕсли; 

КонецПроцедуры

Процедура ЗависимыеОбъектыПриАктивизацииСтроки(Элемент)
	
	Элемент.Колонки.Правильный.ЭлементУправления.КнопкаВыбора = (Элемент.ТекущаяСтрока.Уровень() = 2);
	Элемент.Колонки.Правильный.ТолькоПросмотр   = (Элемент.ТекущаяСтрока.Уровень() = 0);
	Элемент.Колонки.НеПравильный.ТолькоПросмотр = (Элемент.ТекущаяСтрока.Уровень() = 0);
	
КонецПроцедуры

Процедура КоманднаяПанельЭлементыТекущейГруппыДобавитьПустуюСсылку(Кнопка)

	ВыбранноеЗначение = ирОбщий.ПолучитьМенеджерЛкс(мМетаданныеОбъекта).ПустаяСсылка();
	НоваяСтрокаНайденных = ЭлементыТекущейГруппы.Найти(ВыбранноеЗначение, "Ссылка");
	Если НоваяСтрокаНайденных = Неопределено Тогда
		Если Не ПроверитьНаличиеЭлементаПередДобавлением(ВыбранноеЗначение) Тогда
			Возврат;
		КонецЕсли; 
		НоваяСтрокаНайденных = ЭлементыТекущейГруппы.Добавить();
		НоваяСтрокаНайденных.Ссылка = ВыбранноеЗначение;
		НоваяСтрокаНайденных[мИмяФлагаПравильныйЭлемент] = Ложь;
		НоваяСтрокаНайденных[мИмяПоляНомерГруппы] = мТекущаяГруппа[мИмяПоляНомерГруппы];
		ОбновитьСтрокуРезультатовПоиска(НоваяСтрокаНайденных);
		ОбновитьТекущуюГруппуРезультатовПоиска();
	КонецЕсли; 
	ЭлементыФормы.ЭлементыТекущейГруппы.ТекущаяСтрока = НоваяСтрокаНайденных;
		
КонецПроцедуры

Процедура ЭлементыТекущейГруппыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбраннаяСтрока.Ссылка) Тогда
		ОткрытьЗначение(ВыбраннаяСтрока.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеГруппыШиринаКолонок(Кнопка)
	
	ирОбщий.ВвестиИУстановитьШиринуКолонокТабличногоПоляЛкс(ЭлементыФормы.НайденныеГруппы);
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеГруппыСжатьКолонки(Кнопка)
	
	ирОбщий.СжатьКолонкиТабличногоПоляЛкс(ЭлементыФормы.НайденныеГруппы);
	
КонецПроцедуры

Процедура КоманднаяПанельЭлементыТекущейГруппыСжатьКолонки(Кнопка)
	
	ирОбщий.СжатьКолонкиТабличногоПоляЛкс(ЭлементыФормы.ЭлементыТекущейГруппы);
	
КонецПроцедуры

Процедура КоманднаяПанельЭлементыТекущейГруппыШиринаКолонок(Кнопка)
	
	ирОбщий.ВвестиИУстановитьШиринуКолонокТабличногоПоляЛкс(ЭлементыФормы.ЭлементыТекущейГруппы);

КонецПроцедуры

Процедура НайденныеГруппыПослеУдаления(Элемент)
	
	ОбновитьРамкуГруппыНайденныеГруппы();
	//Если мТекущаяГруппа = Неопределено Тогда
	//	ВывестиГруппу(Элемент.ТекущаяСтрока);
	//КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельОПодсистеме(Кнопка)
	ирОбщий.ОткрытьСправкуПоПодсистемеЛкс(ЭтотОбъект);
КонецПроцедуры

Процедура ГлавнаяКоманднаяПанельНовоеОкно(Кнопка)
	
	ирОбщий.ОткрытьНовоеОкноОбработкиЛкс(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ирОбщий.ОбновитьЗаголовкиСтраницПанелейЛкс(ЭтаФорма);
	ОбновитьДоступностьКнопокВпередНазадНайденныхГрупп();
	ЭлементыФормы.ОтборУровняЦенности.Доступность = мТекущаяСтрокаУровняЦенности <> Неопределено;
	СохранитьОтборТекущегоУровняЦенности();
	
КонецПроцедуры

Процедура ОтборЗначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирОбщий.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбновитьСчетчикиПравилЗамены()

	Для Каждого СтрокаЗамены Из ПравилаЗаменыСсылок Цикл
		Если СтрокаЗамены.Пометка Тогда
			СтрокаЗамены.НайденоОбъектов = ЭтотОбъект.НайденныеСсылки.НайтиСтроки(Новый Структура("Ссылка", СтрокаЗамены.ЧтоЗаменять)).Количество();
		Иначе
			СтрокаЗамены.НайденоОбъектов = 0;
		КонецЕсли; 
		Если СтрокаЗамены.Пометка Тогда
			СтрокаЗамены.ПомеченоОбъектов = ЭтотОбъект.НайденныеСсылки.НайтиСтроки(Новый Структура("Ссылка, Пометка", СтрокаЗамены.ЧтоЗаменять, Истина)).Количество();
		Иначе
			СтрокаЗамены.ПомеченоОбъектов = 0;
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьПоискЗаменяемыхСсылок()

	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.ПравилаЗаменыСсылок;
	
	Для Каждого СтрокаПравила Из ПравилаЗаменыСсылок Цикл
		Если Ложь
			Или СтрокаПравила.ЧтоЗаменять = Неопределено
			Или ТипЗнч(СтрокаПравила.ЧтоЗаменять) = Тип("Строка") 
		Тогда
			СтрокаПравила.Пометка = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	КопияЗамен = ПравилаЗаменыСсылок.Скопировать(Новый Структура("Пометка", Истина));
	МассивЗаменяемых = КопияЗамен.ВыгрузитьКолонку("ЧтоЗаменять");
	
	МассивНеуникальных = ирОбщий.ПолучитьНеуникальныеЗначенияКолонкиТаблицыЛкс(КопияЗамен, "ЧтоЗаменять");
	Для Каждого НеуникальноеЗначение Из МассивНеуникальных Цикл
		Сообщить("Заменяемая ссылка """ + НеуникальноеЗначение + """ встречается более одного раза в выбранных правилах", СтатусСообщения.Внимание);
	КонецЦикла; 
	Если МассивНеуникальных.Количество() > 0 Тогда
		Возврат;
	КонецЕсли; 
	Если МассивЗаменяемых.Количество() = 0 Тогда
		Предупреждение("Не выбрано ни одного правила замены!");
		Возврат;
	КонецЕсли;
	
	мОбработкаПоискаСсылок.ОбновитьНайденныеСсылки(МассивЗаменяемых, Ложь);
	ЭтотОбъект.НайденныеСсылки.Загрузить(мОбработкаПоискаСсылок.НайденныеСсылки.Выгрузить());
	ЭтаФорма.КоличествоНайденныхСсылок = ЭтотОбъект.НайденныеСсылки.Количество();
	ОбновитьСчетчикиПравилЗамены();
	ПрочитатьДополнительныеПоляСсылающихсяОбъектов();

КонецПроцедуры // ВыполнитьПоискЗаменяемыхСсылок()

Функция ПрочитатьДополнительныеПоляСсылающихсяОбъектов() Экспорт
	
	//МетаДокументы = Метаданные.Документы;
	КомпоновщикДопПолей.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	КолонкаДатаДокумента = ЭлементыФормы.НайденныеСсылки.Колонки.ДатаДокумента;
	МассивДопПолей = Новый Структура();
	ДопустимоеЧислоДопПолей = 5;
	Счетчик = 1;
	СтрокаПорядка = "";
	Для Каждого ПолеПорядка Из КомпоновщикДопПолей.Настройки.Порядок.Элементы Цикл
		Если ПолеПорядка.Использование Тогда
			ИмяПоля = "" + ПолеПорядка.Поле;
			ИмяКолонки = "Реквизит" + Счетчик;
			ДоступноеПоле = КомпоновщикДопПолей.Настройки.ДоступныеПоляПорядка.НайтиПоле(ПолеПорядка.Поле);
			Если Счетчик > ДопустимоеЧислоДопПолей Тогда
				Сообщить("Дополнительное поле """ + ДоступноеПоле.Заголовок + """ пропущено, т.к. допускается не более " + ДопустимоеЧислоДопПолей + " полей");
				Продолжить;
			КонецЕсли; 
			МассивДопПолей.Вставить(ИмяКолонки, ИмяПоля);
			КолонкаТП = ЭлементыФормы.НайденныеСсылки.Колонки[ИмяКолонки];
			КолонкаТП.Видимость = Истина;
			КолонкаТП.ТекстШапки = ДоступноеПоле.Заголовок;
			Если СтрокаПорядка <> "" Тогда
				СтрокаПорядка = СтрокаПорядка + ",";
			КонецЕсли; 
			СтрокаПорядка = СтрокаПорядка + ИмяКолонки + " ";
			Если ПолеПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
				СтрокаПорядка = СтрокаПорядка + "Возр";
			Иначе
				СтрокаПорядка = СтрокаПорядка + "Убыв";
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЕсли; 
	КонецЦикла;
	Для Счетчик = Счетчик По ДопустимоеЧислоДопПолей Цикл
		ИмяКолонки = "Реквизит" + Счетчик;
		КолонкаТП = ЭлементыФормы.НайденныеСсылки.Колонки[ИмяКолонки];
		КолонкаТП.Видимость = Ложь;
	КонецЦикла;
		
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ЭтотОбъект.НайденныеСсылки.Количество(), "Чтение дополнительных полей");
	Для Каждого СтрокаОбъекта Из ЭтотОбъект.НайденныеСсылки Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		Если ТипЗнч(СтрокаОбъекта.Данные) = Тип("Строка") Тогда
			ОбъектСодержащийСсылку = ЗначениеИзСтрокиВнутр(СтрокаОбъекта.Данные);
		ИначеЕсли СтрокаОбъекта.Данные = Неопределено Тогда
			ОбъектСодержащийСсылку = СтрокаОбъекта.Метаданные;
		Иначе
			ОбъектСодержащийСсылку = СтрокаОбъекта.Данные;
		КонецЕсли; 
		СтрокаОбъекта.КартинкаСсылки = ирОбщий.ПолучитьИндексКартинкиСсылкиЛкс(ОбъектСодержащийСсылку, Истина);
		Для Каждого КлючИЗначение Из МассивДопПолей Цикл
			Попытка
				ЗначениеПоля = Вычислить("ОбъектСодержащийСсылку." + КлючИЗначение.Значение);
			Исключение
				Продолжить;
			КонецПопытки;
			СтрокаОбъекта[КлючИЗначение.Ключ] = ЗначениеПоля;
		КонецЦикла;
		Попытка
			ДатаДокумента = ОбъектСодержащийСсылку.Дата;
		Исключение
			ДатаДокумента = Неопределено;
		КонецПопытки;
		СтрокаОбъекта.ДатаДокумента = ДатаДокумента;
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	ЭтотОбъект.НайденныеСсылки.Сортировать("Метаданные," + СтрокаПорядка);
	
КонецФункции

Процедура КоманднаяПанельЗаменаСсылокПоискСсылок(Кнопка)
	
	ВыполнитьПоискЗаменяемыхСсылок();

КонецПроцедуры

Процедура КоманднаяПанельНайденныеСсылкиВключитьВсе(Кнопка)
	
	ирОбщий.ИзменитьПометкиВыделенныхСтрокЛкс(ЭлементыФормы.НайденныеСсылки, , Истина);
	ОбновитьСчетчикиПравилЗамены();
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеСсылкиВыключитьВсе(Кнопка)
	
	ирОбщий.ИзменитьПометкиВыделенныхСтрокЛкс(ЭлементыФормы.НайденныеСсылки, , Ложь);
	ОбновитьСчетчикиПравилЗамены();

КонецПроцедуры

Процедура ЗаменыСсылокПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		Элемент.ТекущаяСтрока.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельЗаменаСсылокПереставить(Кнопка)
	
	Для Каждого СтрокаЗамены Из ЭлементыФормы.ПравилаЗаменыСсылок.ВыделенныеСтроки Цикл
		Буфер = СтрокаЗамены.ЧтоЗаменять;
		СтрокаЗамены.ЧтоЗаменять = СтрокаЗамены.НаЧтоЗаменять;
		СтрокаЗамены.НаЧтоЗаменять = Буфер;
		СтрокаЗамены.ЗаменитьДанныеОбъекта = Ложь;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаменыСсылокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ОтобразитьПустыеЗначенияВЯчейкахТабличногоПоля(ОформлениеСтроки, "ЧтоЗаменять, НаЧтоЗаменять");
	Если ТипЗнч(ДанныеСтроки.ЧтоЗаменять) <> ТипЗнч(ДанныеСтроки.НаЧтоЗаменять) Тогда
		ОформлениеСтроки.Ячейки.Комментарий.УстановитьТекст("Типы ссылок отличаются! Замены в некоторых местах могут быть невозможны");
		ОформлениеСтроки.Ячейки.Комментарий.ЦветФона = WebЦвета.Розовый;
	КонецЕсли; 

КонецПроцедуры

Процедура ЗаменыСсылокЧтоЗаменятьПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ПравилаЗаменыСсылок.ТекущиеДанные;
	Если Истина
		И ТекущиеДанные.НаЧтоЗаменять = Неопределено 
		И Элемент.Значение <> Неопределено
	Тогда
		ТекущиеДанные.НаЧтоЗаменять = Новый (ТипЗнч(Элемент.Значение));
	КонецЕсли; 
	ТекущиеДанные.НайденоОбъектов = 0;
	ТекущиеДанные.ПомеченоОбъектов = 0;

КонецПроцедуры

Процедура ЗаменыСсылокЧтоЗаменятьОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирОбщий.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка, , Истина);
	
КонецПроцедуры

Процедура НайденныеСсылкиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.ТекущиеДанные.Данные) = Тип("Строка") Тогда 
		СсылающийсяОбъект = ЗначениеИзСтрокиВнутр(Элемент.ТекущиеДанные.Данные);
	Иначе
		СсылающийсяОбъект = Элемент.ТекущиеДанные.Данные;
	КонецЕсли;
	ирОбщий.ОткрытьСсылкуИзРезультатаПоискаСсылокЛкс(СсылающийсяОбъект, ВыбраннаяСтрока.Метаданные);

КонецПроцедуры

Процедура КоманднаяПанельНайденныеСсылкиВключитьПоТипам(Кнопка)
	
	ДоступныеОбъекты = ЭтотОбъект.НайденныеСсылки.Выгрузить();
	ДоступныеОбъекты.Свернуть("Метаданные");
	ДоступныеОбъекты = ДоступныеОбъекты.ВыгрузитьКолонку("Метаданные");
	Форма = мПлатформа.ПолучитьФорму("ВыборОбъектаМетаданных", ЭтаФорма, ЭтаФорма);
	лСтруктураПараметров = Новый Структура;
	лСтруктураПараметров.Вставить("ОтображатьСсылочныеОбъекты", Истина);
	лСтруктураПараметров.Вставить("ОтображатьРегистры", Истина);
	лСтруктураПараметров.Вставить("ОтображатьКонстанты", Истина);
	лСтруктураПараметров.Вставить("МножественныйВыбор", Истина);
	лСтруктураПараметров.Вставить("ДоступныеОбъекты", ДоступныеОбъекты);
	Форма.НачальноеЗначениеВыбора = лСтруктураПараметров;
	ЗначениеВыбора = Форма.ОткрытьМодально();
	Если ЗначениеВыбора <> Неопределено Тогда
		Для Каждого ПолноеИмяМД Из ЗначениеВыбора Цикл
			ОбъектМД = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМД);
			НайденныеСтроки = ЭтотОбъект.НайденныеСсылки.НайтиСтроки(Новый Структура("Метаданные, Пометка", ПолноеИмяМД, Ложь));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Пометка = Истина;
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли; 
	ОбновитьСчетчикиПравилЗамены();
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеСсылкиВключитьПоПериоду(Кнопка)
	
	НачалоПериода = НачалоГода(ТекущаяДата());
	КонецПериода = КонецГода(ТекущаяДата());
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='0001-01-01', КонецПериода, КонецДня(КонецПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		НачалоПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонецПериода = НастройкаПериода.ПолучитьДатуОкончания();
		КонецПериода = ?(КонецПериода = Дата(1,1,1), КонецГода(ТекущаяДата()), КонецПериода);
		Для Каждого СтрокаОбъекта Из ЭтотОбъект.НайденныеСсылки Цикл
			Если Истина
				И СтрокаОбъекта.ДатаДокумента >= НачалоПериода
				И СтрокаОбъекта.ДатаДокумента <= КонецПериода
			Тогда
				СтрокаОбъекта.Пометка = Истина;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	ОбновитьСчетчикиПравилЗамены();
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеСсылкиРедакторОбъектаБД(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.НайденныеСсылки.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	мОбработкаПоискаСсылок.ОткрытьСсылающийсяОбъектВРедактореОбъектаБД(ТекущаяСтрока);
	
КонецПроцедуры

Процедура НайденныеСсылкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ОтобразитьПустыеЗначенияВЯчейкахТабличногоПоля(ОформлениеСтроки, "Ссылка");
	Ячейки = ОформлениеСтроки.Ячейки;
	Если Лев(ДанныеСтроки.Метаданные, 15) = "РегистрСведений" Тогда
		Ячейки.Данные.Текст = ЗначениеИзСтрокиВнутр(Ячейки.Данные.Текст);
	КонецЕсли;
	Ячейки.КартинкаСсылки.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.КартинкаСсылки > -1 Тогда 
		Ячейки.КартинкаСсылки.ИндексКартинки = ДанныеСтроки.КартинкаСсылки;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаменыСсылокПриАктивизацииСтроки(Элемент)
	
	Если мОтборТекущемуПоПравилу Тогда
		ОбновитьОтборПоТекущемуПравилу();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьОтборПоТекущемуПравилу()

	ТекущееПравило = ЭлементыФормы.ПравилаЗаменыСсылок.ТекущаяСтрока;
	Если ТекущееПравило <> Неопределено Тогда
		ЗначениеОтбора = ТекущееПравило.ЧтоЗаменять;
	Иначе
		ЗначениеОтбора = Неопределено;
	КонецЕсли; 
	ЭлементыФормы.НайденныеСсылки.ОтборСтрок.Ссылка.Использование = Истина;
	ЭлементыФормы.НайденныеСсылки.ОтборСтрок.Ссылка.Значение = ЗначениеОтбора;
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеСсылкиОтборПоТекущейЗамене(Кнопка)
	
	мОтборТекущемуПоПравилу = Не Кнопка.Пометка;
	Кнопка.Пометка = мОтборТекущемуПоПравилу;
	Если Не мОтборТекущемуПоПравилу Тогда
		ЭлементыФормы.НайденныеСсылки.ОтборСтрок.Ссылка.Использование = Ложь;
	Иначе
		ОбновитьОтборПоТекущемуПравилу();
	КонецЕсли; 
	
КонецПроцедуры

Процедура НайденныеСсылкиПриИзмененииФлажка(Элемент, Колонка)
	
	ОбновитьСчетчикиПравилЗамены();

КонецПроцедуры

Процедура КоманднаяПанельНайденныеСсылкиМенеджерТабличногоПоля(Кнопка)
	
	 ирОбщий.ПолучитьФормуЛкс("Обработка.ирМенеджерТабличногоПоля.Форма",, ЭтаФорма, ).УстановитьСвязь(ЭтаФорма.ЭлементыФормы.НайденныеСсылки);

КонецПроцедуры

Процедура КоманднаяПанельЗаменаСсылокМенеджерТабличногоПоля(Кнопка)
	
	 ирОбщий.ПолучитьФормуЛкс("Обработка.ирМенеджерТабличногоПоля.Форма",, ЭтаФорма, ).УстановитьСвязь(ЭтаФорма.ЭлементыФормы.ПравилаЗаменыСсылок);
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеГруппыКонсольКомпоновки(Кнопка)
	
	НаборыДанныхОбъекты = Новый Структура("НайденныеГруппы, РезультатыПоиска", НайденныеГруппы, мРезультатыПоиска);
	СхемаКомпоновкиДанных = ирОбщий.СоздатьСхемуПоТаблицамЗначенийЛкс(НаборыДанныхОбъекты);
	#Если _ Тогда
		СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	#КонецЕсли
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	ирОбщий.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(НастройкиКомпоновки.Выбор, "Ссылка");
	ирОбщий.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(НастройкиКомпоновки.Выбор, мИмяПоляКоличествоСсылок);
	ирОбщий.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(НастройкиКомпоновки.Выбор, "КоличествоСтрокАвто");
	// Из-за сложного сопоставления имен не будет работать
	//Для Каждого Колонка Из ЭлементыФормы.ЭлементыТекущейГруппы.Колонки Цикл
	//	Если Колонка.Видимость Тогда
	//		ирОбщий.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(НастройкиКомпоновки.Выбор, Сред(Колонка.Имя, СтрДлина(мПрефиксКолонокРеквизитов)));
	//	КонецЕсли; 
	//КонецЦикла; 
	ЭлементСтруктуры = ирОбщий.НайтиДобавитьЭлементСтруктурыГруппировкаКомпоновкиЛкс(НастройкиКомпоновки.Структура, "");
	Если мПоляСравнения.Количество() > 0 Тогда
		Для Каждого ПолеСравнения Из НайденныеГруппы.Колонки Цикл
			ПолеГруппировки = ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование = Истина;
			ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ПолеСравнения.Имя);
			Если мРезультатыПоиска.Колонки.Найти(ПолеСравнения.Имя) <> Неопределено Тогда
				Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
				Связь.НаборДанныхИсточник = "РезультатыПоиска";
				Связь.ВыражениеИсточник = ПолеСравнения.Имя;
				Связь.НаборДанныхПриемник = "НайденныеГруппы";
				Связь.ВыражениеПриемник = ПолеСравнения.Имя;
			КонецЕсли; 
		КонецЦикла;
		ЭлементСтруктурыДетальныхЗаписей = ирОбщий.НайтиДобавитьЭлементСтруктурыГруппировкаКомпоновкиЛкс(ЭлементСтруктуры.Структура, "");
	КонецЕсли;
	ЭлементОформления = НастройкиКомпоновки.УсловноеОформление.Элементы.Добавить();
	ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(ЭлементОформления.Отбор, мИмяФлагаПравильныйЭлемент, Истина);
	ЗначениеПараметра = ЭлементОформления.Оформление.Элементы.Найти("Шрифт");
	ЗначениеПараметра.Значение = Новый Шрифт(,,Истина);
	ЗначениеПараметра.Использование = Истина;
	КонсольКомпоновокДанных = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Отчет.ирКонсольКомпоновокДанных");
	#Если _ Тогда
		КонсольКомпоновокДанных = Отчеты.ирКонсольКомпоновокДанных.Создать();
	#КонецЕсли
    КонсольКомпоновокДанных.ОткрытьДляОтладки(СхемаКомпоновкиДанных, НастройкиКомпоновки, НаборыДанныхОбъекты, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеСсылкиКонсольКомпоновки(Кнопка)
	
	Отчеты.ирКонсольКомпоновокДанных.Создать().ОткрытьПоТаблицеЗначений(ЭтотОбъект.НайденныеСсылки.Выгрузить());

КонецПроцедуры

Процедура КоманднаяПанельНайденныеСсылкиОтборБезЗначенияВТекущейКолонке(Кнопка)
	
	ирОбщий.ТабличноеПоле_ОтборБезЗначенияВТекущейКолонке_КнопкаЛкс(ЭлементыФормы.НайденныеСсылки);

КонецПроцедуры

Процедура ПолноеИмяОбъектаПриИзменении(Элемент)
	
	ПриУстановкеПолногоИмениОбъекта();
	ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура ПолноеИмяОбъектаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ПолноеИмяОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		лПолноеИмяОбъекта = Неопределено;
		Если ВыбранноеЗначение.Свойство("ПолноеИмяОбъекта", лПолноеИмяОбъекта) Тогда
			Элемент.Значение = лПолноеИмяОбъекта;
			ПолноеИмяОбъектаПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если мНастройкиВосстановлены <> Истина Тогда
		ПослеВосстановленияЗначений();
	КонецЕсли;

КонецПроцедуры

Процедура НайденныеГруппыПриАктивизацииСтроки(Элемент)
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	ВывестиГруппу(Элемент.ТекущаяСтрока);

КонецПроцедуры

Процедура КоманднаяПанельЭлементыТекущейГруппыВыборПравильныхДанных(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ЭлементыТекущейГруппы.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = ЭлементыТекущейГруппы.Найти(Истина, мИмяФлагаПравильныеДанные);
	Если Истина
		И СтрокаТаблицы <> Неопределено
		И СтрокаТаблицы <> ТекущаяСтрока
	Тогда
		СтрокаТаблицы[мИмяФлагаПравильныеДанные] = СтрокаТаблицы = ТекущаяСтрока;
	КонецЕсли;
	ТекущаяСтрока[мИмяФлагаПравильныеДанные] = Не ТекущаяСтрока[мИмяФлагаПравильныеДанные];
	СброситьДоступность();
	ОбновитьТекущуюГруппуРезультатовПоиска();

КонецПроцедуры

Процедура КоманднаяПанельЭлементыТекущейГруппыАвтовидимостьКолонок(Кнопка)
	
	ЭтаФорма.АвтовидимостьКолонокСоставаГруппы = Не Кнопка.Пометка;
	ПриИзмененииАвтовидимостьКолонокСоставаГруппы();
	
КонецПроцедуры

Процедура ПриИзмененииАвтовидимостьКолонокСоставаГруппы()
	
	ЭлементыФормы.КоманднаяПанельЭлементыТекущейГруппы.Кнопки.АвтовидимостьКолонок.Пометка = АвтовидимостьКолонокСоставаГруппы;
	Если АвтовидимостьКолонокСоставаГруппы Тогда
		// Включаем видимость тех колонок реквизитов, в каких есть различия между элементами группы, а у остальных выключаем
		Если ЭлементыТекущейГруппы.Количество() > 1 Тогда
			Для Каждого КолонкаТП Из ЭлементыФормы.ЭлементыТекущейГруппы.Колонки Цикл
				Если Ложь
					Или ирОбщий.СтрокиРавныЛкс(КолонкаТП.Данные, мПрефиксКолонокРеквизитов + "ВерсияДанных")
					Или ирОбщий.СтрокиРавныЛкс(КолонкаТП.Данные, мИмяПоляКоличествоСсылок)
					Или ЭлементыТекущейГруппы.Колонки.Найти(КолонкаТП.Данные) = Неопределено 
				Тогда
					Продолжить;
				КонецЕсли; 
				ПервоеЗначение = ЭлементыТекущейГруппы[0][КолонкаТП.Данные];
				Для Индекс = 1 По ЭлементыТекущейГруппы.Количество() - 1 Цикл
					ТекущееЗначение = ЭлементыТекущейГруппы[Индекс][КолонкаТП.Данные];
					Если ПервоеЗначение <> ТекущееЗначение Тогда
						Прервать;
					КонецЕсли; 
				КонецЦикла;
				КолонкаТП.Видимость = ПервоеЗначение <> ТекущееЗначение;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЦенностьДанныхПриАктивизацииСтроки(Элемент)
	
	СохранитьОтборТекущегоУровняЦенности();
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		НастройкаКомпоновкиXML = Элемент.ТекущаяСтрока.НастройкаКомпоновкиXML;
		НастройкиУровняЦености = ирОбщий.ВосстановитьНастройкуКомпоновкиИзСтрокиXMLЛкс(НастройкаКомпоновкиXML);
	Иначе
		НастройкиУровняЦености = Новый НастройкиКомпоновкиДанных;
	КонецЕсли; 
	КомпоновщикЦенности.ЗагрузитьНастройки(НастройкиУровняЦености);
	мТекущаяСтрокаУровняЦенности = Элемент.ТекущаяСтрока;
	
КонецПроцедуры

Процедура СохранитьОтборТекущегоУровняЦенности()

	Если мТекущаяСтрокаУровняЦенности <> Неопределено Тогда
		Если ШкалаЦенности.Индекс(мТекущаяСтрокаУровняЦенности) = -1 Тогда
			Возврат;
		КонецЕсли; 
		мТекущаяСтрокаУровняЦенности.НастройкаКомпоновкиXML = ирОбщий.СохранитьОбъектВВидеСтрокиXMLЛкс(КомпоновщикЦенности.ПолучитьНастройки());
		мТекущаяСтрокаУровняЦенности.Уровень = КомпоновщикЦенности.Настройки.Отбор;
		Если мТекущаяСтрокаУровняЦенности.Уровень = "" Тогда
			мТекущаяСтрокаУровняЦенности.Уровень = "<Отбор не задан>"
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельТаблицаПустые(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементыФормы.ЭлементыТекущейГруппы.ОбновитьСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельЭлементыТекущейГруппыДобавитьПолеКолонкиВСравнение(Кнопка)
	
	ТекущаяКолонка = ЭлементыФормы.ЭлементыТекущейГруппы.ТекущаяКолонка;
	Если ТекущаяКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ИмяКолонки = ТекущаяКолонка.Имя;
	Если Найти(ИмяКолонки, мПрефиксКолонокРеквизитов) = 1 Тогда
		ПолеПорядка = ирОбщий.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(КомпоновщикДублей.Настройки.Порядок, Сред(ИмяКолонки, СтрДлина(мПрефиксКолонокРеквизитов) + 1));
		ПолеПорядка.Использование = Истина;
		Сообщить("В сравнение поиска дублей добавлено поле """ + ТекущаяКолонка.ТекстШапки + """");
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельЭлементыТекущейГруппыОтборПоЗначению(Кнопка)
	
	ТекущаяКолонка = ЭлементыФормы.ЭлементыТекущейГруппы.ТекущаяКолонка;
	Если ТекущаяКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ТекущаяСтрока = ЭлементыФормы.ЭлементыТекущейГруппы.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ИмяКолонки = ТекущаяКолонка.Данные;
	Если Найти(ИмяКолонки, мПрефиксКолонокРеквизитов) = 1 Тогда
		ЭлементОтбора = ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(КомпоновщикДублей.Настройки.Отбор,
			Сред(ИмяКолонки, СтрДлина(мПрефиксКолонокРеквизитов) + 1), ТекущаяСтрока[ИмяКолонки], ВидСравнения.Равно);
		Сообщить("В отбор поиска дублей добавлен элемент """ + ЭлементОтбора.ЛевоеЗначение + " равно " + ЭлементОтбора.ПравоеЗначение + """");
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПанельСсылающиесяОбъектыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПанельСсылок = ЭлементыФормы.ПанельСсылающиесяОбъекты;
	Если ПанельСсылок.ТекущаяСтраница = ПанельСсылок.Страницы.ДополнительныеПоля Тогда
		Если КомпоновщикДопПолей.Настройки.ДоступныеПоляПорядка.Элементы.Количество() = 0 Тогда
			ПолныеИменаМД = ЭтотОбъект.НайденныеСсылки.Выгрузить(, "Метаданные");
			ПолныеИменаМД.Свернуть("Метаданные");
			ПолныеИменаМД = ПолныеИменаМД.ВыгрузитьКолонку(0);
			МассивТипов = Новый Массив();
			Для Каждого ПолноеИмяМД Из ПолныеИменаМД Цикл
				Попытка
					Тип = Тип(СтрЗаменить(ПолноеИмяМД, ".", "Ссылка."));
				Исключение
					Продолжить;
				КонецПопытки;
				МассивТипов.Добавить(Тип);
			КонецЦикла;
			Если МассивТипов.Количество() > 0 Тогда
				КоллекцияПолей = Новый Массив();
				КоллекцияПолей.Добавить(Новый Структура("Имя, ТипЗначения", "Ссылка", Новый ОписаниеТипов(МассивТипов)));
				ТекстЗапроса = ирОбщий.ПолучитьЗапросИмитаторКоллекцииПолейЛкс(КоллекцияПолей);
				СхемаКомпоновки = ирОбщий.ПолучитьСхемуКомпоновкиПоЗапросуЛкс(ТекстЗапроса); 
			Иначе
				СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
			КонецЕсли; 
			КомпоновщикДопПолей.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
			Если КомпоновщикДопПолей.Настройки.ДоступныеПоляПорядка.Элементы.Количество() > 0 Тогда
				ЭлементыФормы.ДоступныеПоляДополнительныхПолей.Развернуть(КомпоновщикДопПолей.Настройки.ДоступныеПоляПорядка.Элементы[0]);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДополнительныеПоляПрочитатьПоля(Кнопка)
	
	ПрочитатьДополнительныеПоляСсылающихсяОбъектов();

КонецПроцедуры

Процедура ПриПолученииДанныхДоступныхПолей(Элемент, ОформленияСтрок)

	ирОбщий.ПриПолученииДанныхДоступныхПолейКомпоновкиЛкс(ОформленияСтрок);

КонецПроцедуры // ПриПолученииДанныхДоступныхПолей()

Процедура СтруктураКоманднойПанелиНажатие(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруКоманднойПанелиЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Функция ПолучитьСтруктуруНастроекОбработки()
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	КопияРезультатов = мРезультатыПоиска.Скопировать();
	КопияРезультатов.Колонки.Удалить(мИмяПоляКоличествоСсылок);
	СтруктураНастроек.Вставить("РезультатыПоиска", КопияРезультатов);
	СтруктураНастроек.Вставить("НайденныеГруппы", НайденныеГруппы);
	СтруктураНастроек.Вставить("ПравилаЗаменыСсылок", ПравилаЗаменыСсылок);
	СтруктураНастроек.Вставить("Настройки", ПравилаЗаменыСсылок);
	СтруктураНастроек.Вставить("СтруктураНастроекПоискаДублей", ПолучитьСтруктуруНастроекПоискаДублей());
	Возврат СтруктураНастроек;

КонецФункции

Процедура ЗагрузитьНастройкиИзСтруктуры(СтруктураНастроек)
	
	ЭтотОбъект.ПолноеИмяОбъекта = СтруктураНастроек.ПолноеИмяОбъекта;
	ПриУстановкеПолногоИмениОбъекта();
	ОчиститьРезультатыПоиска();
	ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СтруктураНастроек.РезультатыПоиска, мРезультатыПоиска);
	ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СтруктураНастроек.НайденныеГруппы, НайденныеГруппы);
	НастроитьЭлементыФормыПоРезультатуПоиска();
	ПравилаЗаменыСсылок.Очистить();
	ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СтруктураНастроек.ПравилаЗаменыСсылок, ПравилаЗаменыСсылок);
	ЗагрузитьНастройкиПоискаДублей(СтруктураНастроек.СтруктураНастроекПоискаДублей);
	
КонецПроцедуры

Процедура КоманднаяПанельОткрытьФайл(Кнопка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите файл для загрузки настроек обработки";
	ДиалогВыбораФайла.Фильтр = ирОбщий.ПолучитьСтрокуФильтраДляВыбораФайлаЛкс("fdr", "Файл поиска дублей и замены ссылок");
	ДиалогВыбораФайла.Расширение = "fdr";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Поток = Новый ЧтениеXML;
		Поток.ОткрытьФайл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Попытка
			СтруктураНастроек = СериализаторXDTO.ПрочитатьXML(Поток);
		Исключение
			Сообщить("Ошибка чтения настроек из файла: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки; 
		Поток.Закрыть();
		ЗагрузитьНастройкиИзСтруктуры(СтруктураНастроек);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСохранить(Кнопка)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = "Укажите файл для сохранения настроек обработки";
	ДиалогВыбораФайла.Фильтр = ирОбщий.ПолучитьСтрокуФильтраДляВыбораФайлаЛкс("fdr", "Файл поиска дублей и замены ссылок");
	ДиалогВыбораФайла.Расширение = "fdr";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		СтруктураНастроек = ПолучитьСтруктуруНастроекОбработки();
		Поток = Новый ЗаписьXML;
		Поток.ОткрытьФайл(ДиалогВыбораФайла.ПолноеИмяФайла,);
		СериализаторXDTO.ЗаписатьXML(Поток, СтруктураНастроек);
		Поток.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеГруппыОбновитьКоличествоСсылок(Кнопка)
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	ОпределитьКоличествоСсылок();
	ВывестиГруппу();
	
КонецПроцедуры

Процедура КоманднаяПанельЭлементыТекущейГруппыРедакторОбъектаБДСтроки(Кнопка)
	
	Если ЭлементыФормы.ЭлементыТекущейГруппы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ирОбщий.ОткрытьСсылкуВРедактореОбъектаБДЛкс(ЭлементыФормы.ЭлементыТекущейГруппы.ТекущаяСтрока.Ссылка);
	
КонецПроцедуры

Процедура ПравилаЗаменыСсылокПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка = Элемент.Колонки.ЗаменитьДанныеОбъекта Тогда
		ПравилаКонкуренты = ПравилаЗаменыСсылок.НайтиСтроки(Новый Структура("НаЧтоЗаменять", Элемент.ТекущаяСтрока.НаЧтоЗаменять));
		Для Каждого ПравилоЗамены Из ПравилаКонкуренты Цикл
			Если ПравилоЗамены <> Элемент.ТекущаяСтрока Тогда
				ПравилоЗамены.ЗаменитьДанныеОбъекта = Ложь;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирПоискДублейИЗаменаСсылок.Форма.Форма");

ирОбщий.ПодключитьОбработчикиСобытийДоступныхПолейКомпоновкиЛкс(ЭлементыФормы.ДоступныеПоля);
ирОбщий.ПодключитьОбработчикиСобытийДоступныхПолейКомпоновкиЛкс(ЭлементыФормы.ДоступныеПоляДополнительныхПолей);

АвтовидимостьКолонокСоставаГруппы = Истина;
мОтборТекущемуПоПравилу = Ложь;
мПутьКДаннымПоляНечеткогоСравнения = "";
мПрефиксКолонокРеквизитов = "Р_";
мПредставления = Новый Структура;
мСписокРеквизитов = Новый СписокЗначений;
мОбработкаПоискаСсылок = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирПоискСсылокНаОбъект");
НастройкиПоискаДублей = Новый Соответствие;
//ШкалаЦенности.Колонки.Добавить("НастройкаКомпоновкиXML");
//мПсевдонимТаблицы = мПлатформа.ПолучитьНовоеУникальноеИмя();
мПсевдонимТаблицы = "Т3463";
мИмяПоляКоличествоСсылок = "КоличествоСсылок3463";
мИмяПоляЦенность = "ЦенностьДанных3463";
мИмяПоляКоличествоЭлементов = "КоличествоЭлементовВГруппе3463";
мИмяПоляИдентификатор = "Идентификатор3463";
мИмяПоляНомерГруппы = "НомерГруппы3463";
мИмяПоляКоличествоСсылок = "КоличествоСсылок3463";
мИмяПоляНеправильныеСсылки = "НеправильныеСсылки3463";
мИмяПоляПравильныйЭлемент = "ПравильныйЭлемент3463";
мИмяПоляПравильныеДанные = "ПравильныеДанные3463";
мИмяФлагаПравильныйЭлемент = "ПравильныйЭлемент3463";
мИмяФлагаПравильныеДанные = "ПравильныеДанные3463";
УстановитьПредставленияСлужебныхПолей();
