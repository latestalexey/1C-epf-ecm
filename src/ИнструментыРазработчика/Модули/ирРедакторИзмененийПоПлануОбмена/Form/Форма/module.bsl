Перем мМакетныйОбъект;
Перем мТекущаяГруппаТипаМетаданных;
Перем мСоответствиеСтрокДереваИМетаданных;
Перем мВыборкаРезультата;
Перем мРезультатЗапроса;
Перем мВыбранныеУзлы;
Перем мМетаданныеПланаОбмена;
Перем мДанныеПоКоличествуИзменений;

Процедура ДобавитьМетаданныеДанныеВСтруктуруДерева(СтруктураДерева, Знач МетаданныеОбъекта, Знач ИмяОтображения, Знач ИмяДанных, 
	Знач НомерКартинкиМетаданных, Знач НомерКартинкиЭлементаМетаданных, Знач НомерКартинкиКонечногоЭлемента)
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Метаданные", МетаданныеОбъекта);
	СтруктураДанных.Вставить("ИмяОтображения", ИмяОтображения);
	СтруктураДанных.Вставить("ИмяДанных", ИмяДанных);
	СтруктураДанных.Вставить("НомерКартинкиМетаданных", НомерКартинкиМетаданных);
	СтруктураДанных.Вставить("НомерКартинкиЭлементаМетаданных", НомерКартинкиЭлементаМетаданных);
	СтруктураДанных.Вставить("НомерКартинкиКонечногоЭлемента", НомерКартинкиКонечногоЭлемента);
	
	СтрокаДерева = СоставПланаОбмена.Строки.Добавить();
	СтрокаДерева.Имя = ИмяОтображения;
	СтрокаДерева.Представление = ИмяОтображения;
	СтрокаДерева.Данные = ИмяДанных;
	
	СтруктураДанных.Вставить("СтрокаДерева", СтрокаДерева);
	
	мСоответствиеСтрокДереваИМетаданных.Добавить(СтруктураДанных);
	
КонецПроцедуры

//Функция возвращает элемент соответсвия массива по метаданным
Функция ПолучитьЭлементСоответствияПоМетаданным(СоответствиеСтрокДереваИМетаданных, МетаданныеОбъекта)
	
	Для Каждого СтрокаСоответствия Из СоответствиеСтрокДереваИМетаданных Цикл
		
		Если СтрокаСоответствия.Метаданные.Индекс(МетаданныеОбъекта) > -1 Тогда
				
			Возврат СтрокаСоответствия;
						
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

//Функция получить элемент соответсвия по имени данных
Функция ПолучитьЭлементСоответствияПоИмениДанных(СоответствиеСтрокДереваИМетаданных, ИмяДанных)
	
	Для Каждого СтрокаСоответствия Из СоответствиеСтрокДереваИМетаданных Цикл
			
		Если СтрокаСоответствия.ИмяДанных = ИмяДанных Тогда
				
			Возврат СтрокаСоответствия;
						
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

//Функция возвращает номер картинки для элемента отображения данных
Функция ПолучитьНомерКартинкиПоДанным(УровеньДерева, ДанныеСтроки)
	
	Если УровеньДерева = 0 Тогда
		
		СтрокаСоответствия = ПолучитьЭлементСоответствияПоИмениДанных(мСоответствиеСтрокДереваИМетаданных, ДанныеСтроки.Данные);
		Возврат СтрокаСоответствия.НомерКартинкиМетаданных;
		
	ИначеЕсли УровеньДерева = 1 Тогда
		
		ИмяДанныхРодителя = ДанныеСтроки.Родитель.Данные;
		СтрокаСоответствия = ПолучитьЭлементСоответствияПоИмениДанных(мСоответствиеСтрокДереваИМетаданных, ИмяДанныхРодителя);
		Возврат СтрокаСоответствия.НомерКартинкиЭлементаМетаданных;
		
	ИначеЕсли УровеньДерева = 2 Тогда
		
		ИмяДанныхРодителя = ДанныеСтроки.Родитель.Родитель.Данные;
		
		Если ИмяДанныхРодителя = "Документы" Тогда
			
			Если ДанныеСтроки.Удален = Истина Тогда
				Возврат 13;
			ИначеЕсли ДанныеСтроки.Данные.Проведен Тогда
				Возврат 8;
			ИначеЕсли ДанныеСтроки.Данные.ПометкаУдаления Тогда
				Возврат 9;
			Иначе
				Возврат 10;
			КонецЕсли;
		
		ИначеЕсли (СформироватьПрефиксТипаСсылки(ИмяДанныхРодителя) <> "") Тогда
			
			Если ДанныеСтроки.Удален = Истина Тогда
				Возврат 13;	
			ИначеЕсли ДанныеСтроки.Данные.ПометкаУдаления Тогда
				Возврат 11;
			Иначе
				Возврат 12;
			КонецЕсли;
			
		Иначе
			СтрокаСоответствия = ПолучитьЭлементСоответствияПоИмениДанных(мСоответствиеСтрокДереваИМетаданных, ИмяДанныхРодителя);	
			Возврат СтрокаСоответствия.НомерКартинкиКонечногоЭлемента;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

//Функция возвращает строку дерева с такими же метаданными
Функция ВернутьСтрокуДереваПоМетаданным(ДеревоПоиска, МетаданныеОбъекта)
	
	СтрокаПоиска = ДеревоПоиска.Строки.Найти(МетаданныеОбъекта, "Данные", Ложь);
	
	Возврат СтрокаПоиска;
	
КонецФункции

Функция ПолучитьПоМетаданномуНазвание(МетаданныеОбъекта)
	
	НазваниеМетаданных = "";
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Справочник";
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Документ";
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "ПланВидовХарактеристик";
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "ПланСчетов";
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрСведений";
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "ПланВидовРасчета";
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрНакопления";
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрБухгалтерии";
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрРасчета";
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "БизнесПроцесс";
		
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Задача";
					   
	ИначеЕсли Метаданные.Константы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Константа";
		
	ИначеЕсли Метаданные.Последовательности.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Последовательность";
		
	Иначе
		
		НазваниеМетаданных = "";
				
	КонецЕсли;
	
	Возврат НазваниеМетаданных;
	
КонецФункции

Функция ПолучитьКоличествоЗарегистрированныхОбъектовДляМетаданногоПоУзлу(МетаданныеОбъекта)
	
	Запрос = Новый Запрос();
	ИмяТаблицыДляПоискаЗарегистрированных = ПолучитьПоМетаданномуНазвание(МетаданныеОбъекта);
	Если ПустаяСтрока(ИмяТаблицыДляПоискаЗарегистрированных) Тогда
		Возврат 0;
	КонецЕсли;
	ИмяТаблицыДляПоискаЗарегистрированных = ИмяТаблицыДляПоискаЗарегистрированных + "." + МетаданныеОбъекта.Имя + ".Изменения";
	Запрос.Текст = "
	   |ВЫБРАТЬ 
	   |    Количество(*) КАК КоличествоЗарегистрированных,
   	   |    СУММА(ВЫБОР КОГДА РегистрацияИзменений.НомерСообщения ЕСТЬ NULL ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК КоличествоНевыгруженных,
	   |    СУММА(ВЫБОР КОГДА РегистрацияИзменений.НомерСообщения ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ) КАК КоличествоВыгруженных
	   |ИЗ
	   |	" + ИмяТаблицыДляПоискаЗарегистрированных + " КАК РегистрацияИзменений
	   |ГДЕ
	   |РегистрацияИзменений.Узел В (&Узлы)";
	Запрос.УстановитьПараметр("Узлы", мВыбранныеУзлы);
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	Если ТаблицаДанных.Количество() = 0 Тогда
		СтрокаДанных = ТаблицаДанных.Добавить();
	Иначе		
		СтрокаДанных = ТаблицаДанных[0];
	КонецЕсли;
	Возврат СтрокаДанных;
	
КонецФункции

Процедура ОбновитьКоличествоДляСтрокиДерева(СтрокаДерева = Неопределено)
	
	Если СтрокаДерева = Неопределено Тогда
		СтрокаДерева = ЭлементыФормы.СоставПланаОбмена.ТекущаяСтрока;
	КонецЕсли; 
	КолонкиКоличества = Новый Массив();
	КолонкиКоличества.Добавить("КоличествоЗарегистрированных");
	КолонкиКоличества.Добавить("КоличествоВыгруженных");
	КолонкиКоличества.Добавить("КоличествоНевыгруженных");
	Для Каждого ИмяКолонкиКоличества Из КолонкиКоличества Цикл
		СтароеКоличество = СтрокаДерева[ИмяКолонкиКоличества];
		СтрокаДерева[ИмяКолонкиКоличества] = 0;
		Для Каждого ЭлементПакета Из мДанныеПоКоличествуИзменений Цикл
			СтрокиРезультата = ЭлементПакета.НайтиСтроки(Новый Структура("Данные", СтрокаДерева.Данные));
			Для Каждого СтрокаРезультата Из СтрокиРезультата Цикл
				Если мВыбранныеУзлы.Найти(СтрокаРезультата.Узел) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				СтрокаДерева[ИмяКолонкиКоличества] = СтрокаДерева[ИмяКолонкиКоличества] + СтрокаРезультата[ИмяКолонкиКоличества];
			КонецЦикла;
		КонецЦикла;
		Родитель = СтрокаДерева.Родитель;
		Пока Родитель <> Неопределено Цикл
			Родитель[ИмяКолонкиКоличества] = Родитель[ИмяКолонкиКоличества] - СтароеКоличество + СтрокаДерева[ИмяКолонкиКоличества];
			Родитель = Родитель.Родитель;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПостроитьДеревоОбменаДанных(СоставПланаОбмена, МетаданныеДляОграничения = Неопределено)
	
	Если МетаданныеДляОграничения = Неопределено Тогда
		СоставПланаОбмена.Строки.Очистить();
		мСоответствиеСтрокДереваИМетаданных.Очистить();
		Если мМетаданныеПланаОбмена = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.Константы, "Константы", "Константы",	0, 0, 0);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.Справочники, "Справочники", "Справочники",	1, 5, 0);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.Документы, "Документы", "Документы",	6, 7, 0);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.Последовательности, "Последовательности", "Последовательности",	26, 26, 26);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.РегистрыСведений, "Регистры сведений", "РегистрыСведений",	2, 2, 3);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.РегистрыНакопления, "Регистры накопления", "РегистрыНакопления",	4, 4, 3);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.ПланыВидовХарактеристик, "Планы видов характеристик", "ПланыВидовХарактеристик",	14, 15, 12);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.ПланыСчетов, "Планы счетов", "ПланыСчетов",	16, 17, 17);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.ПланыВидовРасчета, "Планы видов расчета", "ПланыВидовРасчета",	18, 19, 19);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.РегистрыБухгалтерии, "Регистры бухгалтерии", "РегистрыБухгалтерии",	22, 22, 3);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.РегистрыРасчета, "Регистры расчета", "РегистрыРасчета",	23, 23, 3);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.БизнесПроцессы, "Бизнес-процессы", "БизнесПроцессы",	20, 21, 21);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.Задачи, "Задачи", "Задачи",	24, 24, 25);
		
		МетаданныеОбъекта = Неопределено;
		
		Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(мМетаданныеПланаОбмена.Состав.Количество(), "Подготовка данных");
		// надо определить что подлежит обмену
		Для Каждого СтрокаДляОбмена Из мМетаданныеПланаОбмена.Состав Цикл
			ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
			МетаданныеОбъектаПредка = МетаданныеОбъекта;
			МетаданныеОбъекта = СтрокаДляОбмена.Метаданные;
			Если МетаданныеОбъекта = Неопределено Тогда
				// Это сама конфигурация
				Продолжить;
			КонецЕсли;
			ЭлементСоответствия = ПолучитьЭлементСоответствияПоМетаданным(мСоответствиеСтрокДереваИМетаданных, МетаданныеОбъекта);
			Если ЭлементСоответствия = Неопределено Тогда
				// перерасчеты не отображаем в обработке
				//СообщитьОбОшибкеИис("Невозможно определить тип объекта: " + Строка(МетаданныеОбъекта));
				Продолжить;
			КонецЕсли;
			СтрокаДерева = ЭлементСоответствия.СтрокаДерева;
			СтрокаДобавления = СтрокаДерева.Строки.Добавить(); 
			СтрокаДобавления.Имя = МетаданныеОбъекта.Имя;
			СтрокаДобавления.Представление = МетаданныеОбъекта.Представление();
			СтрокаДобавления.Данные = МетаданныеОбъекта.ПолноеИмя();
			СтрокаДобавления.РежимАвтоРегистрации = (СтрокаДляОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить);
			СтрокаДобавления.КоличествоЗарегистрированных = 0;
		КонецЦикла;
		ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаТипаМетаданных Из СоставПланаОбмена.Строки Цикл
			Если СтрокаТипаМетаданных.Строки.Количество() = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаТипаМетаданных);
			КонецЕсли; 
		КонецЦикла;
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			СоставПланаОбмена.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла;
	Иначе
		ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные.Строки.Очистить();
		Если мМетаданныеПланаОбмена = Неопределено Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;

	Если ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения Тогда
		ОбновитьСтатистикуВСоставеПланаОбмена();
		СтрокиКУдалению = Новый Массив();
		Для Каждого СтрокаДерева1 Из СоставПланаОбмена.Строки Цикл
			Для Каждого СтрокаДерева2 Из СтрокаДерева1.Строки Цикл
				Если Истина
					И ОтображатьТолькоМетаданныеСИзменениями 
					И СтрокаДерева2.КоличествоЗарегистрированных = 0
				Тогда
					СтрокиКУдалению.Добавить(СтрокаДерева2);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			СтрокаКУдалению.Родитель.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		СтрокиКУдалению = Новый Массив();
		Для Каждого СтрокаДерева1 Из СоставПланаОбмена.Строки Цикл
			Если СтрокаДерева1.Строки.Количество() = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаДерева1);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			СоставПланаОбмена.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
	    	
КонецПроцедуры

Функция ОбновитьСтатистикуВСоставеПланаОбмена()

	Если мДанныеПоКоличествуИзменений = Неопределено Тогда
		мДанныеПоКоличествуИзменений = ирОбщий.ВычислитьКоличествоСтрокТаблицВДеревеМетаданныхЛкс(СоставПланаОбмена, "Данные", "КоличествоЗарегистрированных", Истина, 
			//Новый Структура("Узел", Узлы.ВыгрузитьКолонку("Ссылка"))
			Новый Структура("_ТипУзла_", Тип("ПланОбменаСсылка." + ИмяПланОбмена)));
	КонецЕсли; 
	ОбновитьИтогиПоУзлам();
	ирОбщий.ЗаполнитьКоличествоСтрокТаблицВДеревеМетаданныхЛкс(СоставПланаОбмена, мДанныеПоКоличествуИзменений, "Данные", "КоличествоЗарегистрированных, КоличествоНевыгруженных, КоличествоВыгруженных",
		Новый Структура("Узел", мВыбранныеУзлы));
	Возврат Неопределено;

КонецФункции

Процедура ОбновитьИтогиПоУзлам()

	Для Каждого СтрокаУзла Из Узлы Цикл
		СтрокаУзла.КоличествоЗарегистрированных = 0;
		СтрокаУзла.КоличествоНевыгруженных = 0;
		СтрокаУзла.КоличествоВыгруженных = 0;
	КонецЦикла; 
	Если мДанныеПоКоличествуИзменений <> Неопределено Тогда
		Для Каждого ТаблицаРезультата Из мДанныеПоКоличествуИзменений Цикл
			Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
				СтрокаУзла = Узлы.Найти(СтрокаРезультата.Узел, "Ссылка");
				Если СтрокаУзла = Неопределено Тогда
					СтрокаУзла = Узлы.Добавить();
					СтрокаУзла.Ссылка = СтрокаРезультата.Узел;
				КонецЕсли; 
				СтрокаУзла.КоличествоЗарегистрированных = СтрокаУзла.КоличествоЗарегистрированных + СтрокаРезультата.КоличествоЗарегистрированных;
				СтрокаУзла.КоличествоНевыгруженных = СтрокаУзла.КоличествоНевыгруженных + СтрокаРезультата.КоличествоНевыгруженных;
				СтрокаУзла.КоличествоВыгруженных = СтрокаУзла.КоличествоВыгруженных + СтрокаРезультата.КоличествоВыгруженных;
			КонецЦикла;
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

//Функция по имени родителя предка формируется префикс типа
Функция СформироватьПрефиксТипаСсылки(Знач НаименованиеПредка)
	
	Если НаименованиеПредка = "Справочники" Тогда
		Возврат "СправочникСсылка";
	ИначеЕсли НаименованиеПредка = "Документы" Тогда
		Возврат "ДокументСсылка";
	ИначеЕсли НаименованиеПредка = "ПланыВидовХарактеристик" Тогда
		Возврат "ПланВидовХарактеристикСсылка";
	ИначеЕсли НаименованиеПредка = "ПланыСчетов" Тогда
		Возврат "ПланСчетовСсылка";
	ИначеЕсли НаименованиеПредка = "ПланыВидовРасчета" Тогда
		Возврат "ПланВидовРасчетаСсылка";
	ИначеЕсли НаименованиеПредка = "БизнесПроцессы" Тогда
		Возврат "БизнесПроцессСсылка";
	ИначеЕсли НаименованиеПредка = "Задачи" Тогда
		Возврат "ЗадачаСсылка";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

//процедура строит дерево измененных объектов для узла
Процедура ПостроитьДеревоСоставаПланаОбмена(Знач МетаданныеДляОграничения = Неопределено)
	
	КлючТекущейСтроки = "";
	Если ЭлементыФормы.СоставПланаОбмена.ТекущаяСтрока <> Неопределено Тогда
		КлючТекущейСтроки = ЭлементыФормы.СоставПланаОбмена.ТекущаяСтрока.Данные;
	КонецЕсли; 
	КлючиВыделенныхСтрок = Новый Массив();
	Для Каждого ВыбраннаяСтрока Из ЭлементыФормы.СоставПланаОбмена.ВыделенныеСтроки Цикл
		Если ВыбраннаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		КлючиВыделенныхСтрок.Добавить(ВыбраннаяСтрока.Данные);
	КонецЦикла;
	СоставПланаОбмена.Строки.Очистить();
	Если ТипЗнч(МетаданныеДляОграничения) = Тип("Строка") Тогда
		МетаданныеДляОграничения = Метаданные.НайтиПоПолномуИмени(МетаданныеДляОграничения);
	КонецЕсли; 
	// надо построить дерево тех метаданных которые участвуют в обмене
	ПостроитьДеревоОбменаДанных(СоставПланаОбмена, МетаданныеДляОграничения);
	
	Если МетаданныеДляОграничения = Неопределено Тогда
		СоставПланаОбмена.Строки.Сортировать("Имя", Истина);
	КонецЕсли;
	Если КлючТекущейСтроки <> "" Тогда
		ТекущаяСтрока = СоставПланаОбмена.Строки.Найти(КлючТекущейСтроки, "Данные", Истина);
		Если ТекущаяСтрока <> Неопределено Тогда
			ЭлементыФормы.СоставПланаОбмена.ТекущаяСтрока = ТекущаяСтрока;
		КонецЕсли; 
	КонецЕсли; 
	Для Каждого КлючВыделеннойСтроки Из КлючиВыделенныхСтрок Цикл
		СтрокаДерева = СоставПланаОбмена.Строки.Найти(КлючВыделеннойСтроки, "Данные", Истина);
		Если СтрокаДерева <> Неопределено Тогда
			ЭлементыФормы.СоставПланаОбмена.ВыделенныеСтроки.Добавить(СтрокаДерева);
		КонецЕсли; 
	КонецЦикла;
	Если ЭлементыФормы.СоставПланаОбмена.ТекущаяСтрока = Неопределено Тогда
		КП_ТаблицаИзмененийОбновить();
	КонецЕсли; 
	
КонецПроцедуры

//процедура добавляет/удаляет регистрацию для объектов
Процедура ДобавитьУдалитьРегистрациюДляОбъектов(Знач ДобавитьРегистрацию = Истина)
	
	КоличествоВыбранныхОбъектовМД = ЭлементыФормы.СоставПланаОбмена.ВыделенныеСтроки.Количество();
	Если КоличествоВыбранныхОбъектовМД = 0 Тогда
		Возврат;
	КонецЕсли; 
	РегистрацияВсехИзменений = Истина;
	НужноОбновлятьДерево = ДобавитьРегистрацию;
	СтрокаДобавленияУдаленияРегистрации = ?(ДобавитьРегистрацию, "Добавить", "Удалить");
	Если КоличествоВыбранныхОбъектовМД = 1 Тогда
		УровеньВыбраннойСтроки = ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные.Уровень();
		СписокРедактирования = Неопределено;
		Если УровеньВыбраннойСтроки = 0 Тогда
			// общий класс, справочники, константы...
			ТекстПодтверждения = СтрокаДобавленияУдаленияРегистрации + " регистрацию для всех объектов с типом: " + ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные.Имя;
			ОтветПользователя = Вопрос(ТекстПодтверждения, РежимДиалогаВопрос.ДаНет);
			Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли УровеньВыбраннойСтроки = 1 Тогда
			// конкретный справочник или константа
			Если ирОбщий.СтрокиРавныЛкс(ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные.Родитель.Данные, "Константы") Тогда
				РегистрацияВсехИзменений = Истина;
			Иначе
				ТекстПодтверждения = СтрокаДобавленияУдаленияРегистрации + " регистрацию для всех (Да) или выборочных (Нет) объектов с типом: " + ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные.Имя;
				ОтветПользователя = Вопрос(ТекстПодтверждения, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
				Если ОтветПользователя = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				ИначеЕсли ОтветПользователя = КодВозвратаДиалога.Да Тогда
					РегистрацияВсехИзменений = Истина;
				ИначеЕсли ОтветПользователя = КодВозвратаДиалога.Нет Тогда
					РегистрацияВсехИзменений = Ложь;
					СписокРедактирования = ПолучитьДанныеДляРегистрацииИзменений(ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные.Данные);
					Если СписокРедактирования = Неопределено Тогда
						Возврат;
					КонецЕсли;
					НужноОбновлятьДерево = Истина;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	Иначе
		ТекстПодтверждения = СтрокаДобавленияУдаленияРегистрации + " регистрацию для всех объектов всех (" + КоличествоВыбранныхОбъектовМД + ") выделенных типов?";
		ОтветПользователя = Вопрос(ТекстПодтверждения, РежимДиалогаВопрос.ДаНет);
		Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(КоличествоВыбранныхОбъектовМД);
	Для Каждого ВыбраннаяСтрока Из ЭлементыФормы.СоставПланаОбмена.ВыделенныеСтроки Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		Если ВыбраннаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		УровеньВыбраннойСтроки = ВыбраннаяСтрока.Уровень();
		Если УровеньВыбраннойСтроки = 0 Тогда
			Для Каждого ДочерняяСтрока Из ВыбраннаяСтрока.Строки Цикл
				ИзменитьРегистрациюЦелойТаблицы(ДочерняяСтрока, ДобавитьРегистрацию);
			КонецЦикла;
		ИначеЕсли Истина
			И УровеньВыбраннойСтроки = 1 
			И РегистрацияВсехИзменений
		Тогда
			ИзменитьРегистрациюЦелойТаблицы(ВыбраннаяСтрока, ДобавитьРегистрацию);
		Иначе
			// регистрация того, что выберет пользователь
			СтрокаОбновления = ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные;
			Если СтрокаОбновления.Уровень() >= 2 Тогда
				СтрокаОбновления = СтрокаОбновления.Родитель;
			КонецЕсли;
			Для Каждого ЗначенияСписка Из СписокРедактирования Цикл
				Успех = ирОбщий.ИзменитьРегистрациюДляУзлаЛкс(мВыбранныеУзлы, ЗначенияСписка.Значение, ДобавитьРегистрацию);
				//Если Истина
				//	И Успех 
				//	И Не ДобавитьРегистрацию 
				//	И Не НужноОбновлятьДерево 
				//Тогда
				//	ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные.Родитель.Строки.Удалить(ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные);
				//КонецЕсли;
			КонецЦикла;
			ОбновитьИтогиПоТаблице(ВыбраннаяСтрока);
		КонецЕсли; 
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс(Индикатор);
	Если НужноОбновлятьДерево Тогда
		ПостроитьДеревоСоставаПланаОбмена();
	Иначе
		КП_ТаблицаИзмененийОбновить();
	КонецЕсли;
	
КонецПроцедуры

Функция ИзменитьРегистрациюЦелойТаблицы(СтрокаДерева, ДобавитьРегистрацию)

	ОбъектМеданных = Метаданные.НайтиПоПолномуИмени(СтрокаДерева.Данные);
	Успех = ирОбщий.ИзменитьРегистрациюДляУзлаЛкс(мВыбранныеУзлы, ОбъектМеданных, ДобавитьРегистрацию);
	//Если Успех И Не ДобавитьРегистрацию Тогда
	//	УдалитьКонечныеЭлементыДерева(ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные);
	//КонецЕсли;
	ОбновитьИтогиПоТаблице(СтрокаДерева);
	Возврат Неопределено;

КонецФункции

// для узла обмена показывает зарегистрированные изменения
Процедура КоманднаяПанельДереваОбъектовОбновить(Кнопка)
	
	мДанныеПоКоличествуИзменений = Неопределено;
	ПостроитьДеревоСоставаПланаОбмена();
		
КонецПроцедуры

// при выводе строки дерева
Процедура ДеревоОбменаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Имя.ОтображатьКартинку = истина;
	ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.ОтображатьКартинку = Ложь;
	ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст = "";
		
	УровеньДерева = ДанныеСтроки.Уровень();
	
	ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = ПолучитьНомерКартинкиПоДанным(УровеньДерева, ДанныеСтроки);
	
	Если УровеньДерева = 1 Тогда
		
		ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.ОтображатьКартинку = Истина;
		
		Если ДанныеСтроки.РежимАвтоРегистрации = Истина Тогда
			
			ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.ИндексКартинки = 0;
			ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст = "Разрешить";
			
		Иначе
			ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.ИндексКартинки = 1;
			ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст = "Запретить";
			
		КонецЕсли;
		
		ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = ПолучитьНомерКартинкиПоДанным(УровеньДерева, ДанныеСтроки);
		
		Если ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения
			И ДанныеСтроки.КоличествоЗарегистрированных <> 0 Тогда
			
			//ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст = ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст + " (" + Строка(ДанныеСтроки.КоличествоЗарегистрированных) + ")";	
			ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст = ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст;
			
		КонецЕсли;
		
	ИначеЕсли УровеньДерева = 0 Тогда
		
		//Если ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения
		//	И ДанныеСтроки.КоличествоЗарегистрированных <> 0 Тогда
		//	
		//	ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст = "Зарегистрировано: " + Строка(ДанныеСтроки.КоличествоЗарегистрированных);	
		//	
		//КонецЕсли;
			
	
		
	КонецЕсли;
	
КонецПроцедуры

// развернуть дерево
Процедура КоманднаяПанельДереваОбъектовРазвернуть(Кнопка)
	
	Если ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.СоставПланаОбмена.Развернуть(ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные, Истина);
	
КонецПроцедуры

// свернуть дерево
Процедура КоманднаяПанельДереваОбъектовСвернутьДерево(Кнопка)

	Если ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.СоставПланаОбмена.Свернуть(ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные);
	
КонецПроцедуры

// процедура отображает данные регитсра
Процедура ОтобразитьДанныеРегистра(Данные, Знач ИмяГлавногоРодителя)
	
	СтрокаТипа = Строка(Данные);
	
	ПозицияТочки = Найти(СтрокаТипа, ".");
	
	ИмяРегистра = Сред(СтрокаТипа, ПозицияТочки + 1);
	
	Если ИмяГлавногоРодителя = "РегистрыСведений" Тогда
	
		ФормаСписка = РегистрыСведений[ИмяРегистра].ПолучитьФормуСписка();
	
	ИначеЕсли ИмяГлавногоРодителя = "РегистрыНакопления" Тогда
		
		ФормаСписка = РегистрыНакопления[ИмяРегистра].ПолучитьФормуСписка();
		
	ИначеЕсли ИмяГлавногоРодителя = "РегистрыБухгалтерии" Тогда
		
		ФормаСписка = РегистрыБухгалтерии[ИмяРегистра].ПолучитьФормуСписка();
		
	ИначеЕсли ИмяГлавногоРодителя = "РегистрыРасчета" Тогда
		
		ФормаСписка = РегистрыРасчета[ИмяРегистра].ПолучитьФормуСписка();	
		
	КонецЕсли;
	
	// отбор ставим
	Для Каждого СтрокаОтбора Из Данные.Отбор Цикл
		
		СтрокаОтбораФормы = ФормаСписка.Отбор.Найти(СтрокаОтбора.Имя);
		
		Если СтрокаОтбораФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОтбораФормы.Использование = СтрокаОтбора.Использование;
		СтрокаОтбораФормы.ВидСравнения = СтрокаОтбора.ВидСравнения;
		СтрокаОтбораФормы.Значение = СтрокаОтбора.Значение;
		
	КонецЦикла;
	
	ФормаСписка.Открыть();
	
КонецПроцедуры

// выбор строки дерева
Процедура ДеревоОбменаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УровеньВыбраннойСтроки = ВыбраннаяСтрока.Уровень();
	
	Если УровеньВыбраннойСтроки < 1 Тогда
		Элемент.Развернуть(ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	Если УровеньВыбраннойСтроки = 1 Тогда
		ОбновитьИтогиПоТаблице();
	КонецЕсли;
	
КонецПроцедуры

//Процедура удаляет все строки дерева у которых уровень не меньше 2
Процедура УдалитьКонечныеЭлементыДерева(ДеревоДанных)
	
	Если ДеревоДанных.Уровень() >= 1 Тогда
		
		ДеревоДанных.Строки.Очистить();
		
	Иначе
		
		Для Каждого СтрокаДерева Из ДеревоДанных.Строки Цикл
			
			УдалитьКонечныеЭлементыДерева(СтрокаДерева);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// удаление регистрации изменений
Процедура КоманднаяПанельДереваОбъектовОтменитьРегистрациюИзменения(Кнопка)
	
	ДобавитьУдалитьРегистрациюДляОбъектов(Ложь);
		
КонецПроцедуры

//Функция возвращает данные для регистрации изменений
Функция ПолучитьДанныеДляРегистрацииИзменений(ПолноеИмяМД)
	
	// не для всех типов позволяем список объектов для регистрации редактировать
	Если мТекущаяГруппаТипаМетаданных = "Ссылочный" Тогда
		ФормаРедактированияОбъектов = ПолучитьФорму("ФормаВыбораОбъектовДляРегистрации", ЭтаФорма);
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(Тип(СтрЗаменить(ПолноеИмяМД, ".", "Ссылка.")));
		ФормаРедактированияОбъектов.ОписаниеТиповРедактированияСписка = Новый ОписаниеТипов(МассивТипов);
		РезультатОткрытия = ФормаРедактированияОбъектов.ОткрытьМодально();
		Если РезультатОткрытия <> Истина Тогда
			Возврат Неопределено;
		КонецЕсли;
		СписокРедактирования = ФормаРедактированияОбъектов.СписокРедактирования;
		
		// Избавляемся от пустых ссылок, т.к. они приводят к глобальной регистрации всех данных
		НачальноеКоличество = СписокРедактирования.Количество(); 
		Для СчетчикСписокРедактирования = 1 По НачальноеКоличество Цикл
			ЭлементСписка = СписокРедактирования[НачальноеКоличество - СчетчикСписокРедактирования];
			Если Не ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
				СписокРедактирования.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
		
		// ничего не выбрали для регистрации
		Если СписокРедактирования.Количество() = 0 Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;	

	Возврат СписокРедактирования;
	
КонецФункции

// добавить регистрацию
Процедура КоманднаяПанельДереваОбъектовДобавитьРегистрацию(Кнопка)
	
	ДобавитьУдалитьРегистрациюДляОбъектов(Истина);
	
КонецПроцедуры

//Функция регистрирует изменнения для всего дерева объектов
Функция ИзменитьРегистрациюИзмененийНаВыбранныхУзлахДляВсегоСоставаПланаОбмена(НовоеЗначение = Истина)
	
	Если мВыбранныеУзлы.Количество() = 0 Тогда
		Предупреждение("Сначала необходимо выбрать узлы");
		Возврат Ложь;
	КонецЕсли; 
	ФормаВопроса = ПолучитьФорму("ФормаВыбораОбновленияРегистрации", ЭтаФорма);
	Если НовоеЗначение Тогда
		ФормаВопроса.ТекстВопросаПользователю = "Операция регистрации всех изменений необратима, Вы уверены, "
			+ "что хотите зарегистрировать изменения для выбранных узлов для всех объектов, участвующих в обмене?";
	Иначе
		ФормаВопроса.ТекстВопросаПользователю = "Операция удаления регистрации изменений необратима, Вы уверены, "
			+ "что хотите удалить регистрацию изменений  для выбранных узлов для всех объектов участвующих в обмене?";
	КонецЕсли; 
	РезультатОткрытия = ФормаВопроса.ОткрытьМодально();
	Если РезультатОткрытия <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	мДанныеПоКоличествуИзменений = Неопределено;
	ТолькоДляОбъектовСАвтоматическойРегистрацией = ФормаВопроса.ОбновлятьТолькоДляЭлементовСАвтоРегистрацией;
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(мМетаданныеПланаОбмена.Состав.Количество(), "Регистрация изменений");
	Для Каждого ЭлементСостава Из мМетаданныеПланаОбмена.Состав Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		ОбъектМеданных = ЭлементСостава.Метаданные;
		Если ОбъектМеданных = Неопределено Тогда
			// Это сама конфигурация
			Продолжить;
		КонецЕсли;
		Если Истина
			И ТолькоДляОбъектовСАвтоматическойРегистрацией
			И ЭлементСостава.АвтоРегистрация = АвтоРегистрацияИзменений.Запретить 
		Тогда
			Продолжить;
		КонецЕсли;
		Если НовоеЗначение Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(мВыбранныеУзлы, ОбъектМеданных);
		Иначе
			ПланыОбмена.УдалитьРегистрациюИзменений(мВыбранныеУзлы, ОбъектМеданных);
		КонецЕсли; 
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	Возврат Истина;
	
КонецФункции

Функция ПолучитьОбъектДанныхПоСтрокеИзменений(СтрокаДанных = Неопределено)
	
	Если СтрокаДанных = Неопределено Тогда
		СтрокаДанных = ЭлементыФормы.ТаблицаИзменений.ТекущаяСтрока;
	КонецЕсли; 
	Если СтрокаДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Если мТекущаяГруппаТипаМетаданных = "Ссылочный" Тогда
		Объект = СтрокаДанных.Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Объект = Новый УдалениеОбъекта(СтрокаДанных.Ссылка);
		КонецЕсли; 
	ИначеЕсли мТекущаяГруппаТипаМетаданных = "Регистр" Тогда
		Объект = мМакетныйОбъект;
		// Антибаг 8.2.15 http://www.partners.v8.1c.ru/forum/thread.jsp?id=1034617#1034617
		//Объект.Отбор.Сбросить();
		Для Каждого Колонка Из ТаблицаИзменений.Колонки Цикл
			Если Колонка.Имя = "НомерСообщения" Тогда
				Продолжить;
			КонецЕсли; 
			ЭлементОтбора = мМакетныйОбъект.Отбор[Колонка.Имя];
			ирОбщий.ПрисвоитьЕслиНеРавноЛкс(ЭлементОтбора.Использование, Истина);
			ЭлементОтбора.Значение = СтрокаДанных[Колонка.Имя];
		КонецЦикла;
		Объект.Прочитать();
	ИначеЕсли мТекущаяГруппаТипаМетаданных = "Константа" Тогда
		Объект = мМакетныйОбъект;
		Объект.Прочитать();
	КонецЕсли;
	Возврат Объект;
	
КонецФункции


// показываем результат стандарной выгрузки
Процедура КоманднаяПанельДереваОбъектовПоказатьРезультатСтандартнойВыгрузки(Кнопка)
	
	Если ЭлементыФормы.ТаблицаИзменений.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-16");
	Объект = ПолучитьОбъектДанныхПоСтрокеИзменений();
	Попытка
		ЗаписатьXML(ЗаписьXML, Объект); 
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	СтрXML = ЗаписьXML.Закрыть();
	ирОбщий.ОткрытьТекстЛкс(СтрXML, "XML представление объекта """ + ЭлементыФормы.СоставПланаОбмена.ТекущаяСтрока.Данные + "." + Объект + """", "HTML", Истина, ЭлементыФормы.ТаблицаИзменений.ТекущаяСтрока);
	
КонецПроцедуры

Процедура ВыполнитьРегистрациюПервогоОбъектаДляУзла(Знач ПрефиксОбъектаМетаданных, Знач НазваниеОбъекта)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Первые 1
	               |	ОбъектДанных.Ссылка
	               |ИЗ
	               |	" + ПрефиксОбъектаМетаданных + "." + НазваниеОбъекта + " КАК ОбъектДанных";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(мВыбранныеУзлы, Выборка.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьРегистрациюРегистра(Знач ИмяТипаОбъектаМетаданных, Знач ПрефиксОбъектаМетаданных, Знач НазваниеОбъекта)
	
	КолонкаОтбора = "Регистратор";
	Если ИмяТипаОбъектаМетаданных = "РегистрыСведений" Тогда
		МетаданныеРегистра = Метаданные.РегистрыСведений[НазваниеОбъекта];
		Если МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			КолонкаОтбора = "";
			МассивКолонокОтбора = Новый Массив();
			Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				МассивКолонокОтбора.Добавить("Период");		
			КонецЕсли;
			Для Каждого КолонкаИзмерений Из МетаданныеРегистра.Измерения Цикл
				Если КолонкаИзмерений.ОсновнойОтбор = Истина Тогда
					МассивКолонокОтбора.Добавить(КолонкаИзмерений.Имя);	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;		
	
	Запрос = Новый Запрос();
	СтрокаКолонокВыборкиДанных = "";
	Если КолонкаОтбора <> "" Тогда
		СтрокаКолонокВыборкиДанных = "ОбъектДанных." + КолонкаОтбора;
	Иначе
		Для Каждого ЭлементКолонки Из МассивКолонокОтбора Цикл
			СтрокаКолонокВыборкиДанных = СтрокаКолонокВыборкиДанных + "," + Символы.ПС +  "ОбъектДанных." + ЭлементКолонки;
		КонецЦикла;
		СтрокаКолонокВыборкиДанных = СокрЛП(Сред(СтрокаКолонокВыборкиДанных, 2));
	КонецЕсли;
	
	// нет ни измерений, ни периодичности
	Если ПустаяСтрока(СтрокаКолонокВыборкиДанных) Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(мВыбранныеУзлы, МетаданныеРегистра);	
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ Первые 1
				   |	" + СтрокаКолонокВыборкиДанных + " 
				   |ИЗ
				   |	" + ПрефиксОбъектаМетаданных + "." + НазваниеОбъекта + " КАК ОбъектДанных";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ИмяТипаОбъектаМетаданных = "Последовательности" Тогда
			НаборЗаписей = Последовательности[НазваниеОбъекта].СоздатьНаборЗаписей();
		ИначеЕсли ИмяТипаОбъектаМетаданных = "РегистрыСведений" Тогда
			НаборЗаписей = РегистрыСведений[НазваниеОбъекта].СоздатьНаборЗаписей();
		ИначеЕсли ИмяТипаОбъектаМетаданных = "РегистрыНакопления" Тогда	
			НаборЗаписей = РегистрыНакопления[НазваниеОбъекта].СоздатьНаборЗаписей();
		ИначеЕсли ИмяТипаОбъектаМетаданных = "РегистрыБухгалтерии" Тогда	
			НаборЗаписей = РегистрыБухгалтерии[НазваниеОбъекта].СоздатьНаборЗаписей();	
		ИначеЕсли ИмяТипаОбъектаМетаданных = "РегистрыРасчета" Тогда	
			НаборЗаписей = РегистрыРасчета[НазваниеОбъекта].СоздатьНаборЗаписей();	
		КонецЕсли;
		Если КолонкаОтбора <> "" Тогда 
			НаборЗаписей.Отбор[КолонкаОтбора].Установить(Выборка[КолонкаОтбора]);
		Иначе
			Для Каждого ЭлементКолонки Из МассивКолонокОтбора Цикл
				НаборЗаписей.Отбор[ЭлементКолонки].Установить(Выборка[ЭлементКолонки]);
			КонецЦикла;
		КонецЕсли;
		ПланыОбмена.ЗарегистрироватьИзменения(мВыбранныеУзлы, НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбратьУзелОбменаПоМетаданным()
	
	ИмяПланаОбмена = мМетаданныеПланаОбмена.Имя;
	
	Запрос = Новый запрос();
	Запрос.Текст = "ВЫБРАТЬ первые 2
	               |	ПланОбменаРезультат.Ссылка
	               |ИЗ
	               |	ПланОбмена." + ИмяПланаОбмена + " КАК ПланОбменаРезультат
	               |ГДЕ
	               |	ПланОбменаРезультат.ПометкаУдаления = Ложь
	               |	И ПланОбменаРезультат.Ссылка <> &ТекущийУзелОбмена";
				   
	Запрос.УстановитьПараметр("ТекущийУзелОбмена", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультата.Количество() = 1 Тогда
		
		Возврат ТаблицаРезультата[0].Ссылка;
		
	Иначе
		
		Возврат ПланыОбмена[ИмяПланаОбмена].ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

Процедура ПланОбменаПриИзменении(Элемент = Неопределено) Экспорт
	
	//Если Элемент <> Неопределено Тогда
	//	// Антибаг платформы 8.2.16 http://partners.v8.1c.ru/forum/thread.jsp?id=1077270#1077270
	//	Элемент.Значение = Элемент.Значение;
	//КонецЕсли; 
	Если Элемент = Неопределено Тогда
		Элемент = ЭлементыФормы.ИмяПланОбмена;
	КонецЕсли; 
	Узлы.Очистить();
	ТаблицаИзменений.Очистить();
	СоставПланаОбмена.Строки.Очистить();
	мМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(ИмяПланОбмена);
	мДанныеПоКоличествуИзменений = Неопределено;
	Если Не ЗначениеЗаполнено(ИмяПланОбмена) Тогда
		ПриИзмененииВыбранныхУзлов();
		Возврат;
	КонецЕсли; 
	КПУзлыОбновить(, Истина);
	КП_ТаблицаИзмененийОбновить();
	//ПроверитьЗаполнитьИтогиТаблицыПоУзлам();
	ЭлементыФормы.ТаблицаИзменений.ТолькоПросмотр = Истина;
	ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ЗначениеЗаполнено(ПараметрУзелОбмена) Тогда
		ИмяПланОбмена = ПараметрУзелОбмена.Метаданные().Имя;
		мВыбранныеУзлы.Добавить(ПараметрУзелОбмена);
		ПараметрУзелОбмена = Неопределено;
	КонецЕсли; 
	ПланОбменаПриИзменении();
	
КонецПроцедуры

Процедура УдалитьРегистрациюДляВсехОбъектовНажатие(Элемент)
	
	Если мВыбранныеУзлы.Количество() = 0 Тогда
		Предупреждение("Сначала необходимо выбрать узлы");
		Возврат;
	КонецЕсли; 
	РезультатРегистрации = ИзменитьРегистрациюИзмененийНаВыбранныхУзлахДляВсегоСоставаПланаОбмена(Ложь);
	Если РезультатРегистрации Тогда
	     ПостроитьДеревоСоставаПланаОбмена();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияДляВсехОбъектовНажатие(Элемент)
	
	Если мВыбранныеУзлы.Количество() = 0 Тогда
		Предупреждение("Сначала необходимо выбрать узлы");
		Возврат;
	КонецЕсли; 
	РезультатРегистрации = ИзменитьРегистрациюИзмененийНаВыбранныхУзлахДляВсегоСоставаПланаОбмена(Истина);
	Если РезультатРегистрации Тогда
	     ПостроитьДеревоСоставаПланаОбмена();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПоОдномуОбъектуНажатие(Элемент)
	
	Если мВыбранныеУзлы.Количество() = 0 Тогда
		Предупреждение("Сначала необходимо выбрать узлы");
		Возврат;
	КонецЕсли; 
	ФормаВопроса = ПолучитьФорму("ФормаВыбораОбновленияРегистрации", ЭтаФорма);
	ФормаВопроса.ТекстВопросаПользователю = "Операция регистрации одного изменения для каждого типа объектов необратима, Вы уверены, что хотите зарегистрировать изменения?";
	РезультатОткрытия = ФормаВопроса.ОткрытьМодально();
	Если РезультатОткрытия <> Истина Тогда
		Возврат;
	КонецЕсли;
	мДанныеПоКоличествуИзменений = Неопределено;
	ТолькоДляОбъектовСАвтоматическойРегистрацией = ФормаВопроса.ОбновлятьТолькоДляЭлементовСАвтоРегистрацией;
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(СоставПланаОбмена.Строки.Количество(), "Классы метаданных");
	Для Каждого СтрокаДереваМетаданных Из СоставПланаОбмена.Строки Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		Если СтрокаДереваМетаданных.Данные = "Константы" Тогда
			Для Каждого СтрокаНазваний Из СтрокаДереваМетаданных.Строки Цикл
				Если Истина
					И ТолькоДляОбъектовСАвтоматическойРегистрацией
					И СтрокаНазваний.РежимАвтоРегистрации = Ложь 
				Тогда
					Продолжить;
				КонецЕсли;
				ПланыОбмена.ЗарегистрироватьИзменения(мВыбранныеУзлы, Константы[СтрокаНазваний.Имя]);
			КонецЦикла;
		ИначеЕсли Ложь
			Или СтрокаДереваМетаданных.Данные = "Справочники"
			ИЛИ СтрокаДереваМетаданных.Данные = "Документы"
			ИЛИ СтрокаДереваМетаданных.Данные = "ПланыВидовХарактеристик"
			ИЛИ СтрокаДереваМетаданных.Данные = "ПланыСчетов"
			ИЛИ СтрокаДереваМетаданных.Данные = "ПланыВидовРасчета"
			ИЛИ СтрокаДереваМетаданных.Данные = "БизнесПроцессы"
			ИЛИ СтрокаДереваМетаданных.Данные = "Задачи" 
		Тогда
			ИндикаторМД = ирОбщий.ПолучитьИндикаторПроцессаЛкс(СтрокаДереваМетаданных.Строки.Количество(), СтрокаДереваМетаданных.Данные);
			Для Каждого СтрокаНазваний Из СтрокаДереваМетаданных.Строки Цикл
				ирОбщий.ОбработатьИндикаторЛкс(ИндикаторМД);
				Если Истина
					И ТолькоДляОбъектовСАвтоматическойРегистрацией
					И СтрокаНазваний.РежимАвтоРегистрации = Ложь 
				Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаДереваМетаданных.Данные = "Справочники" Тогда
					ПрефиксОбъектаМетаданных = "Справочник";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "Документы" Тогда	
					ПрефиксОбъектаМетаданных = "Документ";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "ПланыВидовХарактеристик" Тогда	
					ПрефиксОбъектаМетаданных = "ПланВидовХарактеристик";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "ПланыСчетов" Тогда	
					ПрефиксОбъектаМетаданных = "ПланСчетов";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "ПланыВидовРасчета" Тогда	
					ПрефиксОбъектаМетаданных = "ПланВидовРасчета";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "БизнесПроцессы" Тогда	
					ПрефиксОбъектаМетаданных = "БизнесПроцесс";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "Задачи" Тогда	
					ПрефиксОбъектаМетаданных = "Задача";
				КонецЕсли;
				ВыполнитьРегистрациюПервогоОбъектаДляУзла(ПрефиксОбъектаМетаданных, СтрокаНазваний.Имя);
			КонецЦикла;
			ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
		ИначеЕсли Ложь
			Или СтрокаДереваМетаданных.Данные = "Последовательности"
			ИЛИ СтрокаДереваМетаданных.Данные = "РегистрыСведений"
			ИЛИ СтрокаДереваМетаданных.Данные = "РегистрыНакопления"
			ИЛИ СтрокаДереваМетаданных.Данные = "РегистрыБухгалтерии"
			ИЛИ СтрокаДереваМетаданных.Данные = "РегистрыРасчета" 
		Тогда
			ИндикаторМД = ирОбщий.ПолучитьИндикаторПроцессаЛкс(СтрокаДереваМетаданных.Строки.Количество(), СтрокаДереваМетаданных.Данные);
			Для Каждого СтрокаНазваний Из СтрокаДереваМетаданных.Строки Цикл
				ирОбщий.ОбработатьИндикаторЛкс(ИндикаторМД);
				Если Истина
					И ТолькоДляОбъектовСАвтоматическойРегистрацией
					И СтрокаНазваний.РежимАвтоРегистрации = Ложь 
				Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаДереваМетаданных.Данные = "Последовательности" Тогда
					ПрефиксОбъектаМетаданных = "Последовательность";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "РегистрыСведений" Тогда	
					ПрефиксОбъектаМетаданных = "РегистрСведений";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "РегистрыНакопления" Тогда	
					ПрефиксОбъектаМетаданных = "РегистрНакопления";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "РегистрыБухгалтерии" Тогда	
					ПрефиксОбъектаМетаданных = "РегистрБухгалтерии";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "РегистрыРасчета" Тогда	
					ПрефиксОбъектаМетаданных = "РегистрРасчета";
				КонецЕсли;
				ВыполнитьРегистрациюРегистра(СтрокаДереваМетаданных.Данные, ПрефиксОбъектаМетаданных, СтрокаНазваний.Имя);
			КонецЦикла;
			ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
		КонецЕсли;	
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	ПостроитьДеревоСоставаПланаОбмена();
		
КонецПроцедуры

Процедура КнопкаИзменитьНомераНажатие(Элемент)
	
	Если ЭлементыФормы.Узлы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ФормаИзмененияНомеров = ПолучитьФорму("ИзменениеНомеровСообщений", ЭтаФорма);
	ФормаИзмененияНомеров.УзелОбмена = ЭлементыФормы.Узлы.ТекущаяСтрока.Ссылка;
	ФормаИзмененияНомеров.ОткрытьМодально();
	
КонецПроцедуры

Процедура ДеревоОбменаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ДеревоОбменаПриАктивизацииСтроки(Элемент = Неопределено)
	
	Если ЭтаФорма.ПоказыватьСодержимое Тогда
		КП_ТаблицаИзмененийОбновить();
	КонецЕсли; 
	
КонецПроцедуры

//Процедура НаборЗаписейВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
//	
//	ЗначениеКолонки = ВыбраннаяСтрока[Колонка.Имя];
//	глПроверитьОткрытьСсылку(ЗначениеКолонки);

//КонецПроцедуры

//Процедура НаборЗаписейПередНачаломИзменения(Элемент, Отказ)
//	
//	Отказ = Истина;
//	
//КонецПроцедуры

//Процедура КлючОбъектаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
//	
//	ЗначениеКолонки = ВыбраннаяСтрока[Колонка.Имя];
//	глПроверитьОткрытьСсылку(ЗначениеКолонки);

//КонецПроцедуры

Процедура ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзмененияПриИзменении(Элемент = Неопределено)
	
	Если Не ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения Тогда
		ЭтаФорма.ОтображатьТолькоМетаданныеСИзменениями = Ложь;
		мДанныеПоКоличествуИзменений = Неопределено;
	КонецЕсли; 
	ЭлементыФормы.ОтображатьТолькоМетаданныеСИзменениями.Доступность = ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения;
	ПостроитьДеревоСоставаПланаОбмена();
	
КонецПроцедуры

Процедура ОтображатьТолькоМетаданныеСИзменениямиПриИзменении(Элемент)
	
	ПостроитьДеревоСоставаПланаОбмена();

КонецПроцедуры

Процедура ТаблицаИзмененийВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Ложь
		Или Колонка.Имя = "НомерСообщения" 
		Или (Истина
			И Колонка.Имя = "Ссылка"
			И мТекущаяГруппаТипаМетаданных = "Ссылочный")
	Тогда
		КП_ТаблицаИзмененийОткрыть();
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе
		КП_ТаблицаИзмененийОткрыть();
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 
	ирОбщий.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КП_ТаблицаИзмененийМенеджерТабличногоПоля(Кнопка)
	
	 ирОбщий.ПолучитьФормуЛкс("Обработка.ирМенеджерТабличногоПоля.Форма",, ЭтаФорма, ).УстановитьСвязь(ЭлементыФормы.ТаблицаИзменений);
	
КонецПроцедуры

Процедура КП_ТаблицаИзмененийОткрыть(Кнопка = Неопределено)
	
	ВыбраннаяСтрока = ЭлементыФормы.ТаблицаИзменений.ТекущаяСтрока;
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПолноеИмяМД = ЭлементыФормы.СоставПланаОбмена.ТекущаяСтрока.Данные;
	Если Найти(ПолноеИмяМД, "Константа") = 1 Тогда
		//Предупреждение(Данные.Значение, , Строка(Данные));
	Иначе
		Попытка
			Пустышка = Тип(СтрЗаменить(ПолноеИмяМД, ".", "Объект."));
			ЭтоСсылочныйОбъект = Истина;
		Исключение
			ЭтоСсылочныйОбъект = Ложь;
		КонецПопытки; 
		Если ЭтоСсылочныйОбъект Тогда
			//Данные.ПолучитьФорму().Открыть();
			ОткрытьЗначение(ВыбраннаяСтрока.Ссылка); // Ссылку надо брать, чтобы в управляемом режиме открывалась управляемая форма
		Иначе
			Отбор = Новый Структура;
			Для Каждого Колонка Из ТаблицаИзменений.Колонки Цикл
				Если Колонка.Имя <> "НомерСообщения" Тогда
					Отбор.Вставить(Колонка.Имя, ВыбраннаяСтрока[Колонка.Имя]);
				КонецЕсли; 
			КонецЦикла;
			ирОбщий.ОткрытьФормуСпискаСОтбором(ПолноеИмяМД, Отбор);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КП_ТаблицаИзмененийРедакторОбъектаБДЯчейки(Кнопка)
	
	ирОбщий.ОткрытьСсылкуЯчейкиВРедактореОбъектаБДЛкс(ЭлементыФормы.ТаблицаИзменений);
	
КонецПроцедуры

Процедура КоманднаяПанельДереваОбъектовОткрытьФормуСписка(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.СоставПланаОбмена.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ТекущаяСтрока.Уровень() = 1 Тогда
		Если ТекущаяСтрока.Родитель.Имя <> "Константа" Тогда
			ОткрытьФорму(ТекущаяСтрока.Данные + ".ФормаСписка");
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗагружатьИзмененияПриИзменении(Элемент)
	
	ПостроитьДеревоСоставаПланаОбмена();

КонецПроцедуры

Функция ПолучитьПостроительДляТаблицыИзменений(ВыбраннаяСтрока = Неопределено, МаксимальнаяПорция = 0)

	Если ВыбраннаяСтрока = Неопределено Тогда
		ВыбраннаяСтрока = ЭлементыФормы.СоставПланаОбмена.ТекущаяСтрока;
	КонецЕсли; 
	ТекстВыбор = "ВЫРАЗИТЬ(_Т.Узел КАК ПланОбмена." + ИмяПланОбмена + ") КАК Узел, _Т.*";
	Если мТекущаяГруппаТипаМетаданных = "Ссылочный" Тогда
		ТекстВыбор = ТекстВыбор + ", ВЫБОР КОГДА ЕСТЬNULL(_Т.Ссылка.Ссылка, 0) = 0 ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ОбъектУдален, _Т.Ссылка.ПометкаУдаления КАК ПометкаУдаления";
	КонецЕсли; 
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ВыбраннаяСтрока.Данные);
	ТекстПервые = "";
	Если МаксимальнаяПорция > 0 Тогда
		ТекстПервые = " ПЕРВЫЕ " + Формат(МаксимальнаяПорция, "ЧГ=");
	КонецЕсли; 
	Построитель = Новый ПостроительЗапроса("ВЫБРАТЬ " + ТекстПервые + ТекстВыбор + " ИЗ " + ВыбраннаяСтрока.Данные + ".Изменения КАК _Т АВТОУПОРЯДОЧИВАНИЕ");
	Построитель.ЗаполнитьНастройки();
	Для Каждого ДоступноеПоле Из Построитель.ДоступныеПоля Цикл
		Если ДоступноеПоле.Имя = "НомерСообщения" Тогда
			Продолжить;
		КонецЕсли; 
		Построитель.Порядок.Добавить(ДоступноеПоле.Имя, ДоступноеПоле.Имя);
	КонецЦикла;
	Если мТекущаяГруппаТипаМетаданных = "Ссылочный" Тогда
		ДоступноеПолеДата = Построитель.ДоступныеПоля.Ссылка.Поля.Найти("Дата");
		Если ДоступноеПолеДата <> Неопределено Тогда
			Построитель.ВыбранныеПоля.Добавить(ДоступноеПолеДата.ПутьКДанным, "Дата");
		КонецЕсли;
	КонецЕсли; 
	Построитель.ВыбранныеПоля.Удалить(Построитель.ВыбранныеПоля.Найти("Узел1"));
	Если мВыбранныеУзлы.Количество() = 1 Тогда
		Построитель.ВыбранныеПоля.Удалить(Построитель.ВыбранныеПоля.Найти("Узел"));
	КонецЕсли; 
	ЭлементОтбора = Построитель.Отбор.Добавить("Узел");
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
	СписокУзлов = Новый СписокЗначений;
	Если ЭлементыФормы.ИтогиТаблицыПоУзлам.ТекущаяСтрока.Узел = "<Все>" Тогда
		СписокУзлов.ЗагрузитьЗначения(мВыбранныеУзлы);
	Иначе
		СписокУзлов.Добавить(ЭлементыФормы.ИтогиТаблицыПоУзлам.ТекущаяСтрока.Узел);
	КонецЕсли; 
	ЭлементОтбора.Значение = СписокУзлов;
	
	// Антибаг 8.2.14 http://partners.v8.1c.ru/forum/thread.jsp?id=1017264#1017264
	Если ирКэш.Получить().ВерсияПлатформы >= 802014 Тогда
		Если мТекущаяГруппаТипаМетаданных = "Регистр" Тогда
			Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
				ВыбранноеПоле = Построитель.ВыбранныеПоля.Найти(ОбщийРеквизит.Имя);
				Если Истина
					И ВыбранноеПоле <> Неопределено
					И ОбъектМетаданных.Измерения.Найти(ОбщийРеквизит.Имя) = Неопределено
				Тогда
					Если ирОбщий.ЛиОбщийРеквизитИспользуетсяВОбъектеМетаданныхЛкс(ОбщийРеквизит, ОбъектМетаданных) Тогда
						Построитель.ВыбранныеПоля.Удалить(ВыбранноеПоле);
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;
	Возврат Построитель;

КонецФункции

Процедура КП_ТаблицаИзмененийОбновить(Кнопка = Неопределено)
	
	ОбновитьИтогиПоТаблице();
	СтруктураТекущейСтроки = Неопределено;
	ТекущаяКолонка = ЭлементыФормы.ТаблицаИзменений.ТекущаяКолонка;
	Если ТекущаяКолонка <> Неопределено Тогда
		ТекущаяКолонка = ТекущаяКолонка.Данные;
	КонецЕсли; 
	ТекущаяСтрокаИзменений = ЭлементыФормы.ТаблицаИзменений.ТекущаяСтрока;
	Если ТекущаяСтрокаИзменений <> Неопределено Тогда
		СтруктураТекущейСтроки = Новый Структура();
		Если мТекущаяГруппаТипаМетаданных = "Ссылочный" Тогда
			СтруктураТекущейСтроки.Вставить("Ссылка", ТекущаяСтрокаИзменений.Ссылка);
		Иначе
			Для Каждого Колонка Из ТаблицаИзменений.Колонки Цикл
				Если Колонка.Имя = "НомерСообщения" Тогда
					Продолжить;
				КонецЕсли; 
				СтруктураТекущейСтроки.Вставить(Колонка.Имя, ТекущаяСтрокаИзменений[Колонка.Имя]);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	ТаблицаИзменений.Очистить();
	ТаблицаИзменений.Колонки.Очистить();
	ВыбраннаяСтрока = ЭлементыФормы.СоставПланаОбмена.ТекущаяСтрока;
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УровеньВыбраннойСтроки = ВыбраннаяСтрока.Уровень();
	ЭлементыФормы.ТаблицаИзменений.ТолькоПросмотр = (УровеньВыбраннойСтроки = 0);
	Если УровеньВыбраннойСтроки = 1 Тогда
		ОбновитьИтогиПоТаблице();
		Попытка
			мМакетныйОбъект = Новый (СтрЗаменить(ВыбраннаяСтрока.Данные, ".", "Объект."));
			мТекущаяГруппаТипаМетаданных = "Ссылочный";
		Исключение
			Попытка
				мМакетныйОбъект = Новый (СтрЗаменить(ВыбраннаяСтрока.Данные, ".", "НаборЗаписей."));
				мТекущаяГруппаТипаМетаданных = "Регистр";
			Исключение
				мМакетныйОбъект = Новый (СтрЗаменить(ВыбраннаяСтрока.Данные, ".", "МенеджерЗначения."));
				мТекущаяГруппаТипаМетаданных = "Константа";
			КонецПопытки; 
		КонецПопытки;
		
		Построитель = ПолучитьПостроительДляТаблицыИзменений();
		ЧислоСтрокДляЗагрузки = ирОбщий.КонтрольРазмераВыборкиПользователемЛкс(Построитель);
		Если ЧислоСтрокДляЗагрузки > 0 Тогда
			Построитель = ПолучитьПостроительДляТаблицыИзменений(, ЧислоСтрокДляЗагрузки);
		КонецЕсли;
		// http://partners.v8.1c.ru/forum/thread.jsp?id=1034151#1034151
		//МаксимальныйРазмер = 500000;
		//Построитель = ПолучитьПостроительДляТаблицыИзменений(, МаксимальныйРазмер);
		
		Состояние("Выборка содержимого таблицы изменений...");
		мРезультатЗапроса = Построитель.Результат;
		ирОбщий.ЗагрузитьДинамическуюВыборкуВТабличноеПолеПервуюПорциюЛкс(ЭтаФорма, мРезультатЗапроса, мВыборкаРезультата,
			ЭлементыФормы.КП_ТаблицаИзменений);
		Состояние("Подготовка данных таблицы изменений...");
		// Дорогая операция!
		ТаблицаИзменений = ирОбщий.ПолучитьТаблицуСКолонкамиБезТипаNullЛкс(ТаблицаИзменений,,, "НомерСообщения");
		Состояние("");
		Если мТекущаяГруппаТипаМетаданных = "Ссылочный" Тогда
			ТаблицаИзменений.Колонки.ОбъектУдален.Заголовок = "Объект удален";
			ТаблицаИзменений.Колонки.ПометкаУдаления.Заголовок = "Ссылка.Пометка удаления";
			Если ТаблицаИзменений.Колонки.Найти("Дата") <> Неопределено Тогда
				ТаблицаИзменений.Колонки.Дата.Заголовок = "Ссылка.Дата";
			КонецЕсли; 
		КонецЕсли; 
		ТаблицаИзменений.Колонки.НомерСообщения.Заголовок = "Номер сообщения";
	Иначе
		мРезультатЗапроса = Неопределено;
		мВыборкаРезультата = Неопределено;
		ОбновитьРазмерДинамическойТаблицы();
	КонецЕсли;
	ЭлементыФормы.ТаблицаИзменений.СоздатьКолонки();
	Для Каждого КолонкаТП Из ЭлементыФормы.ТаблицаИзменений.Колонки Цикл
		Если Ложь
			Или КолонкаТП.Имя = "НомерСообщения" 
			Или (Истина
				И мТекущаяГруппаТипаМетаданных = "Ссылочный"
				И КолонкаТП.Имя <> "Ссылка"
				И КолонкаТП.Имя <> "Узел")
		Тогда
			КолонкаТП.ТолькоПросмотр = Истина;
		Иначе
			КолонкаТП.ЭлементУправления.УстановитьДействие("ОкончаниеВводаТекста", Новый Действие("ПолеВводаКолонкиСсылка_ОкончаниеВводаТекста"));
		КонецЕсли;
		КолонкаТП.ТекстШапки = ТаблицаИзменений.Колонки[КолонкаТП.Имя].Заголовок;
	КонецЦикла;
	Если СтруктураТекущейСтроки <> Неопределено Тогда
		НоваяСтруктураТекущейСтроки = Новый Структура();
		Для Каждого Колонка Из ТаблицаИзменений.Колонки Цикл
			Если Колонка.Имя = "НомерСообщения" Тогда
				Продолжить;
			КонецЕсли; 
			Если СтруктураТекущейСтроки.Свойство(Колонка.Имя) Тогда
				НоваяСтруктураТекущейСтроки.Вставить(Колонка.Имя, СтруктураТекущейСтроки[Колонка.Имя]);
			КонецЕсли; 
		КонецЦикла;
		НайденныеСтроки = ТаблицаИзменений.НайтиСтроки(НоваяСтруктураТекущейСтроки);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяТекущаяСтрока = НайденныеСтроки[0];
			Попытка
				ЭлементыФормы.ТаблицаИзменений.ТекущаяСтрока = НоваяТекущаяСтрока;
			Исключение
				// Если вызывано из ПриОкончанииРедактирования строки
			КонецПопытки; 
		КонецЕсли; 
	КонецЕсли; 
	Если ТекущаяКолонка <> Неопределено Тогда
		НоваяТекущаяКолонка = ЭлементыФормы.ТаблицаИзменений.Колонки.Найти(ТекущаяКолонка);
		Если НоваяТекущаяКолонка <> Неопределено Тогда
			ЭлементыФормы.ТаблицаИзменений.ТекущаяКолонка = НоваяТекущаяКолонка;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ГлавнаяКоманднаяПанельНовоеОкно(Кнопка)
	
	ирОбщий.ОткрытьНовоеОкноОбработкиЛкс(ЭтотОбъект);
	
КонецПроцедуры

Процедура ДействияФормыОПодсистеме(Кнопка)
	
	ирОбщий.ОткрытьСправкуПоПодсистемеЛкс(ЭтотОбъект);
	
КонецПроцедуры

Процедура ТаблицаИзмененийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ВыделенныеСтроки = ЭлементыФормы.ТаблицаИзменений.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Ответ = Вопрос("Вы действительно хотите удалить регистрацию по " + ВыделенныеСтроки.Количество() + " объектам?", РежимДиалогаВопрос.ОКОтмена);
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	СтрокаДереваТекущихДанных = ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные;
	СтрокаОбновления = ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные;
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ВыделенныеСтроки.Количество(), "Удаление регистрации");
	НачальноеКоличество = ВыделенныеСтроки.Количество(); 
	Для СчетчикВыделенныеСтроки = 1 По НачальноеКоличество Цикл
		ВыделеннаяСтрока = ВыделенныеСтроки[НачальноеКоличество - СчетчикВыделенныеСтроки];
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		КлючОбъекта = ПолучитьКлючОбъектаСтроки(ВыделеннаяСтрока);
		ПланыОбмена.УдалитьРегистрациюИзменений(мВыбранныеУзлы, КлючОбъекта);
		ТаблицаИзменений.Удалить(ВыделеннаяСтрока);
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	ОбновитьИтогиПоТаблице();
	//КП_ТаблицаИзмененийОбновить();

КонецПроцедуры

Процедура ТаблицаИзмененийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ТаблицаИзмененийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	Объект = ПолучитьОбъектДанныхПоСтрокеИзменений();
	лУзел = Неопределено;
	Если ТаблицаИзменений.Колонки.Найти("Узел") <> Неопределено Тогда
		лУзел = ЭлементыФормы.ТаблицаИзменений.ТекущаяСтрока.Узел;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(лУзел) Тогда
		лУзел = мВыбранныеУзлы;
	КонецЕсли; 
	ПланыОбмена.ЗарегистрироватьИзменения(лУзел, Объект);
	//ОбновитьИтогиПоТаблице();
	КП_ТаблицаИзмененийОбновить();
	
КонецПроцедуры

Процедура ТаблицаИзмененийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.КП_ТаблицаИзменений.Кнопки.Пустые.Пометка Тогда
		ирОбщий.ОтобразитьПустыеЗначенияВЯчейкахТабличногоПоля(ОформлениеСтроки);
	КонецЕсли;
	
КонецПроцедуры

Процедура КП_ТаблицаИзмененийПустые(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементыФормы.ТаблицаИзменений.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ТаблицаИзмененийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		Если мТекущаяГруппаТипаМетаданных = "Ссылочный" Тогда
			Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Ссылка) Тогда
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПолеВводаКолонкиСсылка_ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирОбщий.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
	ПланОбменаПриИзменении();

КонецПроцедуры

Процедура КП_ТаблицаИзмененийКонсольКомпоновки(Кнопка)
	
	Если ЭлементыФормы.ТаблицаИзменений.Колонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	Построитель = ПолучитьПостроительДляТаблицыИзменений();
	// Из-за бага платформы пока так не стоит делать
	//Построитель.Текст = СтрЗаменить(Построитель.Текст, "АВТОУПОРЯДОЧИВАНИЕ", "");
	//Отчеты.ирКонсольКомпоновокДанных.Создать().ОткрытьПоЗапросу(, Новый Структура("Узел", УзелОбмена));
	Запрос = Построитель.ПолучитьЗапрос();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "АВТОУПОРЯДОЧИВАНИЕ", "");
	КонсольКомпоновокДанных = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Отчет.ирКонсольКомпоновокДанных");
	#Если _ Тогда
		КонсольКомпоновокДанных = Отчеты.ирКонсольКомпоновокДанных.Создать();
	#КонецЕсли
    КонсольКомпоновокДанных.ОткрытьПоЗапросу(Запрос);
	
	//Отчеты.ирКонсольКомпоновокДанных.Создать().ОткрытьПоОбъектуМетаданных(ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные.Данные + ".Изменения", Новый Структура("Узел", УзелОбмена));
	
КонецПроцедуры

Процедура ПланОбменаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура КП_ТаблицаИзмененийЗагрузитьПолностью(Кнопка)
	
	ирОбщий.ЗагрузитьДинамическуюВыборкуВТабличноеПолеПолностьюЛкс(ЭтаФорма, мВыборкаРезультата, ЭлементыФормы.КП_ТаблицаИзменений);
	
КонецПроцедуры

Процедура ОбновитьРазмерДинамическойТаблицы() Экспорт

	ирОбщий.ПослеЗагрузкиДинамическойВыборкиВТабличноеПолеЛкс(ЭтаФорма, мВыборкаРезультата,
		ЭлементыФормы.КП_ТаблицаИзменений, ЭлементыФормы.КоличествоСтрокИзменений);

КонецПроцедуры // ОбновитьРазмерТаблицы()

Процедура СтруктураКоманднойПанелиНажатие(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруКоманднойПанелиЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура КП_ТаблицаИзмененийСброситьНомер(Кнопка)
	
	Отказ = Истина;
	ВыделенныеСтроки = ЭлементыФормы.ТаблицаИзменений.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Ответ = Вопрос("Вы действительно хотите сбросить номера сообщений по " + ВыделенныеСтроки.Количество() + " объектам?", РежимДиалогаВопрос.ОКОтмена);
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	СтрокаДереваТекущихДанных = ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные;
	СтрокаОбновления = ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные;
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ВыделенныеСтроки.Количество(), "Сброс номеров сообщений");
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		КлючОбъекта = ПолучитьКлючОбъектаСтроки(ВыделеннаяСтрока);
		ПланыОбмена.ЗарегистрироватьИзменения(мВыбранныеУзлы, КлючОбъекта);
		ВыделеннаяСтрока.НомерСообщения = Null;
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	
КонецПроцедуры

Функция ПолучитьКлючОбъектаСтроки(ВыделеннаяСтрока)

	КлючОбъекта = Неопределено;
	Если мТекущаяГруппаТипаМетаданных = "Ссылочный" Тогда
		КлючОбъекта = ВыделеннаяСтрока.Ссылка;
	ИначеЕсли мТекущаяГруппаТипаМетаданных = "Регистр" Тогда
		КлючОбъекта = мМакетныйОбъект;
		// http://partners.v8.1c.ru/forum/thread.jsp?id=1034617#1034617
		//мМакетныйОбъект.Отбор.Сбросить();
		Для Каждого Колонка Из ТаблицаИзменений.Колонки Цикл
			Если Колонка.Имя = "НомерСообщения" Тогда
				Продолжить;
			КонецЕсли; 
			ЭлементОтбора = мМакетныйОбъект.Отбор[Колонка.Имя];
			ЭлементОтбора.Значение = ВыделеннаяСтрока[Колонка.Имя];
			ЭлементОтбора.Использование = Истина;
		КонецЦикла;
	ИначеЕсли мТекущаяГруппаТипаМетаданных = "Константа" Тогда
		КлючОбъекта = мМакетныйОбъект;
	КонецЕсли; 
	Возврат КлючОбъекта;

КонецФункции

Процедура КП_ТаблицаИзмененийРедакторОбъектаБДСтроки(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ТаблицаИзменений.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	КлючОбъекта = ПолучитьКлючОбъектаСтроки(ТекущаяСтрока);
	ирОбщий.ОткрытьСсылкуВРедактореОбъектаБДЛкс(КлючОбъекта);
	
КонецПроцедуры

Процедура ПланОбменаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Форма = ирКэш.Получить().ПолучитьФорму("ВыборОбъектаМетаданных", Элемент, ЭтаФорма);
	ДоступныеОбъектыМД = Новый Массив();
	ДоступныеОбъектыМД.Добавить("ПланОбмена." + ИмяПланОбмена); // Первый автоматически станет текущим
	Для Каждого МетаПланОбмена Из Метаданные.ПланыОбмена Цикл
		ДоступныеОбъектыМД.Добавить(МетаПланОбмена.ПолноеИмя());
	КонецЦикла;
	Форма.НачальноеЗначениеВыбора = ДоступныеОбъектыМД;
	СтандартнаяОбработка = Ложь;
	Форма.ОткрытьМодально();
	
КонецПроцедуры

Процедура ИмяПланОбменаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		лПолноеИмяОбъекта = Неопределено;
		Если ВыбранноеЗначение.Свойство("ПолноеИмяОбъекта", лПолноеИмяОбъекта) Тогда
			ЭтаФорма.ИмяПланОбмена = ирОбщий.ПолучитьПоследнийФрагментЛкс(лПолноеИмяОбъекта);
			ПланОбменаПриИзменении(Элемент);
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	
КонецПроцедуры

Процедура УзлыПриИзмененииФлажка(Элемент, Колонка)
	
	ПриИзмененииВыбранныхУзлов();

КонецПроцедуры

Процедура ИмяПланОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ИмяПланОбмена) Тогда
		ОткрытьФорму("ПланОбмена." + ИмяПланОбмена + ".ФормаСписка");
	КонецЕсли; 
	
КонецПроцедуры

Процедура УзлыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ОткрытьЗначение(ВыбраннаяСтрока.Ссылка);
	
КонецПроцедуры

Процедура КПУзлыОбновить(Кнопка = Неопределено, ПринудительныйПризнакИзменениеВыбранныхУзлов = Неопределено)
	
	мДанныеПоКоличествуИзменений = Неопределено;
	Узлы.Очистить();
	//ИтогиТаблицыПоУзлам.Очистить();
	Если Не ЗначениеЗаполнено(ИмяПланОбмена) Тогда
		Возврат;
	КонецЕсли;
	ВыборкаУзлов = ПланыОбмена[ИмяПланОбмена].Выбрать();
	#Если _ Тогда
	    ВыборкаУзлов = ПланыОбмена.ПолныйИис.Выбрать();
	#КонецЕсли
	Пока ВыборкаУзлов.Следующий() Цикл
		Если ВыборкаУзлов.Ссылка = ПланыОбмена[ИмяПланОбмена].ЭтотУзел() Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаУзла = Узлы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУзла, ВыборкаУзлов);
		Если мВыбранныеУзлы.Найти(ВыборкаУзлов.Ссылка) <> Неопределено Тогда
			СтрокаУзла.Пометка = Истина;
		КонецЕсли; 
	КонецЦикла;
	НачальноеКоличество = мВыбранныеУзлы.Количество(); 
	ВыбранныеУзлыИзменены = Ложь;
	Для СчетчикмВыбранныеУзлы = 1 По НачальноеКоличество Цикл
		ВыбранныйУзел = мВыбранныеУзлы[НачальноеКоличество - СчетчикмВыбранныеУзлы];
		Если Узлы.Найти(ВыбранныйУзел, "Ссылка") = Неопределено Тогда
			Если ТипЗнч(ВыбранныйУзел) = Тип("ПланОбменаСсылка." + ИмяПланОбмена) Тогда
				НоваяСтрока = Узлы.Добавить();
				НоваяСтрока.Ссылка = ВыбранныйУзел;
				НоваяСтрока.Пометка = Истина;
			Иначе
				мВыбранныеУзлы.Удалить(НачальноеКоличество - СчетчикмВыбранныеУзлы);
				ВыбранныеУзлыИзменены = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	Если Ложь
		Или ПринудительныйПризнакИзменениеВыбранныхУзлов = Истина 
		Или ВыбранныеУзлыИзменены
		Или ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения // Это нужно, чтобы несуществующие узлы обновлялись
	Тогда
		ПриИзмененииВыбранныхУзлов();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриИзмененииВыбранныхУзлов()
	
	ВыбранныеСтроки = Узлы.НайтиСтроки(Новый Структура("Пометка", Истина));
	ТекстУзлов = "";
	мВыбранныеУзлы = Новый Массив();
	Для Каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
		Если ТекстУзлов <> "" Тогда
			ТекстУзлов = ТекстУзлов + ", ";
		КонецЕсли; 
		ТекстУзлов = ТекстУзлов + СокрЛП(ВыбраннаяСтрока.Код);
		мВыбранныеУзлы.Добавить(ВыбраннаяСтрока.Ссылка);
	КонецЦикла;
	ИтогиТаблицыПоУзлам.Очистить();
	СтрокаИтоговТаблицы = ИтогиТаблицыПоУзлам.Добавить();
	СтрокаИтоговТаблицы.Узел = "<Все>";
	ЭлементыФормы.ИтогиТаблицыПоУзлам.ТекущаяСтрока = СтрокаИтоговТаблицы;
	Для Каждого ВыбранныйУзел Из мВыбранныеУзлы Цикл
		СтрокаИтоговТаблицы = ИтогиТаблицыПоУзлам.Добавить();
		СтрокаИтоговТаблицы.Узел = ВыбранныйУзел;
	КонецЦикла;
	ЭтаФорма.ПредставлениеВыбранныхУзлов = "Выбрано " + мВыбранныеУзлы.Количество() + " узлов";
	Если ЗначениеЗаполнено(ТекстУзлов) Тогда
		ЭтаФорма.ПредставлениеВыбранныхУзлов = ЭтаФорма.ПредставлениеВыбранныхУзлов + ": " + ТекстУзлов;
	КонецЕсли;
	Если Ложь
		Или ОтображатьТолькоМетаданныеСИзменениями 
		Или СоставПланаОбмена.Строки.Количество() = 0
	Тогда
		ПостроитьДеревоСоставаПланаОбмена();
	Иначе
		ОбновитьСтатистикуВСоставеПланаОбмена();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КПУзлыУстановитьПометки(Кнопка)
	
	ирОбщий.ИзменитьПометкиВыделенныхСтрокЛкс(ЭлементыФормы.Узлы, , Истина);
	ПриИзмененииВыбранныхУзлов();
	
КонецПроцедуры

Процедура КПУзлыСнятьПометки(Кнопка)
	
	ирОбщий.ИзменитьПометкиВыделенныхСтрокЛкс(ЭлементыФормы.Узлы, , Ложь);
	ПриИзмененииВыбранныхУзлов();

КонецПроцедуры

Процедура ИтогиТаблицыПоУзламПриАктивизацииСтроки(Элемент)
	
	КП_ТаблицаИзмененийОбновить();
	
КонецПроцедуры

Процедура ОбновитьИтогиПоТаблице(ВыбраннаяСтрока = Неопределено)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		ВыбраннаяСтрока = ЭлементыФормы.СоставПланаОбмена.ТекущаяСтрока;
	КонецЕсли; 
	Для Каждого СтрокаУзла Из ИтогиТаблицыПоУзлам Цикл
		СтрокаУзла.КоличествоЗарегистрированных = 0;
		СтрокаУзла.КоличествоНевыгруженных = 0;
		СтрокаУзла.КоличествоВыгруженных = 0;
	КонецЦикла; 
	Если Истина
		И ВыбраннаяСтрока <> Неопределено
		И ВыбраннаяСтрока.Уровень() = 1
		И мДанныеПоКоличествуИзменений <> Неопределено 
	Тогда
		ирОбщий.ОбновитьСтатистикуПоТаблицеОбъектаМДВРезультатеПакетаЛкс(мДанныеПоКоличествуИзменений, ВыбраннаяСтрока.Данные, "Данные", "КоличествоЗарегистрированных", Истина, 
				Новый Структура("Узел", Узлы.ВыгрузитьКолонку("Ссылка")));
		Для Каждого ТаблицаРезультата Из мДанныеПоКоличествуИзменений Цикл
			Для Каждого СтрокаРезультата Из ТаблицаРезультата.НайтиСтроки(Новый Структура("Данные", ВыбраннаяСтрока.Данные)) Цикл
				СтрокаУзла = ИтогиТаблицыПоУзлам.Найти(СтрокаРезультата.Узел, "Узел");
				Если СтрокаУзла = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				СтрокаУзла.КоличествоЗарегистрированных = СтрокаУзла.КоличествоЗарегистрированных + СтрокаРезультата.КоличествоЗарегистрированных;
				СтрокаУзла.КоличествоНевыгруженных = СтрокаУзла.КоличествоНевыгруженных + СтрокаРезультата.КоличествоНевыгруженных;
				СтрокаУзла.КоличествоВыгруженных = СтрокаУзла.КоличествоВыгруженных + СтрокаРезультата.КоличествоВыгруженных;
				СтрокаУзла = ИтогиТаблицыПоУзлам.Найти("<Все>", "Узел");
				СтрокаУзла.КоличествоЗарегистрированных = СтрокаУзла.КоличествоЗарегистрированных + СтрокаРезультата.КоличествоЗарегистрированных;
				СтрокаУзла.КоличествоНевыгруженных = СтрокаУзла.КоличествоНевыгруженных + СтрокаРезультата.КоличествоНевыгруженных;
				СтрокаУзла.КоличествоВыгруженных = СтрокаУзла.КоличествоВыгруженных + СтрокаРезультата.КоличествоВыгруженных;
			КонецЦикла;
		КонецЦикла; 
		ОбновитьКоличествоДляСтрокиДерева(ВыбраннаяСтрока);
	КонецЕсли;
	ОбновитьИтогиПоУзлам();

КонецПроцедуры

Процедура ТаблицаИзмененийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если ЭлементыФормы.ИтогиТаблицыПоУзлам.ТекущаяСтрока <> Неопределено Тогда
		лУзел = ЭлементыФормы.ИтогиТаблицыПоУзлам.ТекущаяСтрока.Узел;
		Если ТипЗнч(лУзел) <> Тип("Строка") Тогда
			Элемент.ТекущиеДанные.Узел = лУзел;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельДереваОбъектовОткрытьОбработкуОбъектов(Кнопка)
	
	Если ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ОбработкаОбъектов = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирПодборИОбработкаОбъектов");
	#Если _ Тогда
	    ОбработкаОбъектов = Обработки.ирПодборИОбработкаОбъектов.Создать();
	#КонецЕсли
	ФормаОбработки = ОбработкаОбъектов.ПолучитьФорму();
	ФормаОбработки.Открыть();
	ОбработкаОбъектов.ИспользоватьОтборПоУзлу = Истина;
	Если ЭлементыФормы.Узлы.ТекущаяСтрока <> Неопределено Тогда
		ОбработкаОбъектов.УзелОтбораОбъектов = ЭлементыФормы.Узлы.ТекущаяСтрока.Ссылка;
	Иначе
		ОбработкаОбъектов.УзелОтбораОбъектов = Новый ("ПланОбменаСсылка." + ИмяПланОбмена);
	КонецЕсли; 
	ФормаОбработки.УстановитьОбластьПоиска(ЭлементыФормы.СоставПланаОбмена.ТекущиеДанные.Данные);
	
КонецПроцедуры

Процедура КПУзлыВыгрузкаДанныхЧерезФайл(Кнопка)
	
	Если ЭлементыФормы.Узлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ОбработкаОбъектов = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирВыгрузкаЗагрузкаДанныхЧерезФайл");
	#Если _ Тогда
	    ОбработкаОбъектов = Обработки.ирВыгрузкаЗагрузкаДанныхЧерезФайл.Создать();
	#КонецЕсли
	ФормаОбработки = ОбработкаОбъектов.ПолучитьФорму();
	ФормаОбработки.Открыть();
	ОбработкаОбъектов.УзелВыборкиДанных = ЭлементыФормы.Узлы.ТекущаяСтрока.Ссылка;
	
КонецПроцедуры

Процедура КоманднаяПанельДереваОбъектовСверткаСодержимое(Кнопка)
	
	ИзменитьСвернутостьПанельТекущейТаблицы(Не ПоказыватьСодержимое);
	Если ПоказыватьСодержимое Тогда
		КП_ТаблицаИзмененийОбновить();
	КонецЕсли; 

КонецПроцедуры

Процедура ИзменитьСвернутостьПанельТекущейТаблицы(Видимость)
	
	ирОбщий.ИзменитьСвернутостьЛкс(Видимость, ЭлементыФормы.ПанельТекущейТаблицы, ЭтаФорма.ЭлементыФормы.РазделительГоризонтальный, ЭтаФорма.Панель, "низ");
	ЭлементыФормы.КоманднаяПанельДереваОбъектов.Кнопки.СверткаСодержимое.Пометка = Видимость;
	ЭтаФорма.ПоказыватьСодержимое = Видимость;

КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не Отказ Тогда
		ИзменитьСвернутостьПанельТекущейТаблицы(Истина);
	КонецЕсли; 

КонецПроцедуры

ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирРедакторИзмененийПоПлануОбмена.Форма.Форма");

СоставПланаОбмена.Колонки.Добавить("Данные");
мСоответствиеСтрокДереваИМетаданных = Новый Массив();
ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения = Истина;
ЭлементыФормы.ОтображатьТолькоМетаданныеСИзменениями.Доступность = ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения;
ОтображатьТолькоМетаданныеСИзменениями = Истина;
мВыбранныеУзлы = Новый Массив();
ПоказыватьСодержимое = Истина;
